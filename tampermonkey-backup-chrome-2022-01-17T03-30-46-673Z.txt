{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"HTML5视频播放工具","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["https://user.qzone.qq.com/*","https://www.meiju11.com/new/Play/*","https://www.hanjutvaa.com/player/*","https://www.olevod.com/index.php/vod/play/id/*","https://www.olevod.tv/index.php/vod/play/id/*","https://olevod.com/index.php/vod/play/id/*","https://olevod.tv/index.php/vod/play/id/*"],"orig_includes":["https://*.qq.com/*","https://www.weiyun.com/video_*","https://v.youku.com/v_show/id_*","https://vku.youku.com/live/*","https://video.tudou.com/v/*","https://www.iqiyi.com/*","https://live.bilibili.com/*","https://www.bilibili.com/*","https://www.ixigua.com/*","https://www.acfun.cn/*","http://v.pptv.com/show/*","https://v.pptv.com/show/*","https://www.miguvideo.com/*","https://tv.sohu.com/*","https://film.sohu.com/album/*","https://www.mgtv.com/*","https://pan.baidu.com/*","https://yun.baidu.com/*","https://*.163.com/*","https://*.icourse163.org/*","https://*.sina.com.cn/*","https://video.sina.cn/*","http://k.sina.*","https://k.sina.*","https://weibo.com/*","https://*.weibo.com/*","https://pan.baidu.com/*","https://yun.baidu.com/*","http://v.ifeng.com/*","https://v.ifeng.com/*","http://news.mtime.com/*","http://video.mtime.com/*","https://www.youtube.com/watch?v=*","https://www.ted.com/talks/*","https://www.yy.com/*","https://www.huya.com/*","https://v.douyu.com/*","https://www.douyu.com/*","http://star.longzhu.com/*","https://star.longzhu.com/*","https://www.zhanqi.tv/*","*/play*","*play/*","https://www.meiju11.com/ckplayerx/m3u8.php*","https://ww4.hanjutvaa.com/index.php*","https://olevod.com/static/player/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":["/(^[^:\\/#\\?]*:\\/\\/([^#\\?\\/]*\\.)?www\\.bilibili\\.com(:[0-9]{1,5})?\\/.*$)/"],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"bili_danmu":"btrue"},"ts":1630066351373},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/30545-%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8/code/%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8.user.js","uuid":"c54a3580-c767-4247-ad53-924e0abb22e7","source":""},{"name":"贴吧页面精简","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*://tieba.baidu.com/f/fdir*"],"orig_includes":["*://tieba.baidu.com/*","*://dq.tieba.com/*","*://jump2.bdimg.com/*","*://jump.bdimg.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"version":"s2.8.0"},"ts":1630066351379},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/23687-%E8%B4%B4%E5%90%A7%E9%A1%B5%E9%9D%A2%E7%B2%BE%E7%AE%80/code/%E8%B4%B4%E5%90%A7%E9%A1%B5%E9%9D%A2%E7%B2%BE%E7%AE%80.user.js","uuid":"7283bb34-547d-4a09-a548-6ad3b10b5711","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDotLTlkKfpobXpnaLnsr7nroAKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3NjcmlwdHMvMjM2ODcKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2NvZGluZy5uZXQvdS9CYWNrUnVubmVyL3AvR3JlYXNlTW9ua2V5LUpTL2dpdAovLyBAdmVyc2lvbiAgICAgIDIuOC4wCi8vIEBkZXNjcmlwdGlvbiAg44CQ5Y+v6IO95piv5L2g6YGH5Yiw55qE5pyA5aW955So55qE6LS05ZCn57K+566A6ISa5pys44CR77yM5Y676Zmk5ZCE56eN5bm/5ZGK5Y+K5omw55y85qih5Z2X77yM5YWo6Z2i5pSv5oyB5ZCE56eN6LS05ZCn6aG16Z2i77yM5YWN55m75b2V55yL5biW77yM44CQ5YCS5bqP55yL5biW44CRCi8vIEBhdXRob3IgICAgICAgQmFja1J1bm5lcgovLyBAaW5jbHVkZSAgICAgICo6Ly90aWViYS5iYWlkdS5jb20vKgovLyBAaW5jbHVkZSAgICAgICo6Ly9kcS50aWViYS5jb20vKgovLyBAaW5jbHVkZSAgICAgICo6Ly9qdW1wMi5iZGltZy5jb20vKgovLyBAaW5jbHVkZSAgICAgICo6Ly9qdW1wLmJkaW1nLmNvbS8qCi8vIEBleGNsdWRlICAgICAgKjovL3RpZWJhLmJhaWR1LmNvbS9mL2ZkaXIqCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtYm9keQovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmJvb3Rjc3MuY29tL2pxdWVyeS8zLjQuMS9qcXVlcnkubWluLmpzCi8vIEBsaWNlbnNlICAgICAgTUlUCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBncmFudCAgICAgICAgR01fc2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX2RlbGV0ZVZhbHVlCi8vIEBncmFudCAgICAgICAgR01fbGlzdFZhbHVlcwovLyBAZ3JhbnQgICAgICAgIEdNX2luZm8KLy8gPT0vVXNlclNjcmlwdD09CgovLyA9PT09ICBUaXBzID09PT09Ci8vIOS9v+eUqFRhbXBlck1vbmtleeeahOeUqOaIt+WPr+S7peWwhuiEmuacrOeahOWKoOi9veS9jee9ruiuvue9ruS4umRvY3VtZW50LXN0YXJ06I635b6X5pu05aW95pWI5p6c77yM6Iul5Ye6546w5LiN55Sf5pWI562J6ZSZ6K+v6K+36L+Y5Y6f6K6+572uCi8vIOivt+agueaNruaCqOeahOmcgOimgeagueaNruS4i+mdouS7o+eggeeahOazqOmHiumAieaLqemcgOimgemakOiXj+eahOaooeWdl++8jOacieS4jeaDs+makOiXj+eahOaooeWdl+WPr+S7peazqOmHiuaOiemCo+S4gOihjOS7o+eggQovLyDor7fmoLnmja7mgqjnmoTpnIDopoHkuI7ms6jph4rosIPmlbTlj5jph4/lrprkuYnlhoXnmoTlhoXlrrkKLy8g5oKo6Ieq6KGM5L+u5pS555qE5Luj56CB5Lya5Zyo5pu05paw55qE5pe25YCZ6KKr6KaG55uW77yM5bu66K6u5oKo5aSH5Lu95oKo5L+u5pS555qE5YaF5a65Ci8vIOmBh+WIsOmXrumimOivt+eri+WNs+WPjemmiAovLyA9PT09IERvbmF0ZSA9PT09Ci8vIOWmguaenOaCqOinieW+l+acrOiEmuacrOWlveeUqOWPr+S7pei1nuWKqeaIkeS4gOeCuembtuiKsQovLyBkb25hdGVAYmFja3J1bm5lci50b3AgKOaUr+S7mOWunSkKLy8gPT09IOabtOaWsOaXpeW/lyA9PT0KLy8gMjAyMC4wMS4xNiAtIDIuOC4wCi8vIOS/ruWkjemXrumimAovLyAyMDE4LjEyLjI2IC0gMi43LjE1Ci8vIOS/ruWkjUNocm9tZeaWsOeJiOacrOS4iueahOWFvOWuuemXrumimOOAggovLyAyMDE4LjEwLjIxIC0gMi43LjE0Ci8vIOa3u+WKoOS4gOS4quWfn+WQjemHjeWumuWQkeinhOWImQovLyAyMDE4LjEwLjEzIC0gMi43LjEzCi8vIOabtOaNompRdWVyeeeahENETu+8jOiEmuacrOWKoOi9veaPkOmAnwovLyDkv67lpI3kuobkuIDkupvpl67popgKLy8gPT09PT09PT09PT09PT09PQoKCihmdW5jdGlvbigpIHsKICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gICAgICAgIOWPmOmHj+WumuS5iQogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09CiAgICB2YXIgc2xlZXBUaW1lOwogICAgdmFyIHNsZWVwVGltZVdoZW5QYWdlVHVybjsKICAgIHZhciByZXZlcnNlU2xlZXBUaW1lOwogICAgdmFyIHBvc3Rwcm9jZXNzOwogICAgdmFyIGhvbWVQYWdlUHJvY2VzczsKICAgIHZhciBncm91cFBhZ2VQcm9jZXNzOwogICAgdmFyIG5vTG9naW5Qcm9jZXNzOwogICAgdmFyIHJldmVyc2U7CiAgICB2YXIgaG9tZVByb2Nlc3M7CiAgICB2YXIgaXNIZWFkaW1nOwogICAgdmFyIGNoZWNrcmF0ZTsKICAgIHZhciBkZWxheVNjcmlwdFJ1blRpbWVzOwogICAgdmFyIGlzUmVkaXJlY3Q7CiAgICB2YXIgZGlzcGxheUxpdmU7CiAgICB2YXIgZGlzcGxheVNpZ247CiAgICB2YXIgYXV0b0Nsb3NlR3VpZGU7CiAgICAvL+iEmuacrOWbuuWumuW8gOWFswogICAgdmFyIGlzQ3RybFBhbmVsT247CiAgICAvL+W6lemDqOS/oeaBr2RpdgogICAgdmFyIGZvb3Q7CiAgICB2YXIgaG9tZVBhZ2VNYXRjaCA9IFJlZ0V4cCgiKGh0dHB8aHR0cHMpOlwvXC90aWViYS5iYWlkdS5jb21cLygjKiQpfChodHRwfGh0dHBzKTpcL1wvdGllYmEuYmFpZHUuY29tXC8oaW5kZXhcLmh0bWwjKiQpIik7CiAgICAvLz09PT09PT09PT09PT09PT09PT09PQogICAgLy/ku6XkuIrlhoXlrrnlj6/ku6Xkv67mlLnvvIzor7fli7/kv67mlLnku6XkuIvlhoXlrrkKICAgIC8vPT09PT09PT09PT09PT09PT09PT09CiAgICB2YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICB2YXIgZmluaXNoVGltZSA9IC0xOwogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyAgICAgICAg5Li75omn6KGM5Yy6CiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8v5o6n5Yi25Y+w5L+h5oGvCiAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5Yid5aeL5YyWJyk7CiAgICAvL+WIneWni+WMlgogICAgaW5pdGlhbGl6ZSgpOwogICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOWQr+WKqCcpOwogICAgLy/ph43lrprlkJEKICAgIGlmIChpc1JlZGlyZWN0KXsKICAgICAgICByZWRpcmVjdCgpOwogICAgfQogICAgLy9jc3Pkv67mlLkKICAgIGFwcGVuZENTUygpOwogICAgLy/mm7TmlrDkv6Hmga8KICAgIHVwZGF0ZUFsZXJ0KCk7CiAgICAvL+WFjeeZu+W9lQogICAgaWYgKG5vTG9naW5Qcm9jZXNzKXsKICAgICAgICBub0xvZ2luKCk7CiAgICB9CiAgICBpZiAocG9zdHByb2Nlc3MpewogICAgICAgIC8v5oOw5oCn6ISa5pys5omn6KGMCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy/liqDovb3orqHml7YKICAgICAgICAgICAgZmluaXNoVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lOwogICAgICAgICAgICBjb25zb2xlLmxvZygn6LS05ZCn6aG16Z2i57K+566AOiDpobXpnaLliqDovb3nlKjml7Y6ICcgKyBmaW5pc2hUaW1lKTsKICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOW8gOWni+aJp+ihjOaDsOaAp+iEmuacrCcpOwogICAgICAgICAgICAvL+aOp+WItumdouadvwogICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5q2j5Zyo5Yib5bu65o6n5Yi26Z2i5p2/Jyk7CiAgICAgICAgICAgICAgICBpZihpc0N0cmxQYW5lbE9uKXsKICAgICAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sUGFuZWwoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy/lupXpg6jkv6Hmga8KICAgICAgICAgICAgdHJ5ewogICAgICAgICAgICAgICAgY3JlYXRlRm9vdGVyTGF5ZXIoKTsKICAgICAgICAgICAgICAgIGFkZEZpbmlzaFRpbWVUb0Zvb3RlcigpOwogICAgICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL+WvvOiIquagj+e/u+mhteebkeWQrAogICAgICAgICAgICBhZGRMaXN0ZW5lclRvTmF2KCk7CiAgICAgICAgICAgIC8v5YiX6KGo57+76aG155uR5ZCsCiAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoImt3PSIpIT0gLTEgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigic2VhcmNoIik9PS0xKXsKICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9MaXN0KCk7CiAgICAgICAgICAgICAgICBhZGluTGlzdENsZWFuKCk7CiAgICAgICAgICAgICAgICBkaXNhYmxlRm9ydW1DYXJkKCk7CiAgICAgICAgICAgICAgICAvL+iHquWKqOaUtui1t+aMh+W8lSAqMjAxODA1MDkKICAgICAgICAgICAgICAgIGNsb3NlR3VpZGUoKTsKICAgICAgICAgICAgICAgIC8v5by55qGG5YWz6ZetICoyMDE4MTAxMwogICAgICAgICAgICAgICAgcmVtb3ZlUG9wdXBNb2RhbCgpOwogICAgICAgICAgICAgICAgLy/lhbPms6jmjInpkq7kv67lpI0gKjIwMjAwMTE2CiAgICAgICAgICAgICAgICBmaXhGb2N1c0J1dHRvbigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoInRpZWJhLmJhaWR1LmNvbS9wLyIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lclRvUGFnZSgpOwogICAgICAgICAgICAgICAgICAgIHRwb2ludEFEQ2xlYW4oKTsKICAgICAgICAgICAgICAgICAgICBhZGluUGFnZUNsZWFuKCk7CiAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZW9yZGVyKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJ0aWViYS5iYWlkdS5jb20vZ3JvdXAiKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybign6LS05ZCn6aG16Z2i57K+566AOiDlvZPliY3kvY3kuo7nvqTnu4TpobXpnaLvvIzkuI3miafooYznvqTnu4TpobXpnaLmg7DmgKfohJrmnKwnKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9tZVBhZ2VNYXRjaC50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kQ2xlYW5JbmRleEFERXZlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybign6LS05ZCn6aG16Z2i57K+566AOiDpobXpnaLmnKrpgILphY3lu7bov5/ohJrmnKwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIC8v5bu26L+f5omn6KGMCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVjayxzbGVlcFRpbWUgKiBjaGVja3JhdGUpOwogICAgICAgICAgICB2YXIgbj0wOwogICAgICAgICAgICBmdW5jdGlvbiBjaGVjaygpewogICAgICAgICAgICAgICAgdmFyIHRpbWVzID0gbisxOwogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOW7tui/n+iEmuacrOato+WcqOaJp+ihjOesrCAnICsgdGltZXMgKyAnIOasoScpOwogICAgICAgICAgICAgICAgLy/mjqfliLbpnaLmnb8KICAgICAgICAgICAgICAgIHRyeXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5q2j5Zyo5Yib5bu65o6n5Yi26Z2i5p2/Jyk7CiAgICAgICAgICAgICAgICAgICAgaWYoaXNDdHJsUGFuZWxPbil7CiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbnRyb2xQYW5lbCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8v5bqV6YOo5L+h5oGvCiAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRm9vdGVyTGF5ZXIoKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8v5a+86Iiq5qCP57+76aG155uR5ZCsCiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lclRvTmF2KCk7CiAgICAgICAgICAgICAgICAvL+WIl+ihqOe/u+mhteebkeWQrAogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZigia3c9IikhPSAtMSAmJiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJzZWFyY2giKT09LTEpewogICAgICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9MaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgYWRpbkxpc3RDbGVhbigpOwogICAgICAgICAgICAgICAgICAgIGRpc2FibGVGb3J1bUNhcmQoKTsKICAgICAgICAgICAgICAgICAgICAvL+iHquWKqOaUtui1t+aMh+W8lSAqMjAxODA1MDkKICAgICAgICAgICAgICAgICAgICBjbG9zZUd1aWRlKCk7CiAgICAgICAgICAgICAgICAgICAgLy/lvLnmoYblhbPpl60gKjIwMTgxMDEzCiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUG9wdXBNb2RhbCgpOwogICAgICAgICAgICAgICAgICAgIC8v5L+u5aSN5YWz5rOo5oyJ6ZKuICoyMDIwMDExNgogICAgICAgICAgICAgICAgICAgIGZpeEZvY3VzQnV0dG9uKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJ0aWViYS5iYWlkdS5jb20vcC8iKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9QYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRwb2ludEFEQ2xlYW4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRpblBhZ2VDbGVhbigpOwogICAgICAgICAgICAgICAgICAgICAgICByZXZlcnNlb3JkZXIoKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9tZVBhZ2VNYXRjaC50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kQ2xlYW5JbmRleEFERXZlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFuQURpbkluZGV4KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZVN0YXJ0KCk7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZVN0YXJ0KCl7CiAgICAgICAgICAgICAgICAgICAgbisrOwogICAgICAgICAgICAgICAgICAgIGlmIChuPmRlbGF5U2NyaXB0UnVuVGltZXMtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sc2xlZXBUaW1lKTsKICAgIH0gZWxzZSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVjayxzbGVlcFRpbWUgKiBjaGVja3JhdGUpOwogICAgICAgICAgICB2YXIgbiA9IDA7CiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrKCl7CiAgICAgICAgICAgICAgICAvL+aOp+WItumdouadvwogICAgICAgICAgICAgICAgdHJ5ewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybign6LS05ZCn6aG16Z2i57K+566AOiDmraPlnKjliJvlu7rmjqfliLbpnaLmnb8nKTsKICAgICAgICAgICAgICAgICAgICBpZihpc0N0cmxQYW5lbE9uKXsKICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFBhbmVsKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy/lupXpg6jkv6Hmga8KICAgICAgICAgICAgICAgIHRyeXsKICAgICAgICAgICAgICAgICAgICBjcmVhdGVGb290ZXJMYXllcigpOwogICAgICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbisrOwogICAgICAgICAgICAgICAgaWYgKG4+ZGVsYXlTY3JpcHRSdW5UaW1lcyAtMSl7CiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy/liqDovb3orqHml7YKICAgICAgICAgICAgZmluaXNoVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lOwogICAgICAgICAgICBjb25zb2xlLmxvZygn6LS05ZCn6aG16Z2i57K+566AOiDpobXpnaLliqDovb3nlKjml7Y6ICcgKyBmaW5pc2hUaW1lKTsKICAgICAgICAgICAgLy/mjqfliLbpnaLmnb8KICAgICAgICAgICAgdHJ5ewogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOato+WcqOWIm+W7uuaOp+WItumdouadvycpOwogICAgICAgICAgICAgICAgaWYoaXNDdHJsUGFuZWxPbil7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFBhbmVsKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8v5bqV6YOo5L+h5oGvCiAgICAgICAgICAgIHRyeXsKICAgICAgICAgICAgICAgIGNyZWF0ZUZvb3RlckxheWVyKCk7CiAgICAgICAgICAgICAgICBhZGRGaW5pc2hUaW1lVG9Gb290ZXIoKTsKICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5ZCO5aSE55CG6ISa5pys5bey6Lez6L+HJyk7CiAgICB9CiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8v5Yqf6IO95Yy6IOivt+WLv+S/ruaUueS4i+mdoueahOWGheWuuQogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvL+WIneWni+WMlgogICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpewogICAgICAgIHNsZWVwVGltZSA9IGluaXRpYWxpemVfdmFyKCJzbGVlcFRpbWUiLDMwMCk7CiAgICAgICAgc2xlZXBUaW1lV2hlblBhZ2VUdXJuID0gaW5pdGlhbGl6ZV92YXIoInNsZWVwVGltZVdoZW5QYWdlVHVybiIsODAwKTsKICAgICAgICByZXZlcnNlU2xlZXBUaW1lID0gaW5pdGlhbGl6ZV92YXIoInJldmVyc2VTbGVlcFRpbWUiLDIwMCk7CiAgICAgICAgcG9zdHByb2Nlc3MgPSBpbml0aWFsaXplX3ZhcigicG9zdHByb2Nlc3MiLHRydWUpOwogICAgICAgIGlzUmVkaXJlY3QgPSBpbml0aWFsaXplX3ZhcigiaXNSZWRpcmVjdCIsdHJ1ZSk7CiAgICAgICAgaG9tZVBhZ2VQcm9jZXNzID0gaW5pdGlhbGl6ZV92YXIoImhvbWVQYWdlUHJvY2VzcyIsdHJ1ZSk7CiAgICAgICAgZ3JvdXBQYWdlUHJvY2VzcyA9IGluaXRpYWxpemVfdmFyKCJncm91cFBhZ2VQcm9jZXNzIix0cnVlKTsKICAgICAgICBub0xvZ2luUHJvY2VzcyA9IGluaXRpYWxpemVfdmFyKCJub0xvZ2luUHJvY2VzcyIsdHJ1ZSk7CiAgICAgICAgcmV2ZXJzZSA9IGluaXRpYWxpemVfdmFyKCJyZXZlcnNlIixmYWxzZSk7CiAgICAgICAgaG9tZVByb2Nlc3MgPSBpbml0aWFsaXplX3ZhcigiaG9tZVByb2Nlc3MiLHRydWUpOwogICAgICAgIGlzSGVhZGltZyA9IGluaXRpYWxpemVfdmFyKCJpc0hlYWRpbWciLGZhbHNlKTsKICAgICAgICBjaGVja3JhdGUgPSBpbml0aWFsaXplX3ZhcigiY2hlY2tyYXRlIiwxKTsKICAgICAgICBkZWxheVNjcmlwdFJ1blRpbWVzID0gaW5pdGlhbGl6ZV92YXIoImRlbGF5U2NyaXB0UnVuVGltZXMiLDYpOwogICAgICAgIGRpc3BsYXlMaXZlID0gaW5pdGlhbGl6ZV92YXIoImRpc3BsYXlMaXZlIixmYWxzZSk7CiAgICAgICAgZGlzcGxheVNpZ24gPSBpbml0aWFsaXplX3ZhcigiZGlzcGxheVNpZ24iLGZhbHNlKTsKICAgICAgICBhdXRvQ2xvc2VHdWlkZSA9IGluaXRpYWxpemVfdmFyKCJhdXRvQ2xvc2VHdWlkZSIsdHJ1ZSk7CiAgICAgICAgLy/lm7rlrprlvIDlhbMgKjIwMTgwNTEwCiAgICAgICAgaXNDdHJsUGFuZWxPbiA9IGluaXRpYWxpemVfdmFyKCJpc0N0cmxQYW5lbE9uIix0cnVlKTsKICAgIH0KICAgIGZ1bmN0aW9uIGluaXRpYWxpemVfdmFyKG5hbWUsZGVmYXVsdFNldCl7CiAgICAgICAgdmFyIG9iaiA9IEdNX2dldFZhbHVlKG5hbWUsZGVmYXVsdFNldCk7CiAgICAgICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgb2JqID0gZGVmYXVsdFNldDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0KICAgIC8vY3Nz5L+u5pS5CiAgICBmdW5jdGlvbiBhcHBlbmRDU1MoKXsKICAgICAgICB2YXIgY3NzVGV4dCA9ICIiOwogICAgICAgIC8v6aG26YOo55u05pKt5qCPCiAgICAgICAgY3NzVGV4dCArPSAnI3ZpZGVvX2Zyc19oZWFkIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj7PkvqfkvJrlkZjmqKHlnZcKICAgICAgICBjc3NUZXh0ICs9ICcuY2VsZWJyaXR5IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj7PkvqfmiJHnmoTlupTnlKjmqKHlnZcKICAgICAgICBjc3NUZXh0ICs9ICcubXlfYXBwIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/ng63orq7mppwKICAgICAgICBjc3NUZXh0ICs9ICcudG9waWNfbGlzdF9ib3gge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+W5v+WRiueBsOiJsmxhYmVsCiAgICAgICAgY3NzVGV4dCArPSAnLmxhYmVsX3RleHQge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WPs+i+ueS4gOaOkuWbvuaghwogICAgICAgIGNzc1RleHQgKz0gJy5qX2ljb25fc2xvdCB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v5Lya5ZGY5Zu+5qCH77yI5Lya6YCg5oiQ55So5oi35ZCN5bem56e777yM5LiA5a6a56iL5bqm5LiK5b2x5ZON5pW05L2T576O6KeC77yJCiAgICAgICAgLy9jc3NUZXh0ICs9ICcuaWNvbl90YndvcmxkIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/mgqjlj6/og73mhJ/lhbTotqPnmoTlkKcKICAgICAgICBjc3NUZXh0ICs9ICcuZm9ydW1fcmVjb21tZW5kIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj7PkuIrop5LlupTnlKjkuK3lv4MKICAgICAgICBjc3NUZXh0ICs9ICcudV9tZW51X3dyYXAudV9hcHBjZW50ZXJFbnRyYW5jZV93cmFwIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj7PkuIrop5LkvJrlkZjlrpjnvZEKICAgICAgICBjc3NUZXh0ICs9ICcudV9qb2ludmlwX3dyYXAudmlwX3JlZC5qX2J0bl9nZXRtZW1iZXIge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICBjc3NUZXh0ICs9ICcudV9qb2ludmlwIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lhoXpobXpobbpg6hiYW5uZXIKICAgICAgICBjc3NUZXh0ICs9ICcubF9iYW5uZXIge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WGhemhteaIkOWwsXNlY3Rpb24KICAgICAgICBjc3NUZXh0ICs9ICcuYWNoaWV2ZW1lbnRfbWVkYWxfc2VjdGlvbiB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v6aG26YOo5ri45oiP5L+h5oGvCiAgICAgICAgY3NzVGV4dCArPSAnLmdhbWUtaGVhZC1nYW1lLWluZm8td3JhcHBlciB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v5YaF6aG16YCB56S854mp5oyJ6ZKuCiAgICAgICAgY3NzVGV4dCArPSAnLnBvc3QtZm9vdC1zZW5kLWdpZnQtYnRuIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/kvJrlkZjmjL3lsIrmjInpkq4KICAgICAgICBjc3NUZXh0ICs9ICcuc2F2ZV9mYWNlX2JnIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgY3NzVGV4dCArPSAnLnNhdmVfZmFjZV9iZ18yIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lupXpg6jmuLjmiI/lvIDmtYsKICAgICAgICBjc3NUZXh0ICs9ICcjZHVva3Vfc2VydmVyc19saXN0IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj7Pkvqfng63pl6jljaHljIUKICAgICAgICBjc3NUZXh0ICs9ICcudTlfYXNpZGUge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WPs+S+p+Wwj+ivtOS6uuawlOamnAogICAgICAgIGNzc1RleHQgKz0gJy5ub3ZlbC1yYW5raW5nLWZycy1ib2R5IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lpLTlg4/kuIvpnaLnmoTkuIDmjpLlm77moIcKICAgICAgICBjc3NUZXh0ICs9ICcuaWNvbl93cmFwIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/otLTlkKfop6bngrnmjqjlub/lm77niYfvvIjlnKjlu7bov5/lpITnkIbliY3pooTlpITnkIbvvIkKICAgICAgICBjc3NUZXh0ICs9ICcudHBvaW50LWltZ3Mge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WPs+S4i+inkueCruetkgogICAgICAgIGNzc1RleHQgKz0gJy5qLWZpcmV3b3JrLXNlbmRlciB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v6K6/6LCI55u05pKtCiAgICAgICAgaWYgKCFkaXNwbGF5TGl2ZSl7CiAgICAgICAgICAgIGNzc1RleHQgKz0gJy5pbnRlcnZpZXcge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICB9CiAgICAgICAgLy/otLTlhoXnm7jlhbPmjqjojZAKICAgICAgICBjc3NUZXh0ICs9ICcudGhyZWFkX3JlY29tbWVuZCB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v6LS05YaF5bm/5ZGKCiAgICAgICAgY3NzVGV4dCArPSAnLmlmcmFtZV93cmFwcGVyIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj7PkvqfotLTlkKfkvZzogIXorqTor4EKICAgICAgICBjc3NUZXh0ICs9ICcuYXV0aG9yLW1hbmFnZXIge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+i+k+WFpeahhnBsYWNlaG9sZGVyCiAgICAgICAgY3NzVGV4dCArPSAnLnRiX3Bvc3Rlcl9wbGFjZWhvbGRlciB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v5Zu+54mH562+5ZCN5qGjCiAgICAgICAgaWYgKCFkaXNwbGF5U2lnbil7CiAgICAgICAgICAgIGNzc1RleHQgKz0gJy5qX3VzZXJfc2lnbiB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgICAgICBjc3NUZXh0ICs9ICcuZF9zaWduX3NwbGl0IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgfQogICAgICAgIC8v5Lya5ZGY5ZCN54mMCiAgICAgICAgY3NzVGV4dCArPSAnLnBiX25hbWVwbGF0ZSB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v5Y+z5L6n6I+c5Y2V5qCP57K+566ACiAgICAgICAgY3NzVGV4dCArPSAnLnRidWlfZmJhcl9wcm9wcyB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIGNzc1RleHQgKz0gJy50YnVpX2ZiYXJfdHN1a2tvbWkge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WQp+S4u+S4k+eJiAogICAgICAgIGNzc1RleHQgKz0gJy50YnVpX2ZiYXJfYmF6aHUge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WPs+S+p+WPr+eCueWHu+W5v+WRigogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiAhPT0gImh0dHA6Ly90aWViYS5iYWlkdS5jb20vIiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiAhPT0gImh0dHBzOi8vdGllYmEuYmFpZHUuY29tLyIpewogICAgICAgICAgICBjc3NUZXh0ICs9ICcual9jbGlja19zdGF0cyB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIH0KICAgICAgICAvL+WPs+S+p+inhumikeaOqOiNkAogICAgICAgIGNzc1RleHQgKz0gJyN2aWRlb19hc2lkZSB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v5LiA5qW855S15b2x5bm/5ZGKCiAgICAgICAgY3NzVGV4dCArPSAnLnRwb2ludC1za2luIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/nm7Tmkq3pobXpnaLlupXpg6jlvLnlh7rmoI8KICAgICAgICBjc3NUZXh0ICs9ICcuYXR0ZW50aW9uX3RpcF93cmFwIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lupXpg6jms6jlhowv55m75b2V5qiq5p2hCiAgICAgICAgY3NzVGV4dCArPSAnLmd1aWRhbmNlX2ZjIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy9jb250ZW50LWFkIHNwYW4KICAgICAgICBjc3NUZXh0ICs9ICcuY29udGVudC1hZCB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8vaGVhZCBhZCBzcGFuCiAgICAgICAgY3NzVGV4dCArPSAnLmhlYWRfYWRfdGFnIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgY3NzVGV4dCArPSAnLmhlYWRfYWRfcG9wIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/kvJrlkZjnva7pobZidWJibGUKICAgICAgICBjc3NUZXh0ICs9ICcjdGJfbWVzc2FnZV90aXBfZCB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgIC8v5bqU55So5Lit5b+DbmF2CiAgICAgICAgY3NzVGV4dCArPSAnLmFwcF9mb3J1bV90b3BfbmF2IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgY3NzVGV4dCArPSAnI2pfY29yZV90aXRsZV93cmFwIHt0b3A6MHB4ICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/pobbmoI/kvJrlkZgKICAgICAgICBjc3NUZXh0ICs9ICcudV9tZW1iZXIge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WvvOiIquagj+a4uOaIjwogICAgICAgIGNzc1RleHQgKz0gJyNqX25hdnRhYl9nYW1lIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/lj5HluJbmoYbmsJTms6EKICAgICAgICBjc3NUZXh0ICs9ICcudWlfYnViYmxlX2JvZHkge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+ekvOi1ngogICAgICAgIGNzc1RleHQgKz0gJy5naWZ0LWdvaW4ge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+a8gua1geeTtgogICAgICAgIGNzc1RleHQgKz0gJy50YnVpX2ZiYXJfbm9ib3R0bGUge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+aJq+aPj+S4i+i9vUFQUAogICAgICAgIGNzc1RleHQgKz0gJy5hcHBfZG93bmxvYWRfYm94IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy/mn5DkuKrlj7Pkvqfmta7liqjlub/lkYrnmoRjbG9zZeaMiemSrgogICAgICAgIGNzc1RleHQgKz0gJy5qX2NsaWNrX2Nsb3NlIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgLy82MTggQmFubmVyCiAgICAgICAgY3NzVGV4dCArPSAnLnNob3dCYXIge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+WPs+S4iuinkuawlOazoQogICAgICAgIGNzc1RleHQgKz0gJy51aV9idWJibGVfY29udGVudCB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50fSc7CiAgICAgICAgLy9IYW8xMjMKICAgICAgICBjc3NUZXh0ICs9ICcual91X21lbnVfZXh0cmFfdXJsX2xpbmsge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudH0nOwogICAgICAgIC8v5aSn5a626YO95Zyo5pCcCiAgICAgICAgY3NzVGV4dCArPSAnLnNlYXJjaF9iYWNrX2JveCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9JzsKICAgICAgICAvL+S4i+i9vUFQUAogICAgICAgIGNzc1RleHQgKz0gJy50YnVpX2ZiYXJfZG93biB7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9JzsKICAgICAgICAvL25hbmkKICAgICAgICBjc3NUZXh0ICs9ICcubmFuaV9hcHBfZG93bmxvYWRfYm94IHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+S8muWRmOiPnOWNlQogICAgICAgIGNzc1RleHQgKz0gJy51X21lbnVfbWVtYmVyIHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAvL+iPnOWNlSAqMjAxODEwMTIKICAgICAgICBjc3NUZXh0ICs9ICcudV9teXRibWFsbCwudV9nYW1lLC51X2JsdWV7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fSc7CgogICAgICAgIC8v576k57uE6aG16Z2i5Y+z5L6n5LiL6L29CiAgICAgICAgaWYgKGdyb3VwUGFnZVByb2Nlc3MpewogICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigidGllYmEuYmFpZHUuY29tL2dyb3VwIikgIT0gLTEpewogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnLnJpZ2h0IHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8v5Li76aG15qih5Z2X57K+566ACiAgICAgICAgaWYgKGhvbWVQYWdlUHJvY2Vzcyl7CiAgICAgICAgICAgIGlmIChob21lUGFnZU1hdGNoLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpKXsKICAgICAgICAgICAgICAgIC8v6aG26YOoCiAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVuc2FmZVdpbmRvdy5QYWdlRGF0YS51c2VyLmlzX2xvZ2luID09PSAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnLnRvcC1zZWMge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfotLTlkKfpobXpnaLnsr7nroA6IOeZu+W9leeKtuaAgeajgOafpemUmeivrycpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL+ebtOaSreengAogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnLnNwYWdlX2xpdmVzaG93X3NsaWRlIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICAvL+S7peS4i+aooeWdl+WboOS4uuWcqOWPs+S+p+acieS4gOS4quS4i+a7kemhtemdouaXtuiuqeaooeWdl+S7jeeEtuS/neaMgeWcqOWPr+inhuWMuuWfn+WGheeahOiuvuiuoe+8jOWNleeLrOeyvueugOS4gOS4quS8mumAoOaIkOa7muWKqOmhtemdouaXtuaooeWdl+mUmeS9je+8jOaJgOS7peWFqOmDqOeyvueugAogICAgICAgICAgICAgICAgLy/kubHkuIPlhavns5/nmoTmu5rliqjmtLvliqjmqKHlnZcKICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJyNwbGF0X2FjdF93cmFwcGVyIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICAvL+ixquWPi+S/seS5kOmDqAogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnLm1lbWJlcl9yYW5rIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICAvL+WqkuS9k+i/m+mpuwogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnI2FkaWRlX3BsYXRmb3JtIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICAvL+i0tOWQp+WoseS5kAogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnI21lZGlhX2l0ZW0ge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9JzsKICAgICAgICAgICAgICAgIC8v5oiR55qE5ri45oiPCiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICcjc3BhZ2VfZ2FtZV90YWJfd3JhcHBlciB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgICAgICAgICAgLy/lhazlkYrmnb8KICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJyNub3RpY2VfaXRlbSB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgICAgICAgICAgLy/osIPmlbTkvY3nva4gKjIwMTcxMjIzCiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICcucmlnaHQtc2VjIHttYXJnaW4tdG9wOi0xNXB4ICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICAvL+i0tOWQp+eyvumAieS4k+mimCAqMjAxNzEyMjMKICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJy5hZ2dyZWdhdGVfZW50cmFuY2Vfd3JhcCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICAvL+acqueZu+W9leaXtueahOa7muWKqOaoquW5hSAqMjAxODA1MDQKICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJyNyZWNfbGVmdCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fSAjcmVjX3JpZ2h0e2Zsb2F0OnJpZ2h0O3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjMwcHg7bWFyZ2luLXRvcDoxNXB4O30nOwogICAgICAgICAgICAgICAgLy/nlKjmiLfpnaLmnb/nmoTkuIDkupvlm77ooajnrYkgKjIwMTgxMDEyCiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICcuaWNvbl90YndvcmxkIHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9IC51c2VyX3Njb3Jle2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30nOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvL+S4quS6uuS4u+mhteeyvueugAogICAgICAgIGlmIChob21lUHJvY2Vzcyl7CiAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJ0aWViYS5iYWlkdS5jb20vaG9tZSIpICE9PSAtMSl7CiAgICAgICAgICAgICAgICAvL+WPs+S+p+ekvOeJqemdouadvwogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAiLmlob21lLWFzaWRlLWdpZnQtY2VudGVyIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnR9IjsKICAgICAgICAgICAgICAgIC8v5rGC5ama5oyJ6ZKuCiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICIudXNlcmluZm8tbWFycnkge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudH0iOwogICAgICAgICAgICAgICAgLy/miJHnmoTlpLrlrp0KICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gIi5paG9tZS1hc2lkZS1ncmFiLXRyZWFzdXJlIHtkaXNwbGF5OiBub25lICFpbXBvcnRhbnR9IjsKICAgICAgICAgICAgICAgIC8v5oiR55qEVOixhuOAgeiTnemSuwogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAiLnVzZXJpbmZvX3Njb3JlcyB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50fSI7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8v5YiX6KGo6aG15aS05Zu+57K+566ACiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoInRpZWJhLmJhaWR1LmNvbS9mIikgIT09IC0xKXsKICAgICAgICAgICAgaWYgKGlzSGVhZGltZyl7CiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICIuaGVhZF9iYW5uZXJfaW1nLC5oZWFkX2FkX3BvcCwuaGVhZF9iYW5uZXIge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudH0iOwogICAgICAgICAgICAgICAgLy/pobbpg6hjc3PosIPmlbQgKjIwMTcxMjIzCiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICcuaGVhZF9jb250ZW50IHtwYWRkaW5nLXRvcDoyMHB4ICFpbXBvcnRhbnR9JzsKICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJy5jYXJkX2Jhbm5lciwucGxhdF9yZWNvbV9jYXJvdXNlbCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9JzsKICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJy5jYXJkX2hlYWQge3dpZHRoOjcwcHggIWltcG9ydGFudDtoZWlnaHQ6NzBweCAhaW1wb3J0YW50O21hcmdpbi1ib3R0b206MTBweCAhaW1wb3J0YW50O21hcmdpbi10b3A6MTAwcHggIWltcG9ydGFudH0nOwogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnLmNhcmRfaGVhZF9pbWcge3dpZHRoOjcwcHggIWltcG9ydGFudDtoZWlnaHQ6NzBweCAhaW1wb3J0YW50O30nOwogICAgICAgICAgICAgICAgY3NzVGV4dCArPSAnLmNhcmRfdGl0bGUge21hcmdpbi1sZWZ0Oi01MHB4ICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9ICcuY2FyZF9zbG9nYW4ge21hcmdpbi1sZWZ0Oi01MHB4ICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8v6K6+572u6Z2i5p2/Y3NzCiAgICAgICAgY3NzVGV4dCArPSAnI2JhY2tydW5uZXJKU1NldHRpbmdfcm9vdCB7cmlnaHQ6MCAhaW1wb3J0YW50O30gI2JhY2tydW5uZXJKU1NldHRpbmdfY29uIHtyaWdodDowICFpbXBvcnRhbnQ7d2lkdGg6MjAwcHggaW1wb3J0YW50O30nOwogICAgICAgIGNzc1RleHQgKz0gJyNiYWNrcnVubmVySlNTZXR0aW5nX2NvbiBhIHtkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7d2hpdGUtc3BhY2U6bm93cmFwOyAhaW1wb3J0YW50fSc7CiAgICAgICAgY3NzVGV4dCArPSAnI2JhY2tydW5uZXJKU1NldHRpbmdfY29uIGxpIHtsaW5lLWhlaWdodDoyM3B4ICFpbXBvcnRhbnQ7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O3doaXRlLXNwYWNlOm5vd3JhcCAhaW1wb3J0YW50O30nOwogICAgICAgIGNzc1RleHQgKz0gJyNiYWNrcnVubmVySlNTZXR0aW5nX2NvbiBsaSBhIHtwYWRkaW5nLXRvcDowcHggIWltcG9ydGFudDtwYWRkaW5nLWJvdHRvbTowcHggIWltcG9ydGFudDtwYWRkaW5nLXJpZ2h0OjFlbSAhaW1wb3J0YW50O3BhZGRpbmctbGVmdDoxZW0gIWltcG9ydGFudDttYXJnaW46MCAhaW1wb3J0YW50O2xpbmUtaGVpZ2h0OjIuNGVtICFpbXBvcnRhbnQ7fSc7CiAgICAgICAgY3NzVGV4dCArPSAnLnNlYXJjaF9uYXYge21hcmdpbi1yaWdodDo0NzBweCAhaW1wb3J0YW50O30nOwoKICAgICAgICAvL3JldmVyc2Xnm7jlhbNjc3MgKjIwMTcxMjIzCiAgICAgICAgY3NzVGV4dCArPSAnLmJyX3JldmVyc2VfbGkge2Rpc3BsYXk6aW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7bWFyZ2luLWxlZnQ6MTVweCAhaW1wb3J0YW50O21hcmdpbi10b3A6LTE0cHggIWltcG9ydGFudDt9JzsKICAgICAgICBjc3NUZXh0ICs9ICcuY29yZV90aXRsZV90eHQge3dpZHRoOjQwMHB4ICFpbXBvcnRhbnQ7fSc7CgogICAgICAgIC8v5bqV6YOo5L+h5oGvY3NzCiAgICAgICAgY3NzVGV4dCArPSAnI2Zvb3RlciB7cGFkZGluZy1ib3R0b206MHB4ICFpbXBvcnRhbnQ7fSc7CgogICAgICAgIGNvbnNvbGUubG9nKCfotLTlkKfpobXpnaLnsr7nroA6IGNzc+WIm+W7uuWujOaIkCcpOwoKICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKICAgICAgICBlbGVtZW50LnJlbD0ic3R5bGVzaGVldCI7CiAgICAgICAgZWxlbWVudC50eXBlPSJ0ZXh0L2NzcyI7CiAgICAgICAgZWxlbWVudC5ocmVmPSdkYXRhOnRleHQvY3NzLCcrY3NzVGV4dDsKCiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpOwoKICAgICAgICB2YXIgbW9kU3R5bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kQ1NTJyk7CiAgICAgICAgaWYgKG1vZFN0eWxlID09PSBudWxsKXsKICAgICAgICAgICAgbW9kU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgICAgICAgICBtb2RTdHlsZS5pZCA9ICdtb2RDU1MnOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1vZFN0eWxlKTsKICAgICAgICAgICAgbW9kU3R5bGUuaW5uZXJIVE1MID0gY3NzVGV4dDsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coJ+i0tOWQp+mhtemdoueyvueugDogY3Nz5bey5re75YqgJyk7CiAgICB9CiAgICAvL+WIl+ihqOe/u+mhteebkeWQrAogICAgZnVuY3Rpb24gYWRkTGlzdGVuZXJUb0xpc3QoKXsKICAgICAgICAkKCcjZnJzX2xpc3RfcGFnZXIgYScpLmVhY2goZnVuY3Rpb24oKXsKICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsbGlzdFBhZ2VUdXJuRXZlbnQpOwogICAgICAgIH0pOwogICAgICAgIGNvbnNvbGUubG9nKCfotLTlkKfpobXpnaLnsr7nroA6IOWIl+ihqOe/u+mhteebkeWQrOa3u+WKoOWujOavlScpOwogICAgfQogICAgLy/luJblrZDjgIHnsr7lk4Hnv7vpobXnm5HlkKwKICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyVG9OYXYoKXsKICAgICAgICAkKCcubmF2X2xpc3QgbGknKS5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGlmKHRoaXMuYXR0cmlidXRlc1snZGF0YS10YWItbWFpbiddIHx8IHRoaXMuYXR0cmlidXRlc1snZGF0YS10YWItZ29vZCddKXsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsbGlzdFBhZ2VUdXJuRXZlbnQpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CiAgICAvL+WIl+ihqOe/u+mhteebkeWQrOS6i+S7tgogICAgZnVuY3Rpb24gbGlzdFBhZ2VUdXJuRXZlbnQoKXsKICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5YiX6KGo57+76aG15LqL5Lu26Kem5Y+RJyk7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVjayxzbGVlcFRpbWVXaGVuUGFnZVR1cm4gKiBjaGVja3JhdGUpOwogICAgICAgICAgICBmdW5jdGlvbiBjaGVjaygpewogICAgICAgICAgICAgICAgYWRkTGlzdGVuZXJUb05hdigpOwogICAgICAgICAgICAgICAgYWRkTGlzdGVuZXJUb0xpc3QoKTsKICAgICAgICAgICAgICAgIGFkaW5MaXN0Q2xlYW4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lclRvTmF2KCk7CiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lclRvTGlzdCgpOwogICAgICAgICAgICAgICAgYWRpbkxpc3RDbGVhbigpOwogICAgICAgICAgICB9LHNsZWVwVGltZSk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9OYXYoKTsKICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9MaXN0KCk7CiAgICAgICAgICAgICAgICBhZGluTGlzdENsZWFuKCk7CiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgICAgICAgfSxmaW5pc2hUaW1lLzMpOwogICAgICAgIH0sc2xlZXBUaW1lV2hlblBhZ2VUdXJuKTsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyVG9QYWdlKCl7CiAgICAgICAgJCgnLmxfcGFnZXIgYScpLmVhY2goZnVuY3Rpb24oKXsKICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycscGFnZVR1cm5FdmVudCk7CiAgICAgICAgfSk7CiAgICAgICAgY29uc29sZS5sb2coJ+i0tOWQp+mhtemdoueyvueugDog5biW5a2Q57+76aG155uR5ZCs5re75Yqg5a6M5q+VJyk7CiAgICB9CiAgICBmdW5jdGlvbiBwYWdlVHVybkV2ZW50KCl7CiAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOW4luWtkOe/u+mhteS6i+S7tuinpuWPkScpOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoY2hlY2ssc2xlZXBUaW1lV2hlblBhZ2VUdXJuICogY2hlY2tyYXRlKTsKICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2soKXsKICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9OYXYoKTsKICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyVG9QYWdlKCk7CiAgICAgICAgICAgICAgICBhZGluUGFnZUNsZWFuKCk7CiAgICAgICAgICAgICAgICB0cG9pbnRBRENsZWFuKCk7CiAgICAgICAgICAgICAgICByZXZlcnNlb3JkZXIoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lclRvTmF2KCk7CiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lclRvUGFnZSgpOwogICAgICAgICAgICAgICAgYWRpblBhZ2VDbGVhbigpOwogICAgICAgICAgICAgICAgdHBvaW50QURDbGVhbigpOwogICAgICAgICAgICAgICAgcmV2ZXJzZW9yZGVyKCk7CiAgICAgICAgICAgIH0sc2xlZXBUaW1lKTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgYWRkTGlzdGVuZXJUb05hdigpOwogICAgICAgICAgICAgICAgYWRkTGlzdGVuZXJUb1BhZ2UoKTsKICAgICAgICAgICAgICAgIGFkaW5QYWdlQ2xlYW4oKTsKICAgICAgICAgICAgICAgIHRwb2ludEFEQ2xlYW4oKTsKICAgICAgICAgICAgICAgIHJldmVyc2VvcmRlcigpOwogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7CiAgICAgICAgICAgIH0sZmluaXNoVGltZS8zKTsKICAgICAgICB9LHNsZWVwVGltZVdoZW5QYWdlVHVybik7CiAgICB9CiAgICAvL+inpueCueaOqOW5vwogICAgZnVuY3Rpb24gdHBvaW50QURDbGVhbigpewogICAgICAgIGNvbnNvbGUubG9nKCfotLTlkKfpobXpnaLnsr7nroA6IOW8gOWni+eyvueugOinpueCueaOqOW5vycpOwogICAgICAgIHZhciBwb2ludGFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHBvaW50LWltZ3MnKTsKICAgICAgICBjb25zb2xlLmxvZygn6LS05ZCn6aG16Z2i57K+566AOiDmipPlj5bliLDnmoTlub/lkYrlhYPntKDmlbDph486ICcrcG9pbnRhZC5sZW5ndGgpOwogICAgICAgIGZvcih2YXIgaT0wO2k8cG9pbnRhZC5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgcG9pbnRhZFtpXS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwb2ludGFkW2ldLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZSk7CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCfotLTlkKfpobXpnaLnsr7nroA6IOinpueCueaOqOW5v+eyvueugOWujOavlScpOwogICAgfQoKICAgIC8v5YiX6KGo5YaF5bm/5ZGKCiAgICBmdW5jdGlvbiBhZGluTGlzdENsZWFuKCl7CiAgICAgICAgY29uc29sZS5sb2coJ+i0tOWQp+mhtemdoueyvueugDog5byA5aeL57K+566A5YiX6KGo5YaF5bm/5ZGKJyk7CiAgICAgICAgdmFyIGFkaW5MaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGhyZWFkbGlzdF9yZXBfbnVtJyk7CiAgICAgICAgdmFyIG51bSA9IDA7CiAgICAgICAgY29uc29sZS5sb2coJ+i0tOWQp+mhtemdoueyvueugDog5YiX6KGo5YaF5YWD57Sg5oqT5Y+W6YePOiAnK2FkaW5MaXN0Lmxlbmd0aCk7CiAgICAgICAgZm9yICh2YXIgaT0wO2k8YWRpbkxpc3QubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIGlmIChhZGluTGlzdFtpXS50aXRsZSA9PT0gIuW5v+WRiiIgfHwgYWRpbkxpc3RbaV0udGl0bGUgPT09ICLng63pl6giKXsKICAgICAgICAgICAgICAgIG51bSsrOwogICAgICAgICAgICAgICAgYWRpbkxpc3RbaV0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhZGluTGlzdFtpXS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coJ+i0tOWQp+mhtemdoueyvueugDog5YiX6KGo5YaF5bm/5ZGK57K+566A5a6M5q+V77yM5YWx57K+566AICcrIG51bSArICcg5LiqJyk7CiAgICAgICAgLy/mlrDlop7moLnmja5jbGFzc+i/h+a7pAogICAgICAgIHZhciBsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RocmVhZF9saXN0JykuY2hpbGRyZW47CiAgICAgICAgZm9yIChpPTA7aTxsaXN0Lmxlbmd0aDtpKyspewogICAgICAgICAgICB2YXIgY2xhc3NOYW1lPWxpc3RbaV0uZ2V0QXR0cmlidXRlKCdjbGFzcycpOwogICAgICAgICAgICBpZiAoY2xhc3NOYW1lICE9IG51bGwpewogICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0uZ2V0QXR0cmlidXRlKCdjbGFzcycpLmluZGV4T2YoJ3RocmVhZF90b3BfbGlzdF9mb2xkZXInKT09LTEgJiYgbGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykuaW5kZXhPZignal90aHJlYWRfbGlzdCcpPT0tMSl7CiAgICAgICAgICAgICAgICAgICAgbGlzdFtpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpc3RbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCfotLTlkKfpobXpnaLnsr7nroA6IOaJq+aPj+WIl+ihqOeyvueugOWFtuS7luW5v+WRiicpOwogICAgICAgIC8v5riF55CG5peg55SodGFiICoyMDE4MTAxMgogICAgICAgIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgial90Ym5hdl90YWJfYSIpOwogICAgICAgIGZvciAoaT0wO2k8dGFicy5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgaWYgKHRhYnNbaV0uaW5uZXJIVE1MLmluZGV4T2YoIuebtOaSrSIpICE9IC0xKXsKICAgICAgICAgICAgICAgIHRhYnNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWJzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGFic1tpXS5pbm5lckhUTUwuaW5kZXhPZigi5bqU55SoIikgIT0gLTEpewogICAgICAgICAgICAgICAgdGFic1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYnNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8v6LS05YaF5bm/5ZGKCiAgICBmdW5jdGlvbiBhZGluUGFnZUNsZWFuKCl7CiAgICAgICAgY29uc29sZS5sb2coJ+i0tOWQp+mhtemdoueyvueugDog5byA5aeL57K+566A6LS05YaF5bm/5ZGKJyk7CiAgICAgICAgdmFyIGFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaWZyYW1lX3dyYXBwZXInKTsKICAgICAgICBjb25zb2xlLmxvZygn6LS05ZCn6aG16Z2i57K+566AOiDmipPlj5bliLDnmoTlub/lkYrlhYPntKDmlbDph486ICcrYWQubGVuZ3RoKTsKICAgICAgICBmb3IodmFyIGk9MDtpPGFkLmxlbmd0aDtpKyspewogICAgICAgICAgICBhZFtpXS5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYWRbaV0ucGFyZW50Tm9kZSk7CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCfotLTlkKfpobXpnaLnsr7nroA6IOi0tOWGheW5v+WRiueyvueugOWujOavlScpOwogICAgICAgIC8v6LS05YaF5o+S5YWl5bm/5ZGKCiAgICAgICAgdmFyIHBsdXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkX25hbWUnKTsKICAgICAgICBmb3IgKGk9MDtpPHBsdXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIHZhciBkYXQgPSBwbHVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1maWVsZCcpOwogICAgICAgICAgICBpZighZGF0IHx8ICFkYXQucmVwbGFjZSgvXHMvZywnJykpewogICAgICAgICAgICAgICAgcGx1c1tpXS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHBsdXNbaV0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8v5YWN55m75b2V55yL5biWCiAgICBmdW5jdGlvbiBub0xvZ2luKCl7CiAgICAgICAgdHJ5ewogICAgICAgICAgICB2YXIgbG9naW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgbG9naW4uaW5uZXJIVE1MPSJQYWdlRGF0YS51c2VyLmlzX2xvZ2luID0gdHJ1ZSI7CiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobG9naW4pOwogICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+i0tOWQp+mhtemdoueyvueugDog5YWN55m75b2V55yL5biW5Yqg6L296ZSZ6K+vJyk7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgfQogICAgfQoKICAgIC8v5pu05paw5o+Q6YaSCiAgICBmdW5jdGlvbiB1cGRhdGVBbGVydCgpewogICAgICAgIHZhciBzX3VwZGF0ZSA9ICLotLTlkKfpobXpnaLnsr7nroDvvJpcbuajgOa1i+WIsOiEmuacrOeJiOacrOabtOaUuVxuXG4iOwogICAgICAgIHZhciB2ZXJzaW9uID0gR01fZ2V0VmFsdWUoInZlcnNpb24iKTsKICAgICAgICBpZiAodmVyc2lvbiAhPT0gR01faW5mby5zY3JpcHQudmVyc2lvbil7CiAgICAgICAgICAgIGNvbnNvbGUud2Fybigi6LS05ZCn6aG16Z2i57K+566A77ya5qOA5rWL5Yiw6ISa5pys54mI5pys5pu05pS577yaIiArIHZlcnNpb24gKyAiIOKGkiAiICsgR01faW5mby5zY3JpcHQudmVyc2lvbik7CiAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSB1bmRlZmluZWQpewogICAgICAgICAgICAgICAgdmVyc2lvbiA9ICLmnKrnn6UiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN3aXRjaCAodmVyc2lvbil7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIC8v54mI5pys5pu05paw5pe25Yig6Zmk5bqf5byD5Y+Y6YePCiAgICAgICAgICAgICAgICAgICAgZGVsZXRlVHJhc2hWYWx1ZSgpOwogICAgICAgICAgICAgICAgICAgIHNfdXBkYXRlICs9ICLniYjmnKzlt7Lku44gIiArIHZlcnNpb24gKyAiIOabtOaWsOS4uiAiICsgR01faW5mby5zY3JpcHQudmVyc2lvbiArICJcblxuIiArIEdNX2luZm8uc2NyaXB0LnZlcnNpb24gKyAi54mI5pys55qE5pu05paw5YaF5a655Li677yaXG7kv67lpI3lr7nmlrDniYhDaHJvbWXnmoTlhbzlrrnmgKfpl67popjjgIJcblxu5aaC5p6c6YGH5YiwQnVn6K+35Y+K5pe25o+Q5Lqk5Y+N6aaI77yM5oSf6LCi44CCXG5cbuOAkOmHjeimgeaPkOmGku+8geW/heeci++8geOAkVxu5aaC5p6c5oKo5rKh5pyJ5a6J6KOFQWRibG9ja++8jOivt+WuieijhUFkYmxvY2vku6XojrflvpfmnIDkvbPkvZPpqoxcblxu55Sx5LqO6L+Z5Liq6ISa5pys5bey57uP5q+U6L6D56iz5a6a77yM5ZCO57ut5Y+q5L+u5aSNQnVn5ZKM5qC55o2u6LS05ZCn55qE5Y+Y5YyW5re76KGl5paw5Yqf6IO9XG4iOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAi5pyq55+lIjoKICAgICAgICAgICAgICAgICAgICBzX3VwZGF0ZSArPSAi5qyi6L+O5L2/55So6LS05ZCn6aG16Z2i57K+566A6ISa5pysXG7mgqjlvZPliY3nmoTohJrmnKzniYjmnKzkuLrvvJogIiArIHZlcnNpb24gKyAiXG5cbuOAkOWFs+S6juiuvue9ruOAkVxu5oKo5Y+v5Lul6YCa6L+H5Y+z5LiK6KeS55qE6K6+572u6Z2i5p2/6K6+572u55u45YWz5Yqf6IO95Lul6I635b6X5pyA5L2z5L2T6aqMXG5cbuOAkOmHjeimgeaPkOmGku+8geW/heeci++8geOAkVxu5aaC5p6c5oKo5rKh5pyJ5a6J6KOFQWRibG9ja++8jOivt+WuieijhUFkYmxvY2vku6XojrflvpfmnIDkvbPkvZPpqoxcblxu55Sx5LqO6L+Z5Liq6ISa5pys5bey57uP5q+U6L6D56iz5a6a77yM5ZCO57ut5Y+q5L+u5aSNQnVn5ZKM5qC55o2u6LS05ZCn55qE5Y+Y5YyW5re76KGl5paw5Yqf6IO9XG4iOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAiMi44LjAiOgogICAgICAgICAgICAgICAgICAgIHNfdXBkYXRlICs9ICLniYjmnKzlt7Lku44gIiArIHZlcnNpb24gKyAiIOmZjee6p+S4uiAiICsgR01faW5mby5zY3JpcHQudmVyc2lvbiArICJcblxuIiArICLlu7rorq7kvb/nlKjmnIDmlrDniYjmnKznmoTohJrmnKzku6XojrflvpfmnIDkvbPkvZPpqoxcbumZjee6p+S8mumAoOaIkOaCqOeahOiuvue9ruS4ouWkse+8jOivt+ajgOafpeaCqOeahOiuvue9rlxuIjsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzX3VwZGF0ZSArPSAiXG7pgYfliLDku7vkvZXpl67popjor7fnq4vliLvliLBHcmVhc3lGb3Jr5Y+N6aaIXG7miJbogIXlj5HpgIHpgq7ku7boh7NkZXZAYmFja3J1bm5lci50b3BcbuWmguaenOaCqOinieW+l+acrOiEmuacrOWlveeUqOWPr+S9v+eUqOaUr+S7mOWuneaJq+aPj0dyZWFzeUZvcmvkuK3nmoTkuoznu7TnoIHmiJblupXpg6jotZ7liqnpk77mjqXkuK3nmoTkuoznu7TnoIHlkJHmiJHmjZDotaBcbuaUtuWIsOaCqOeahOaNkOi1oOWQjuaIkeS8muWwhuaCqOeahGlk5Yqg5YWl5Yiw5oSf6LCi5ZCN5Y2VXG7mhJ/osKLlkI3ljZXmmL7npLrlnKjov5nph4zlkozohJrmnKzmj4/ov7DlhoUiOwogICAgICAgICAgICBhbGVydChzX3VwZGF0ZSk7CiAgICAgICAgICAgIEdNX3NldFZhbHVlKCJ2ZXJzaW9uIixHTV9pbmZvLnNjcmlwdC52ZXJzaW9uKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLndhcm4oIui0tOWQp+mhtemdoueyvueugO+8muacquajgOa1i+WIsOiEmuacrOeJiOacrOabtOaUuSIpOwogICAgICAgIH0KICAgIH0KICAgIC8v5Yib5bu66aG25qCP5o6n5Yi26Z2i5p2/CiAgICBmdW5jdGlvbiBjcmVhdGVDb250cm9sUGFuZWwoKXsKICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2JhY2tydW5uZXJKU1NldHRpbmdfcm9vdCcpID09PSBudWxsKXsKICAgICAgICAgICAgdHJ5ewogICAgICAgICAgICAgICAgLy91c2VyYmFy6I635Y+W5LiO5Li75bGC5Yib5bu6CiAgICAgICAgICAgICAgICB2YXIgdXNlcmJhciA9ICQoJyNjb21fdXNlcmJhcicpLmNoaWxkcmVuKCd1bCcpWzBdOwogICAgICAgICAgICAgICAgdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwoKICAgICAgICAgICAgICAgIC8v5Li75bGC6K6+572uCiAgICAgICAgICAgICAgICBhLmlubmVySFRNTCA9ICLohJrmnKzorr7nva4iOwoKICAgICAgICAgICAgICAgIC8v5Li75bGC5LqL5Lu2CiAgICAgICAgICAgICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsY3BPbk1vdXNlRW50ZXIpOwogICAgICAgICAgICAgICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLGNwT25Nb3VzZUxlYXZlKTsKCiAgICAgICAgICAgICAgICAvL+iPnOWNleWxguWIm+W7ugogICAgICAgICAgICAgICAgdmFyIG1lbnVyb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICB2YXIgbWVudWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgdmFyIG1lbnVkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIG1lbnVyb290LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCd1X2RkbCcpOwogICAgICAgICAgICAgICAgbWVudXJvb3Quc2V0QXR0cmlidXRlKCdpZCcsJ2JhY2tydW5uZXJKU1NldHRpbmdfcm9vdCcpOwogICAgICAgICAgICAgICAgbWVudWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywndV9kZGxfY29uJyk7CiAgICAgICAgICAgICAgICBtZW51Y29uLnNldEF0dHJpYnV0ZSgnaWQnLCdiYWNrcnVubmVySlNTZXR0aW5nX2NvbicpOwogICAgICAgICAgICAgICAgbWVudWRpdi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywndV9kZGxfY29uX3RvcCcpOwogICAgICAgICAgICAgICAgbWVudWRpdi5zZXRBdHRyaWJ1dGUoJ2lkJywnYmFja3J1bm5lckpTU2V0dGluZ19tYWluJyk7CiAgICAgICAgICAgICAgICBtZW51Y29uLmFwcGVuZENoaWxkKG1lbnVkaXYpOwogICAgICAgICAgICAgICAgbWVudXJvb3QuYXBwZW5kQ2hpbGQobWVudWNvbik7CgogICAgICAgICAgICAgICAgLy/oj5zljZXlsYLkuovku7YKICAgICAgICAgICAgICAgIG1lbnVyb290LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLGNwT25Nb3VzZUVudGVyKTsKICAgICAgICAgICAgICAgIG1lbnVyb290LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLGNwT25Nb3VzZUxlYXZlKTsKCiAgICAgICAgICAgICAgICAvL+iPnOWNleWIl+ihqOWIm+W7ugogICAgICAgICAgICAgICAgdmFyIG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1aScpOwogICAgICAgICAgICAgICAgLy8wOuaWh+acrOahhiAxOuWkjemAieahhiAyOuaMiemSrgogICAgICAgICAgICAgICAgY3JlYXRlTWVudUl0ZW0obWVudSwxLCJwb3N0cHJvY2VzcyIsIuWQjuWkhOeQhuiEmuacrCIsIiIpOwogICAgICAgICAgICAgICAgY3JlYXRlTWVudUl0ZW0obWVudSwxLCJpc1JlZGlyZWN0Iiwi6YeN5a6a5ZCRIiwiIik7CiAgICAgICAgICAgICAgICBjcmVhdGVNZW51SXRlbShtZW51LDEsImhvbWVwYWdlcHJvY2VzcyIsIuS4u+mhteeyvueugCIsIiIpOwogICAgICAgICAgICAgICAgY3JlYXRlTWVudUl0ZW0obWVudSwxLCJpc0hlYWRpbWciLCLnsr7nroDliJfooajpobXlpLTlm74iLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMSwiZGlzcGxheUxpdmUiLCLmmK/lkKbmmL7npLrnm7Tmkq3luJYiLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMSwiZGlzcGxheVNpZ24iLCLmmK/lkKbmmL7npLrnlKjmiLfnrb7lkI3moaMiLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMSwiYXV0b0Nsb3NlR3VpZGUiLCLoh6rliqjmlLbotbfmjIflvJUiLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMSwiaG9tZVByb2Nlc3MiLCLkuKrkurrkuLvpobXnsr7nroAiLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMSwiZ3JvdXBwcm9jZXNzIiwi576k57uE6aG16Z2i57K+566AIiwiIik7CiAgICAgICAgICAgICAgICBjcmVhdGVNZW51SXRlbShtZW51LDEsIm5vbG9naW4iLCLlhY3nmbvlvZXnnIvluJYiLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMSwicmV2ZXJzZSIsIuWAkuW6j+eci+W4lu+8iOWunumqjOaAp++8iSIsIiIpOwogICAgICAgICAgICAgICAgY3JlYXRlTWVudUl0ZW0obWVudSwwLCJzbGVlcFRpbWUiLCLkuLvohJrmnKzlu7bov5/ml7bpl7QiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMCwiZGVsYXlTY3JpcHRSdW5UaW1lcyIsIuW7tui/n+iEmuacrOaJp+ihjOasoeaVsCIsIiIpOwogICAgICAgICAgICAgICAgY3JlYXRlTWVudUl0ZW0obWVudSwwLCJzbGVlcFRpbWVQYWdlIiwi57+76aG16ISa5pys5bu26L+f5pe26Ze0IiwiIik7CiAgICAgICAgICAgICAgICBjcmVhdGVNZW51SXRlbShtZW51LDAsInJldmVyc2VTbGVlcFRpbWUiLCLlgJLluo/mn6XnnIvohJrmnKzlu7bov5/ml7bpl7QiLCIiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMCwiY2hlY2tyYXRlIiwi6ISa5pys5bu26L+f5pe26Ze05YCN546HIiwiIik7CiAgICAgICAgICAgICAgICBjcmVhdGVNZW51SXRlbShtZW51LDIsInJlZnJlc2giLCLliLfmlrDpobXpnaIiLCLliLfmlrAiKTsKICAgICAgICAgICAgICAgIGNyZWF0ZU1lbnVJdGVtKG1lbnUsMiwic3VibWl0Iiwi5o+Q5Lqk6K6+572uIiwi5o+Q5LqkIik7CiAgICAgICAgICAgICAgICBjcmVhdGVNZW51SXRlbShtZW51LDIsInJlc2V0Iiwi6YeN572u6K6+572uIiwi6YeN572uIik7CiAgICAgICAgICAgICAgICBtZW51ZGl2LmFwcGVuZENoaWxkKG1lbnUpOwoKICAgICAgICAgICAgICAgIC8v6I+c5Y2V5YWl5Y+jCiAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYSk7CiAgICAgICAgICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsJ3VfbWVudV9pdGVtJyk7CiAgICAgICAgICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdpZCcsJ2JhY2tydW5uZXJKU1NldHRpbmdfaXRlbScpOwogICAgICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQoZGl2KTsKICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKG1lbnVyb290KTsKICAgICAgICAgICAgICAgIHVzZXJiYXIuYXBwZW5kQ2hpbGQobGkpOwoKICAgICAgICAgICAgICAgIC8v6I+c5Y2V5YaF5a655Yid5aeL5YyWCiAgICAgICAgICAgICAgICBtZW51SW5pdGlhbGl6ZSgpOwoKICAgICAgICAgICAgICAgIC8v6I+c5Y2V5YaF5LqL5Lu25Yib5bu6CiAgICAgICAgICAgICAgICBjcmVhdGVNZW51RXZlbnQoKTsKICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5o6n5Yi26Z2i5p2/5bey5a2Y5ZyoJyk7CiAgICAgICAgfQogICAgfQogICAgLy/oj5zljZXpobnliJvlu7oKICAgIGZ1bmN0aW9uIGNyZWF0ZU1lbnVJdGVtKG1lbnUsdHlwZSxpZCxsYWJlbENvbnRlbnQsaW5uZXJDb250ZW50KXsKICAgICAgICAvL+WxguWIm+W7ugogICAgICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHZhciBkX2EgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICB2YXIgZF9pID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgLy/lsYLorr7nva4KICAgICAgICBkX2Euc2V0QXR0cmlidXRlKCdzdHlsZScsJ2Zsb2F0OmxlZnQ7d2lkdGg6MTUwcHgnKTsKICAgICAgICBzd2l0Y2godHlwZSl7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGRfaS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywncGFkZGluZy10b3A6N3B4O3BhZGRpbmctbGVmdDoxNTBweDtwYWRkaW5nLXJpZ2h0OjEwcHg7Jyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgZF9pLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdwYWRkaW5nLXRvcDo4cHg7cGFkZGluZy1sZWZ0OjE5MnB4O3BhZGRpbmctcmlnaHQ6MTBweDsnKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBkX2kuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3BhZGRpbmctdG9wOjZweDtwYWRkaW5nLWxlZnQ6MTUwcHg7cGFkZGluZy1yaWdodDoxMHB4OycpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIC8v5YWD57Sg5Yib5bu6CiAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgdmFyIGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogICAgICAgIC8v5YWD57Sg6K6+572uCiAgICAgICAgYS5pbm5lckhUTUwgPSBsYWJlbENvbnRlbnQ7CiAgICAgICAgc3dpdGNoKHR5cGUpewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCd3aWR0aDo1MHB4O3RleHQtYWxpZ246cmlnaHQnKTsKICAgICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKCdpZCcsJ2JhY2tydW5uZXJfaV8nK2lkKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAvL+WkjemAieahhgogICAgICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdjaGVja2JveCcpOwogICAgICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoJ2lkJywnYmFja3J1bm5lcl9pXycraWQpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIC8v5oyJ6ZKuCiAgICAgICAgICAgICAgICBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgICAgICAgICAgICAgICBpLmlubmVySFRNTCA9IGlubmVyQ29udGVudDsKICAgICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3dpZHRoOjUycHgnKTsKICAgICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKCdpZCcsJ2JhY2tydW5uZXJfYnRuXycraWQpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICAvL+WFg+e0oOa3u+WKoOWIsOWxggogICAgICAgIGRfYS5hcHBlbmRDaGlsZChhKTsKICAgICAgICBkX2kuYXBwZW5kQ2hpbGQoaSk7CiAgICAgICAgLy/lhYPntKDlsYLmt7vliqDliLDkuLvlsYIKICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZF9hKTsKICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZF9pKTsKICAgICAgICAvL+S4u+Wxgua3u+WKoOWIsGxpCiAgICAgICAgbGkuYXBwZW5kQ2hpbGQoZGl2KTsKICAgICAgICAvL2xp5re75Yqg5YiwbWVudQogICAgICAgIG1lbnUuYXBwZW5kQ2hpbGQobGkpOwogICAgfQogICAgLy/oj5zljZXliJ3lp4vljJYKICAgIGZ1bmN0aW9uIG1lbnVJbml0aWFsaXplKCl7CiAgICAgICAgbWVudUluaXRpYWxpemVfY2hlY2tib3goJ3Bvc3Rwcm9jZXNzJyxwb3N0cHJvY2Vzcyk7CiAgICAgICAgbWVudUluaXRpYWxpemVfY2hlY2tib3goJ2lzUmVkaXJlY3QnLGlzUmVkaXJlY3QpOwogICAgICAgIG1lbnVJbml0aWFsaXplX2NoZWNrYm94KCdob21lcGFnZXByb2Nlc3MnLGhvbWVQYWdlUHJvY2Vzcyk7CiAgICAgICAgbWVudUluaXRpYWxpemVfY2hlY2tib3goJ2hvbWVQcm9jZXNzJyxob21lUHJvY2Vzcyk7CiAgICAgICAgbWVudUluaXRpYWxpemVfY2hlY2tib3goJ2lzSGVhZGltZycsaXNIZWFkaW1nKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9jaGVja2JveCgnZ3JvdXBwcm9jZXNzJyxncm91cFBhZ2VQcm9jZXNzKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9jaGVja2JveCgnbm9sb2dpbicsbm9Mb2dpblByb2Nlc3MpOwogICAgICAgIG1lbnVJbml0aWFsaXplX2NoZWNrYm94KCdyZXZlcnNlJyxyZXZlcnNlKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9jaGVja2JveCgnZGlzcGxheUxpdmUnLGRpc3BsYXlMaXZlKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9jaGVja2JveCgnZGlzcGxheVNpZ24nLGRpc3BsYXlTaWduKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9jaGVja2JveCgnYXV0b0Nsb3NlR3VpZGUnLGF1dG9DbG9zZUd1aWRlKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9pbnB1dCgnc2xlZXBUaW1lJyxzbGVlcFRpbWUpOwogICAgICAgIG1lbnVJbml0aWFsaXplX2lucHV0KCdkZWxheVNjcmlwdFJ1blRpbWVzJyxkZWxheVNjcmlwdFJ1blRpbWVzKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9pbnB1dCgnc2xlZXBUaW1lUGFnZScsc2xlZXBUaW1lV2hlblBhZ2VUdXJuKTsKICAgICAgICBtZW51SW5pdGlhbGl6ZV9pbnB1dCgncmV2ZXJzZVNsZWVwVGltZScscmV2ZXJzZVNsZWVwVGltZSk7CiAgICAgICAgbWVudUluaXRpYWxpemVfaW5wdXQoJ2NoZWNrcmF0ZScsY2hlY2tyYXRlKTsKICAgIH0KICAgIC8v6I+c5Y2VY2hlY2tib3jliJ3lp4vljJYKICAgIGZ1bmN0aW9uIG1lbnVJbml0aWFsaXplX2NoZWNrYm94KGlkLHZhcmlhYmxlKXsKICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWNrcnVubmVyX2lfJytpZCk7CiAgICAgICAgaWYgKGkgIT09IG51bGwpewogICAgICAgICAgICBpZiAodmFyaWFibGUpewogICAgICAgICAgICAgICAgaS5jaGVja2VkID0gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGkuY2hlY2tlZCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgLy/oj5zljZVpbnB1dOWIneWni+WMlgogICAgZnVuY3Rpb24gbWVudUluaXRpYWxpemVfaW5wdXQoaWQsdmFyaWFibGUpewogICAgICAgIHZhciBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tydW5uZXJfaV8nK2lkKTsKICAgICAgICBpZiAoaSAhPT0gbnVsbCl7CiAgICAgICAgICAgIGkudmFsdWUgPSB2YXJpYWJsZTsKICAgICAgICB9CiAgICB9CgogICAgLy/oj5zljZXlhoXkuovku7bliJvlu7oKICAgIGZ1bmN0aW9uIGNyZWF0ZU1lbnVFdmVudCgpewogICAgICAgIHRyeXsKICAgICAgICAgICAgLy/liLfmlrAKICAgICAgICAgICAgdmFyIGJ0bl9yZWZyZXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tydW5uZXJfYnRuX3JlZnJlc2gnKTsKICAgICAgICAgICAgaWYgKGJ0bl9yZWZyZXNoICE9PSBudWxsKXsKICAgICAgICAgICAgICAgIGJ0bl9yZWZyZXNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxidG5fcmVmcmVzaF9jbGljayk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy/mj5DkuqQKICAgICAgICAgICAgdmFyIGJ0bl9zdWJtaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja3J1bm5lcl9idG5fc3VibWl0Jyk7CiAgICAgICAgICAgIGlmIChidG5fc3VibWl0ICE9PSBudWxsKXsKICAgICAgICAgICAgICAgIGJ0bl9zdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGJ0bl9zdWJtaXRfY2xpY2spOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8v6YeN572uCiAgICAgICAgICAgIHZhciBidG5fcmVzZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja3J1bm5lcl9idG5fcmVzZXQnKTsKICAgICAgICAgICAgaWYgKGJ0bl9yZXNldCAhPT0gbnVsbCl7CiAgICAgICAgICAgICAgICBidG5fcmVzZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGJ0bl9yZXNldF9jbGljayk7CiAgICAgICAgICAgIH0KICAgICAgICB9Y2F0Y2goZSl7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgfQogICAgfQogICAgLy/liLfmlrDmjInpkq7kuovku7YKICAgIGZ1bmN0aW9uIGJ0bl9yZWZyZXNoX2NsaWNrKCl7CiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTsKICAgIH0KICAgIC8v5o+Q5Lqk5oyJ6ZKu5LqL5Lu2CiAgICBmdW5jdGlvbiBidG5fc3VibWl0X2NsaWNrKCl7CiAgICAgICAgcG9zdHByb2Nlc3MgPSBjb252ZXJ0Qm9vbFZhbHVlKCdwb3N0cHJvY2VzcycpOwogICAgICAgIGlzUmVkaXJlY3QgPSBjb252ZXJ0Qm9vbFZhbHVlKCdpc1JlZGlyZWN0Jyk7CiAgICAgICAgaG9tZVBhZ2VQcm9jZXNzID0gY29udmVydEJvb2xWYWx1ZSgnaG9tZXBhZ2Vwcm9jZXNzJyk7CiAgICAgICAgaG9tZVByb2Nlc3MgPSBjb252ZXJ0Qm9vbFZhbHVlKCdob21lUHJvY2VzcycpOwogICAgICAgIGlzSGVhZGltZyA9IGNvbnZlcnRCb29sVmFsdWUoJ2lzSGVhZGltZycpOwogICAgICAgIGRpc3BsYXlMaXZlID0gY29udmVydEJvb2xWYWx1ZSgnZGlzcGxheUxpdmUnKTsKICAgICAgICBkaXNwbGF5U2lnbiA9IGNvbnZlcnRCb29sVmFsdWUoJ2Rpc3BsYXlTaWduJyk7CiAgICAgICAgYXV0b0Nsb3NlR3VpZGUgPSBjb252ZXJ0Qm9vbFZhbHVlKCdhdXRvQ2xvc2VHdWlkZScpOwogICAgICAgIGdyb3VwUGFnZVByb2Nlc3MgPSBjb252ZXJ0Qm9vbFZhbHVlKCdncm91cHByb2Nlc3MnKTsKICAgICAgICBub0xvZ2luUHJvY2VzcyA9IGNvbnZlcnRCb29sVmFsdWUoJ25vbG9naW4nKTsKICAgICAgICByZXZlcnNlID0gY29udmVydEJvb2xWYWx1ZSgncmV2ZXJzZScpOwogICAgICAgIHNsZWVwVGltZSA9IGNvbnZlcnROdW1WYWx1ZSgnc2xlZXBUaW1lJyk7CiAgICAgICAgZGVsYXlTY3JpcHRSdW5UaW1lcyA9IGNvbnZlcnROdW1WYWx1ZSgnZGVsYXlTY3JpcHRSdW5UaW1lcycpOwogICAgICAgIHNsZWVwVGltZVdoZW5QYWdlVHVybiA9IGNvbnZlcnROdW1WYWx1ZSgnc2xlZXBUaW1lUGFnZScpOwogICAgICAgIHJldmVyc2VTbGVlcFRpbWUgPSBjb252ZXJ0TnVtVmFsdWUoJ3JldmVyc2VTbGVlcFRpbWUnKTsKICAgICAgICBjaGVja3JhdGUgPSBjb252ZXJ0TnVtVmFsdWUoJ2NoZWNrcmF0ZScpOwoKICAgICAgICBpZiAocG9zdHByb2Nlc3MpewogICAgICAgICAgICBpZiAod2luZG93LmNvbmZpcm0oJ+ehruiupOimgeabtOaUueiuvue9ru+8nycpKXsKICAgICAgICAgICAgICAgIHJlcGxhY2VTdG9yZWRTZXR0aW5ncygpOwogICAgICAgICAgICAgICAgbWVudUluaXRpYWxpemUoKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtZW51SW5pdGlhbGl6ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25maXJtKCfjgJDph43opoHjgJFcbuaCqOemgeeUqOS6huWQjuWkhOeQhuiEmuacrO+8jOacrOiEmuacrOe7neWkp+mDqOWIhuWKn+iDveWwhuaXoOazleS9v+eUqFxuXG7noa7orqTopoHmm7TmlLnorr7nva7vvJ8nKSl7CiAgICAgICAgICAgICAgICByZXBsYWNlU3RvcmVkU2V0dGluZ3MoKTsKICAgICAgICAgICAgICAgIG1lbnVJbml0aWFsaXplKCk7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWVudUluaXRpYWxpemUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGJ0bl9yZXNldF9jbGljaygpewogICAgICAgIGlmICh3aW5kb3cuY29uZmlybSgn56Gu6K6k6KaB6YeN572u6K6+572u77yfJykpewogICAgICAgICAgICBHTV9kZWxldGVWYWx1ZSgicG9zdHByb2Nlc3MiKTsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUoImlzUmVkaXJlY3QiKTsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUoInNsZWVwVGltZSIpOwogICAgICAgICAgICBHTV9kZWxldGVWYWx1ZSgiZGVsYXlTY3JpcHRSdW5UaW1lcyIpOwogICAgICAgICAgICBHTV9kZWxldGVWYWx1ZSgiZGlzcGxheUxpdmUiKTsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUoImRpc3BsYXlTaWduIik7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJhdXRvQ2xvc2VHdWlkZSIpOwogICAgICAgICAgICBHTV9kZWxldGVWYWx1ZSgic2xlZXBUaW1lV2hlblBhZ2VUdXJuIik7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJyZXZlcnNlU2xlZXBUaW1lIik7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJob21lUGFnZVByb2Nlc3MiKTsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUoImhvbWVQcm9jZXNzIik7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJpc0hlYWRpbWciKTsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUoImdyb3VwUGFnZVByb2Nlc3MiKTsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUoIm5vTG9naW5Qcm9jZXNzIik7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJyZXZlcnNlIik7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJjaGVja3JhdGUiKTsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTsKICAgICAgICB9CiAgICB9CiAgICAvL+WwhuiPnOWNleS4reeahGJvb2zlgLzotYvnu5nlj5jph48KICAgIGZ1bmN0aW9uIGNvbnZlcnRCb29sVmFsdWUoaWQpewogICAgICAgIHZhciBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tydW5uZXJfaV8nK2lkKTsKICAgICAgICBpZiAoaSAhPT0gbnVsbCl7CiAgICAgICAgICAgIGlmIChpLmNoZWNrZWQpewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAvL+WwhuiPnOWNleS4reeahOaVsOWAvOi1i+e7meWPmOmHjwogICAgZnVuY3Rpb24gY29udmVydE51bVZhbHVlKGlkKXsKICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWNrcnVubmVyX2lfJytpZCk7CiAgICAgICAgaWYgKGkgIT09IG51bGwpewogICAgICAgICAgICByZXR1cm4ocGFyc2VGbG9hdChpLnZhbHVlKSk7CiAgICAgICAgfQogICAgfQogICAgLy/mjqfliLbpnaLmnb/pvKDmoIfkuovku7YKICAgIGZ1bmN0aW9uIGNwT25Nb3VzZUVudGVyKCl7CiAgICAgICAgdHJ5ewogICAgICAgICAgICB2YXIgY3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja3J1bm5lckpTU2V0dGluZ19yb290Jyk7CiAgICAgICAgICAgIGNwLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdkaXNwbGF5OmJsb2NrO3JpZ2h0OjA7Jyk7CiAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBjcE9uTW91c2VMZWF2ZSgpewogICAgICAgIHRyeXsKICAgICAgICAgICAgdmFyIGNwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tydW5uZXJKU1NldHRpbmdfcm9vdCcpOwogICAgICAgICAgICBjcC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywnZGlzcGxheTpub25lO3JpZ2h0OjAnKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgIH0KICAgIH0KCiAgICAvL+abv+aNouWCqOWtmOeahOiuvue9rgogICAgZnVuY3Rpb24gcmVwbGFjZVN0b3JlZFNldHRpbmdzKCl7CiAgICAgICAgR01fc2V0VmFsdWUoInBvc3Rwcm9jZXNzIixwb3N0cHJvY2Vzcyk7CiAgICAgICAgR01fc2V0VmFsdWUoImlzUmVkaXJlY3QiLGlzUmVkaXJlY3QpOwogICAgICAgIEdNX3NldFZhbHVlKCJzbGVlcFRpbWUiLHNsZWVwVGltZSk7CiAgICAgICAgR01fc2V0VmFsdWUoImRlbGF5U2NyaXB0UnVuVGltZXMiLGRlbGF5U2NyaXB0UnVuVGltZXMpOwogICAgICAgIEdNX3NldFZhbHVlKCJkaXNwbGF5TGl2ZSIsZGlzcGxheUxpdmUpOwogICAgICAgIEdNX3NldFZhbHVlKCJkaXNwbGF5U2lnbiIsZGlzcGxheVNpZ24pOwogICAgICAgIEdNX3NldFZhbHVlKCJhdXRvQ2xvc2VHdWlkZSIsYXV0b0Nsb3NlR3VpZGUpOwogICAgICAgIEdNX3NldFZhbHVlKCJzbGVlcFRpbWVXaGVuUGFnZVR1cm4iLHNsZWVwVGltZVdoZW5QYWdlVHVybik7CiAgICAgICAgR01fc2V0VmFsdWUoInJldmVyc2VTbGVlcFRpbWUiLHJldmVyc2VTbGVlcFRpbWUpOwogICAgICAgIEdNX3NldFZhbHVlKCJob21lUGFnZVByb2Nlc3MiLGhvbWVQYWdlUHJvY2Vzcyk7CiAgICAgICAgR01fc2V0VmFsdWUoImhvbWVQcm9jZXNzIixob21lUHJvY2Vzcyk7CiAgICAgICAgR01fc2V0VmFsdWUoImlzSGVhZGltZyIsaXNIZWFkaW1nKTsKICAgICAgICBHTV9zZXRWYWx1ZSgiZ3JvdXBQYWdlUHJvY2VzcyIsZ3JvdXBQYWdlUHJvY2Vzcyk7CiAgICAgICAgR01fc2V0VmFsdWUoIm5vTG9naW5Qcm9jZXNzIixub0xvZ2luUHJvY2Vzcyk7CiAgICAgICAgR01fc2V0VmFsdWUoInJldmVyc2UiLHJldmVyc2UpOwogICAgICAgIEdNX3NldFZhbHVlKCJjaGVja3JhdGUiLGNoZWNrcmF0ZSk7CiAgICB9CgogICAgLy/lupXpg6jkv6Hmga/ovpPlh7oKICAgIGZ1bmN0aW9uIGNyZWF0ZUZvb3RlckxheWVyKCl7CiAgICAgICAgdmFyIGZvb3REaXY7CiAgICAgICAgdmFyIGlkOwogICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYmFja3J1bm5lckpTRm9vdGVyJyk9PT1udWxsKXsKICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoInRpZWJhLmJhaWR1LmNvbS9mPyIpICE9PSAtMSl7CiAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgZm9vdERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Zyc19jb250ZW50X2Zvb3Rlcl9wYWdlbGV0JylbMF07CiAgICAgICAgICAgICAgICAgICAgZm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgIGlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgZm9vdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywnZm9vdGVyJyk7CiAgICAgICAgICAgICAgICAgICAgZm9vdC5zZXRBdHRyaWJ1dGUoJ2lkJywnZm9vdGVyJyk7CiAgICAgICAgICAgICAgICAgICAgZm9vdC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywncGFkZGluZy10b3A6MHB4ICFpbXBvcnRhbnQ7Jyk7CiAgICAgICAgICAgICAgICAgICAgaWQuc2V0QXR0cmlidXRlKCdpZCcsJ2JhY2tydW5uZXJKU0Zvb3RlcicpOwogICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZvb3RlckVsZW1lbnQoZm9vdCwi5bey5bqU55So55SxQmFja1J1bm5lcuWItuS9nOeahOi0tOWQp+eyvueugOiEmuacrCAoIisgR01faW5mby5zY3JpcHQudmVyc2lvbisiKSIsImh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vc2NyaXB0cy8yMzY4NyIsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZvb3RlckVsZW1lbnQoZm9vdCwi5o2Q6LWg5L2c6ICFKOaUr+S7mOWuneS6jOe7tOeggSkiLCJodHRwczovL3NtYWxsZmlsZS5iYWNrcnVubmVyLnRvcC9pbWFnZXMvYWxpcGF5LmpwZyIsdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZm9vdERpdi5hcHBlbmRDaGlsZChmb290KTsKICAgICAgICAgICAgICAgICAgICBmb290RGl2LmFwcGVuZENoaWxkKGlkKTsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5bqV6YOo5L+h5oGv5re75Yqg5a6M5oiQJyk7CiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigidGllYmEuYmFpZHUuY29tL3AvIikgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvb3REaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwYl9mb290ZXInKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICBmb290LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCdmb290ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9vdC5zZXRBdHRyaWJ1dGUoJ2lkJywnZm9vdGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Quc2V0QXR0cmlidXRlKCdzdHlsZScsJ3BhZGRpbmctdG9wOjBweCAhaW1wb3J0YW50OycpOwogICAgICAgICAgICAgICAgICAgICAgICBpZC5zZXRBdHRyaWJ1dGUoJ2lkJywnYmFja3J1bm5lckpTRm9vdGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZvb3RlckVsZW1lbnQoZm9vdCwi5bey5bqU55So55SxQmFja1J1bm5lcuWItuS9nOeahOi0tOWQp+eyvueugOiEmuacrCAoIisgR01faW5mby5zY3JpcHQudmVyc2lvbisiKSIsImh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vc2NyaXB0cy8yMzY4NyIsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVGb290ZXJFbGVtZW50KGZvb3QsIuWQkeS9nOiAheaNkOasvijmlK/ku5jlrp3kuoznu7TnoIEpIiwiaHR0cHM6Ly9zbWFsbGZpbGUuYmFja3J1bm5lci50b3AvaW1hZ2VzL2FsaXBheS5qcGciLHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICBmb290RGl2LmFwcGVuZENoaWxkKGZvb3QpOwogICAgICAgICAgICAgICAgICAgICAgICBmb290RGl2LmFwcGVuZENoaWxkKGlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOW6lemDqOS/oeaBr+a3u+WKoOWujOaIkCcpOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOW6lemDqOS/oeaBr+W3suWtmOWcqCcpOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFkZEZpbmlzaFRpbWVUb0Zvb3RlcigpewogICAgICAgIGlmIChmaW5pc2hUaW1lICE9PSAtMSl7CiAgICAgICAgICAgIGFkZFNwbGl0TGluZVRvRm9vdGVyKGZvb3QpOwogICAgICAgICAgICBjcmVhdGVGb290ZXJFbGVtZW50KGZvb3QsIumhtemdouWKoOi9veaXtumXtO+8miIgKyBmaW5pc2hUaW1lKyJtcyIsImphdmFzY3JpcHQ6OyIsdHJ1ZSk7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gYWRkU3BsaXRMaW5lVG9Gb290ZXIoZm9vdGVyKXsKICAgICAgICB0cnl7CiAgICAgICAgICAgIHZhciBzcGxpdExpbmU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICBzcGxpdExpbmUuaW5uZXJIVE1MPSJ8IjsKICAgICAgICAgICAgZm9vdGVyLmFwcGVuZENoaWxkKHNwbGl0TGluZSk7CiAgICAgICAgfWNhdGNoKGUpewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGNyZWF0ZUZvb3RlckVsZW1lbnQoZm9vdGVyLHRleHQsaHJlZixpc0xhc3QpewogICAgICAgIHZhciBzcGxpdExpbmU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgIHNwbGl0TGluZS5pbm5lckhUTUw9InwiOwogICAgICAgIHZhciBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MPXRleHQ7CiAgICAgICAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLGhyZWYpOwogICAgICAgIGNvbnRlbnQuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCJfYmxhbmsiKTsKICAgICAgICBjb250ZW50LnNldEF0dHJpYnV0ZSgncHZfY29kZScsIjAiKTsKICAgICAgICBmb290ZXIuYXBwZW5kQ2hpbGQoY29udGVudCk7CiAgICAgICAgaWYgKCFpc0xhc3QpewogICAgICAgICAgICBmb290ZXIuYXBwZW5kQ2hpbGQoc3BsaXRMaW5lKTsKICAgICAgICB9CiAgICB9CiAgICAvL+WktOWbvuemgeeUqAogICAgZnVuY3Rpb24gZGlzYWJsZUZvcnVtQ2FyZCgpewogICAgICAgIGlmIChpc0hlYWRpbWcpewogICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICB2YXIgZm9ydW1jYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvcnVtLWNhcmQtYmFubmVyJyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+i0tOWQp+mhtemdoueyvueugDog5q2j5Zyo57K+566A5aS05Zu+Jyk7CiAgICAgICAgICAgICAgICBpZiAoZm9ydW1jYXJkICE9PSBudWxsKXsKICAgICAgICAgICAgICAgICAgICBpZiAoZm9ydW1jYXJkLmdldEF0dHJpYnV0ZSgic3JjIikhPT0iIil7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcnVtY2FyZC5zZXRBdHRyaWJ1dGUoInNyYyIsIiIpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3J1bWNhcmQuc2V0QXR0cmlidXRlKCJzdHlsZSIsImhlaWdodDoxODBweCAhaW1wb3J0YW50O2JhY2tncm91bmQtY29sb3I6d2hpdGUgIWltcG9ydGFudDsiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgLy/ph43lrprlkJEKICAgIGZ1bmN0aW9uIHJlZGlyZWN0KCl7CiAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgIC8vP3JlZF90YWfph43lrprlkJEKICAgICAgICB2YXIgZWxlbWVudHMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnRvU3RyaW5nKCkuc3BsaXQoJyYnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDtpPGVsZW1lbnRzLmxlbmd0aDtpKyspewogICAgICAgICAgICBpZiAoZWxlbWVudHNbaV0uaW5kZXhPZigncmVkX3RhZycpICE9PSAtMSl7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnJicrZWxlbWVudHNbaV0sJycpOwogICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoZWxlbWVudHNbaV0sJycpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8v5aWH5oCq5Z+f5ZCN6YeN5a6a5ZCRCiAgICAgICAgaWYgKHVybC5pbmRleE9mKCdkcS50aWViYS5jb20nKSE9LTEpewogICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnZHEudGllYmEuY29tJywndGllYmEuYmFpZHUuY29tJyk7CiAgICAgICAgfQogICAgICAgIGlmICh1cmwuaW5kZXhPZignanVtcC5iZGltZy5jb20nKSE9LTEpewogICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnanVtcDIuYmRpbWcuY29tJywndGllYmEuYmFpZHUuY29tJyk7CiAgICAgICAgfQogICAgICAgIGlmICh1cmwuaW5kZXhPZignanVtcDIuYmRpbWcuY29tJykhPS0xKXsKICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoJ2p1bXAyLmJkaW1nLmNvbScsJ3RpZWJhLmJhaWR1LmNvbScpOwogICAgICAgIH0KICAgICAgICBpZiAodXJsLmluZGV4T2YoJz90cmFjZWlkPScpIT0tMSl7CiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCc/dHJhY2VpZD0nLCcnKTsKICAgICAgICB9CiAgICAgICAgaWYgKHVybCAhPT0gd2luZG93LmxvY2F0aW9uLmhyZWYpewogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB1cmw7CiAgICAgICAgfQogICAgfQogICAgLy/lgJLluo/nnIvluJbmjInpkq7mt7vliqAKICAgIGZ1bmN0aW9uIHJldmVyc2VvcmRlcigpewogICAgICAgIGlmIChyZXZlcnNlKXsKICAgICAgICAgICAgLy/liKTlrprlvZPliY3nirbmgIEKICAgICAgICAgICAgdmFyIHN0YXR1cyA9IGluaXRpYWxpemVfdmFyKCdyZXZlcnNlX3N0YXR1cycsZmFsc2UpOwogICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2JyX3JldmVyc2UnKSA9PT0gbnVsbCl7CiAgICAgICAgICAgICAgICB2YXIgcmlnaHRidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb3JlX3RpdGxlX2J0bnMnKVswXTsKICAgICAgICAgICAgICAgIHZhciBidG5saSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgICAgICB2YXIgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOato+WcqOWIm+W7uuWAkuW6j+afpeeci+aMiemSricpOwogICAgICAgICAgICAgICAgLy/liKTlrprmmK/lkKbkuLrlj6bkuIDkuKrluJblrZAKICAgICAgICAgICAgICAgIHZhciBsYXN0cGFnZSA9IGluaXRpYWxpemVfdmFyKCdyZXZlcnNlX2xhc3RwYWdlJywnJyk7CiAgICAgICAgICAgICAgICB2YXIgY3VycmVudGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgIHZhciBjdXJyZW50c2VhcmNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsKICAgICAgICAgICAgICAgIHZhciBjdXJyZW50cGFnZSA9IGN1cnJlbnRocmVmLnJlcGxhY2UoY3VycmVudHNlYXJjaCwnJykucmVwbGFjZSgnaHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC8nLCcnKS5yZXBsYWNlKCdodHRwOi8vdGllYmEuYmFpZHUuY29tL3AvJywnJyk7CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudHBhZ2UhPWxhc3RwYWdlKXsKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIEdNX3NldFZhbHVlKCdyZXZlcnNlX2xhc3RwYWdlJyxjdXJyZW50cGFnZSk7CiAgICAgICAgICAgICAgICBHTV9zZXRWYWx1ZSgncmV2ZXJzZV9zdGF0dXMnLHN0YXR1cyk7CiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzKXsKICAgICAgICAgICAgICAgICAgICBidG4uaW5uZXJIVE1MID0gJ+ato+W6j+afpeeciyc7CiAgICAgICAgICAgICAgICB9ZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYnRuLmlubmVySFRNTD0n5YCS5bqP5p+l55yLJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2lkJywnYnJfcmV2ZXJzZScpOwogICAgICAgICAgICAgICAgYnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCdidG4tc3ViIGJ0bi1zbWFsbCcpOwogICAgICAgICAgICAgICAgYnRubGkuc2V0QXR0cmlidXRlKCdjbGFzcycsJ2JyX3JldmVyc2VfbGkgcXVpY2tfcmVwbHknKTsKICAgICAgICAgICAgICAgIGJ0bmxpLmFwcGVuZENoaWxkKGJ0bik7CiAgICAgICAgICAgICAgICByaWdodGJ0bi5hcHBlbmRDaGlsZChidG5saSk7CiAgICAgICAgICAgICAgICByaWdodGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycscmV2ZXJzZV9jbGljayk7CiAgICAgICAgICAgICAgICBjdXJyZW50aHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgICAgICAgICAgcmV2ZXJzZV9jb250ZW50cygpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgLy/lgJLluo/nnIvluJbngrnlh7vkuovku7YKICAgIGZ1bmN0aW9uIHJldmVyc2VfY2xpY2soKXsKICAgICAgICB2YXIgc3RhdHVzID0gaW5pdGlhbGl6ZV92YXIoJ3JldmVyc2Vfc3RhdHVzJyxmYWxzZSk7CiAgICAgICAgaWYoc3RhdHVzKXsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrJyk7CiAgICAgICAgICAgIC8v5oGi5aSN5q2j5bqPCiAgICAgICAgICAgIEdNX3NldFZhbHVlKCdyZXZlcnNlX3N0YXR1cycsZmFsc2UpOwogICAgICAgICAgICB2YXIgYnRucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BiX2xpc3RfcGFnZXInKVswXS5jaGlsZHJlbjsKICAgICAgICAgICAgaWYgKGJ0bnMubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7CiAgICAgICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwO2kgPCBidG5zLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgICAgIGlmIChidG5zW2ldLmlubmVySFRNTCA9PSAnMScpewogICAgICAgICAgICAgICAgICAgICAgICAvL+WQkemmlumhtei3s+i9rAogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGJ0bnNbaV0uaHJlZjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL+WAkuW6jwogICAgICAgICAgICBHTV9zZXRWYWx1ZSgncmV2ZXJzZV9zdGF0dXMnLHRydWUpOwogICAgICAgICAgICBidG5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGJfbGlzdF9wYWdlcicpWzBdLmNoaWxkcmVuOwogICAgICAgICAgICBpZiAoYnRucy5sZW5ndGggPT09IDApewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTsKICAgICAgICAgICAgfWVsc2UgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7ajxidG5zLmxlbmd0aDtqKyspewogICAgICAgICAgICAgICAgICAgIGlmIChidG5zW2pdLmlubmVySFRNTCA9PSAn5bC+6aG1Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8v5ZCR5bC+6aG16Lez6L2sCiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYnRuc1tqXS5ocmVmOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIC8v57+76L2s5b2T5YmN6aG15YaF5a65CiAgICBmdW5jdGlvbiByZXZlcnNlX2NvbnRlbnRzKCl7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgc3RhdHVzID0gaW5pdGlhbGl6ZV92YXIoJ3JldmVyc2Vfc3RhdHVzJyxmYWxzZSk7CiAgICAgICAgICAgIGlmIChzdGF0dXMpewogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOato+WcqOe/u+i9rOW9k+WJjemhteWGheWuuScpOwoKICAgICAgICAgICAgICAgIC8v6I635Y+W5b2T5YmN55qEcG4KICAgICAgICAgICAgICAgIHZhciBzZWFyY2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoOwogICAgICAgICAgICAgICAgdmFyIHNlYXJjaHMgPSBzZWFyY2guc3BsaXQoJyYnKTsKICAgICAgICAgICAgICAgIHZhciBwbjsKICAgICAgICAgICAgICAgIGZvciAodmFyIGNoaWxkID0gMDtjaGlsZDxzZWFyY2hzLmxlbmd0aDtjaGlsZCsrKXsKICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoc1tjaGlsZF0uaW5kZXhPZigncG49JykgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgcG4gPSBzZWFyY2hzW2NoaWxkXS5yZXBsYWNlKCc/JywnJykucmVwbGFjZSgncG49JywnJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnal9wX3Bvc3RsaXN0Jyk7CiAgICAgICAgICAgICAgICB2YXIgY29udGVudHMgPSBsaXN0LmNoaWxkcmVuOwogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGNvbnRlbnRzKTsKICAgICAgICAgICAgICAgIGlmIChjb250ZW50cy5sZW5ndGggPT0gMSAmJiBjb250ZW50c1swXS5pZCA9PSAial9wX3Bvc3RsaXN0Iil7CiAgICAgICAgICAgICAgICAgICAgbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BfcG9zdGxpc3QnKVsxXTsKICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGxpc3QuY2hpbGRyZW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oY29udGVudHMpOwogICAgICAgICAgICAgICAgLy/lgJLluo8KICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IGNvbnRlbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChjb250ZW50c1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LHJldmVyc2VTbGVlcFRpbWUpOwogICAgfQogICAgLy/oh6rliqjmlLbotbfmjIflvJUKICAgIHZhciBpc0F1dG9DbG9zZUd1aWRlU2V0ID0gZmFsc2U7CiAgICBmdW5jdGlvbiBjbG9zZUd1aWRlKCl7CiAgICAgICAgaWYgKGF1dG9DbG9zZUd1aWRlICYmICFpc0F1dG9DbG9zZUd1aWRlU2V0KXsKICAgICAgICAgICAgdmFyIHRvcENvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ0b3BfY29udGVudCIpOwogICAgICAgICAgICB2YXIgdG9wQ29udGVudE1haW4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ0b3BfY29udF9tYWluIik7CiAgICAgICAgICAgIGlmICh0b3BDb250ZW50Lmxlbmd0aD4wICYmIHRvcENvbnRlbnRNYWluLmxlbmd0aD4wKXsKICAgICAgICAgICAgICAgIHRvcENvbnRlbnRbMF0uc2V0QXR0cmlidXRlKCJjbGFzcyIsInRvcF9jb250ZW50IHRvcF9jb250ZW50X2Nsb3NlZCIpOwogICAgICAgICAgICAgICAgdG9wQ29udGVudE1haW5bMF0uc2V0QXR0cmlidXRlKCJzdHlsZSIsImRpc3BsYXk6bm9uZTsiKTsKICAgICAgICAgICAgICAgIGlzQXV0b0Nsb3NlR3VpZGVTZXQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgLy/niYjmnKzmm7TmlrDliKDpmaTlup/lvIPlj5jph48KICAgIGZ1bmN0aW9uIGRlbGV0ZVRyYXNoVmFsdWUoKXsKICAgICAgICB2YXIgdHJhc2hMaXN0ID0ge307CiAgICAgICAgZm9yICh2YXIgaSA9IDA7aTx0cmFzaExpc3QubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJ0cmFzaExpc3RbaV0iKTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS53YXJuKCfotLTlkKfpobXpnaLnsr7nroA6IOeJiOacrOabtOaWsO+8jOW3suWIoOmZpOW6n+W8g+WPmOmHjycpOwogICAgfQogICAgLy/miZPmipjljaHnrYnlvLnmoYblsY/olL0KICAgIGZ1bmN0aW9uIHJlbW92ZVBvcHVwTW9kYWwoKXsKICAgICAgICB2YXIgZGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZGlhbG9nSicpOwogICAgICAgIHZhciBkaWFsb2dtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2RpYWxvZ0ptb2RhbCcpOwogICAgICAgIGZvciAodmFyIGkgPSAwO2k8ZGlhbG9nLmxlbmd0aDtpKyspewogICAgICAgICAgICBkaWFsb2dbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaWFsb2dbaV0pOwogICAgICAgICAgICBpZiAoZGlhbG9nW2ldLmlubmVySFRNTC5pbmRleE9mKCfnoa7lrprkuI3lho3lhbPms6gnICE9IC0xKSl7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAwO2k8ZGlhbG9nbW9kYWwubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIGRpYWxvZ21vZGFsW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGlhbG9nbW9kYWxbaV0pOwogICAgICAgIH0KICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkaWFsb2dKJyk7CiAgICAgICAgICAgIHZhciBkaWFsb2dtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2RpYWxvZ0ptb2RhbCcpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDtpPGRpYWxvZy5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgICAgIGRpYWxvZ1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpYWxvZ1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDtpPGRpYWxvZ21vZGFsLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgZGlhbG9nbW9kYWxbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaWFsb2dtb2RhbFtpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LDUwMDApOwogICAgfQogICAgLy/muIXnkIbpppbpobXliqjmgIHlhoXnmoTlub/lkYogKjIwMTgxMDIyCiAgICB2YXIgaW5kZXhBREV2ZW50X2EgPSBmYWxzZTsKICAgIHZhciBpbmRleEFERXZlbnRfc2Nyb2xsID0gZmFsc2U7CiAgICB2YXIgaW5kZXhBREV2ZW50X3RhZ19ob3QgPSBmYWxzZTsKICAgIHZhciBpbmRleEFERXZlbnRfdGFnX3BlcnNvbmFsID0gZmFsc2U7CiAgICB2YXIgd2luZG93VGVtcFNjcm9sbFRvcCA9IDA7CiAgICBmdW5jdGlvbiBiaW5kQ2xlYW5JbmRleEFERXZlbnQoKXsKICAgICAgICB2YXIgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bl9tb3JlJyk7CiAgICAgICAgdmFyIGEgPSBidG4uY2hpbGRyZW5bMF07CiAgICAgICAgaWYgKCFpbmRleEFERXZlbnRfYSl7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLotLTlkKfpobXpnaLnsr7nroA6IOW3sue7keWumummlumhteWKqOaAgeW5v+WRiua4heeQhueahOaMiemSrueCueWHu+S6i+S7tiIpOwogICAgICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIGNsZWFuQURpbkluZGV4KCk7CiAgICAgICAgICAgICAgICB9LHNsZWVwVGltZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpbmRleEFERXZlbnRfYSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICghaW5kZXhBREV2ZW50X3Njcm9sbCl7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLotLTlkKfpobXpnaLnsr7nroA6IOW3sue7keWumummlumhteWKqOaAgeW5v+WRiua4heeQhueahOa7muWKqOS6i+S7tiIpOwogICAgICAgICAgICBkb2N1bWVudC5vbnNjcm9sbCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCAtIHdpbmRvd1RlbXBTY3JvbGxUb3AgPiAzMDApewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCLotLTlkKfpobXpnaLnsr7nroA6IOa7muWKqOinpuWPke+8jOato+WcqOa4heeQhuWKqOaAgeWGheeahOW5v+WRiiIpOwogICAgICAgICAgICAgICAgICAgIGNsZWFuQURpbkluZGV4KCk7CiAgICAgICAgICAgICAgICAgICAgd2luZG93VGVtcFNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW5kZXhBREV2ZW50X3Njcm9sbCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICghaW5kZXhBREV2ZW50X3RhZ19ob3QpewogICAgICAgICAgICB2YXIgdGFnX2hvdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqX3JlbWVuX25hdicpOwogICAgICAgICAgICB0YWdfaG90LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgY2xlYXJTY3JvbGxUb3BUZW1wKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpbmRleEFERXZlbnRfdGFnX2hvdCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICghaW5kZXhBREV2ZW50X3RhZ19wZXJzb25hbCl7CiAgICAgICAgICAgIHZhciB0YWdfcGVyc29uYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmF2LXBlcnNvbmFsJyk7CiAgICAgICAgICAgIHRhZ19wZXJzb25hbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGNsZWFyU2Nyb2xsVG9wVGVtcCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaW5kZXhBREV2ZW50X3RhZ19ob3QgPSB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGNsZWFyU2Nyb2xsVG9wVGVtcCgpewogICAgICAgIGNvbnNvbGUubG9nKCLotLTlkKfpobXpnaLnsr7nroA6IOa4heeQhua7muWKqOmrmOW6pue8k+WtmCIpOwogICAgICAgIHdpbmRvd1RlbXBTY3JvbGxUb3AgPSAwOwogICAgfQogICAgZnVuY3Rpb24gY2xlYW5BRGluSW5kZXgoKXsKICAgICAgICB2YXIgYWRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaG9tZS1wbGFjZS1pdGVtJyk7CiAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICBmb3IgKHZhciBpID0gMDtpPGFkcy5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgdmFyIGV4dGluZm8gPSBhZHNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWV4dF9pbmZvJyk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0aW5mbyAhPSAndW5kZWZpbmVkJyl7CiAgICAgICAgICAgICAgICBhZHNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhZHNbaV0pOwogICAgICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coIui0tOWQp+mhtemdoueyvueugDog5riF55CG5LqGIitjb3VudCsi5p2h5Yqo5oCB5YaF55qE5bm/5ZGKIik7CiAgICB9CiAgICAvLyDkv67lpI3lhbPms6jmjInpkq4KICAgIGZ1bmN0aW9uIGZpeEZvY3VzQnV0dG9uKCl7CiAgICAgICAgJChkb2N1bWVudCkub24oJ21vdXNlZG93bicsICcuaXNsaWtlX2ZvY3VzJyAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhJyk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICB9KTsKICAgIH0KfSkoKTs=","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js","ts":1642330991455,"mimetype":"text/javascript"},"source":"LyohIGpRdWVyeSB2My40LjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovCiFmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0Ijsib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmIm9iamVjdCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50Iik7cmV0dXJuIHQoZSl9OnQoZSl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKEMsZSl7InVzZSBzdHJpY3QiO3ZhciB0PVtdLEU9Qy5kb2N1bWVudCxyPU9iamVjdC5nZXRQcm90b3R5cGVPZixzPXQuc2xpY2UsZz10LmNvbmNhdCx1PXQucHVzaCxpPXQuaW5kZXhPZixuPXt9LG89bi50b1N0cmluZyx2PW4uaGFzT3duUHJvcGVydHksYT12LnRvU3RyaW5nLGw9YS5jYWxsKE9iamVjdCkseT17fSxtPWZ1bmN0aW9uKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlJiYibnVtYmVyIiE9dHlwZW9mIGUubm9kZVR5cGV9LHg9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJmU9PT1lLndpbmRvd30sYz17dHlwZTohMCxzcmM6ITAsbm9uY2U6ITAsbm9Nb2R1bGU6ITB9O2Z1bmN0aW9uIGIoZSx0LG4pe3ZhciByLGksbz0obj1ufHxFKS5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtpZihvLnRleHQ9ZSx0KWZvcihyIGluIGMpKGk9dFtyXXx8dC5nZXRBdHRyaWJ1dGUmJnQuZ2V0QXR0cmlidXRlKHIpKSYmby5zZXRBdHRyaWJ1dGUocixpKTtuLmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX1mdW5jdGlvbiB3KGUpe3JldHVybiBudWxsPT1lP2UrIiI6Im9iamVjdCI9PXR5cGVvZiBlfHwiZnVuY3Rpb24iPT10eXBlb2YgZT9uW28uY2FsbChlKV18fCJvYmplY3QiOnR5cGVvZiBlfXZhciBmPSIzLjQuMSIsaz1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgay5mbi5pbml0KGUsdCl9LHA9L15bXHNcdUZFRkZceEEwXSt8W1xzXHVGRUZGXHhBMF0rJC9nO2Z1bmN0aW9uIGQoZSl7dmFyIHQ9ISFlJiYibGVuZ3RoImluIGUmJmUubGVuZ3RoLG49dyhlKTtyZXR1cm4hbShlKSYmIXgoZSkmJigiYXJyYXkiPT09bnx8MD09PXR8fCJudW1iZXIiPT10eXBlb2YgdCYmMDx0JiZ0LTEgaW4gZSl9ay5mbj1rLnByb3RvdHlwZT17anF1ZXJ5OmYsY29uc3RydWN0b3I6ayxsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHMuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP3MuY2FsbCh0aGlzKTplPDA/dGhpc1tlK3RoaXMubGVuZ3RoXTp0aGlzW2VdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9ay5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHR9LGVhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGsuZWFjaCh0aGlzLGUpfSxtYXA6ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGsubWFwKHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCxlKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2socy5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmxlbmd0aCxuPStlKyhlPDA/dDowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soMDw9biYmbjx0P1t0aGlzW25dXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDp1LHNvcnQ6dC5zb3J0LHNwbGljZTp0LnNwbGljZX0say5leHRlbmQ9ay5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG4scixpLG8sYT1hcmd1bWVudHNbMF18fHt9LHM9MSx1PWFyZ3VtZW50cy5sZW5ndGgsbD0hMTtmb3IoImJvb2xlYW4iPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSwib2JqZWN0Ij09dHlwZW9mIGF8fG0oYSl8fChhPXt9KSxzPT09dSYmKGE9dGhpcyxzLS0pO3M8dTtzKyspaWYobnVsbCE9KGU9YXJndW1lbnRzW3NdKSlmb3IodCBpbiBlKXI9ZVt0XSwiX19wcm90b19fIiE9PXQmJmEhPT1yJiYobCYmciYmKGsuaXNQbGFpbk9iamVjdChyKXx8KGk9QXJyYXkuaXNBcnJheShyKSkpPyhuPWFbdF0sbz1pJiYhQXJyYXkuaXNBcnJheShuKT9bXTppfHxrLmlzUGxhaW5PYmplY3Qobik/bjp7fSxpPSExLGFbdF09ay5leHRlbmQobCxvLHIpKTp2b2lkIDAhPT1yJiYoYVt0XT1yKSk7cmV0dXJuIGF9LGsuZXh0ZW5kKHtleHBhbmRvOiJqUXVlcnkiKyhmK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xEL2csIiIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGUpfSxub29wOmZ1bmN0aW9uKCl7fSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0LG47cmV0dXJuISghZXx8IltvYmplY3QgT2JqZWN0XSIhPT1vLmNhbGwoZSkpJiYoISh0PXIoZSkpfHwiZnVuY3Rpb24iPT10eXBlb2Yobj12LmNhbGwodCwiY29uc3RydWN0b3IiKSYmdC5jb25zdHJ1Y3RvcikmJmEuY2FsbChuKT09PWwpfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUpcmV0dXJuITE7cmV0dXJuITB9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oZSx0KXtiKGUse25vbmNlOnQmJnQubm9uY2V9KX0sZWFjaDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtpZihkKGUpKXtmb3Iobj1lLmxlbmd0aDtyPG47cisrKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVha31lbHNlIGZvcihyIGluIGUpaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrO3JldHVybiBlfSx0cmltOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lPyIiOihlKyIiKS5yZXBsYWNlKHAsIiIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKGQoT2JqZWN0KGUpKT9rLm1lcmdlKG4sInN0cmluZyI9PXR5cGVvZiBlP1tlXTplKTp1LmNhbGwobixlKSksbn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PXQ/LTE6aS5jYWxsKHQsZSxuKX0sbWVyZ2U6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49K3QubGVuZ3RoLHI9MCxpPWUubGVuZ3RoO3I8bjtyKyspZVtpKytdPXRbcl07cmV0dXJuIGUubGVuZ3RoPWksZX0sZ3JlcDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPVtdLGk9MCxvPWUubGVuZ3RoLGE9IW47aTxvO2krKykhdChlW2ldLGkpIT09YSYmci5wdXNoKGVbaV0pO3JldHVybiByfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz0wLGE9W107aWYoZChlKSlmb3Iocj1lLmxlbmd0aDtvPHI7bysrKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO2Vsc2UgZm9yKG8gaW4gZSludWxsIT0oaT10KGVbb10sbyxuKSkmJmEucHVzaChpKTtyZXR1cm4gZy5hcHBseShbXSxhKX0sZ3VpZDoxLHN1cHBvcnQ6eX0pLCJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJihrLmZuW1N5bWJvbC5pdGVyYXRvcl09dFtTeW1ib2wuaXRlcmF0b3JdKSxrLmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sIi5zcGxpdCgiICIpLGZ1bmN0aW9uKGUsdCl7blsiW29iamVjdCAiK3QrIl0iXT10LnRvTG93ZXJDYXNlKCl9KTt2YXIgaD1mdW5jdGlvbihuKXt2YXIgZSxkLGIsbyxpLGgsZixnLHcsdSxsLFQsQyxhLEUsdixzLGMseSxrPSJzaXp6bGUiKzEqbmV3IERhdGUsbT1uLmRvY3VtZW50LFM9MCxyPTAscD11ZSgpLHg9dWUoKSxOPXVlKCksQT11ZSgpLEQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXQmJihsPSEwKSwwfSxqPXt9Lmhhc093blByb3BlcnR5LHQ9W10scT10LnBvcCxMPXQucHVzaCxIPXQucHVzaCxPPXQuc2xpY2UsUD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX0sUj0iY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQiLE09IltcXHgyMFxcdFxcclxcblxcZl0iLEk9Iig/OlxcXFwufFtcXHctXXxbXlwwLVxceGEwXSkrIixXPSJcXFsiK00rIiooIitJKyIpKD86IitNKyIqKFsqXiR8IX5dPz0pIitNKyIqKD86JygoPzpcXFxcLnxbXlxcXFwnXSkqKSd8XCIoKD86XFxcXC58W15cXFxcXCJdKSopXCJ8KCIrSSsiKSl8KSIrTSsiKlxcXSIsJD0iOigiK0krIikoPzpcXCgoKCcoKD86XFxcXC58W15cXFxcJ10pKiknfFwiKCg/OlxcXFwufFteXFxcXFwiXSkqKVwiKXwoKD86XFxcXC58W15cXFxcKClbXFxdXXwiK1crIikqKXwuKilcXCl8KSIsRj1uZXcgUmVnRXhwKE0rIisiLCJnIiksQj1uZXcgUmVnRXhwKCJeIitNKyIrfCgoPzpefFteXFxcXF0pKD86XFxcXC4pKikiK00rIiskIiwiZyIpLF89bmV3IFJlZ0V4cCgiXiIrTSsiKiwiK00rIioiKSx6PW5ldyBSZWdFeHAoIl4iK00rIiooWz4rfl18IitNKyIpIitNKyIqIiksVT1uZXcgUmVnRXhwKE0rInw+IiksWD1uZXcgUmVnRXhwKCQpLFY9bmV3IFJlZ0V4cCgiXiIrSSsiJCIpLEc9e0lEOm5ldyBSZWdFeHAoIl4jKCIrSSsiKSIpLENMQVNTOm5ldyBSZWdFeHAoIl5cXC4oIitJKyIpIiksVEFHOm5ldyBSZWdFeHAoIl4oIitJKyJ8WypdKSIpLEFUVFI6bmV3IFJlZ0V4cCgiXiIrVyksUFNFVURPOm5ldyBSZWdFeHAoIl4iKyQpLENISUxEOm5ldyBSZWdFeHAoIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcKCIrTSsiKihldmVufG9kZHwoKFsrLV18KShcXGQqKW58KSIrTSsiKig/OihbKy1dfCkiK00rIiooXFxkKyl8KSkiK00rIipcXCl8KSIsImkiKSxib29sOm5ldyBSZWdFeHAoIl4oPzoiK1IrIikkIiwiaSIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKCJeIitNKyIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXCgiK00rIiooKD86LVxcZCk/XFxkKikiK00rIipcXCl8KSg/PVteLV18JCkiLCJpIil9LFk9L0hUTUwkL2ksUT0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLEo9L15oXGQkL2ksSz0vXltee10rXHtccypcW25hdGl2ZSBcdy8sWj0vXig/OiMoW1x3LV0rKXwoXHcrKXxcLihbXHctXSspKSQvLGVlPS9bK35dLyx0ZT1uZXcgUmVnRXhwKCJcXFxcKFtcXGRhLWZdezEsNn0iK00rIj98KCIrTSsiKXwuKSIsImlnIiksbmU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSIweCIrdC02NTUzNjtyZXR1cm4gciE9cnx8bj90OnI8MD9TdHJpbmcuZnJvbUNoYXJDb2RlKHIrNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUocj4+MTB8NTUyOTYsMTAyMyZyfDU2MzIwKX0scmU9LyhbXDAtXHgxZlx4N2ZdfF4tP1xkKXxeLSR8W15cMC1ceDFmXHg3Zi1cdUZGRkZcdy1dL2csaWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD8iXDAiPT09ZT8iXHVmZmZkIjplLnNsaWNlKDAsLTEpKyJcXCIrZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KSsiICI6IlxcIitlfSxvZT1mdW5jdGlvbigpe1QoKX0sYWU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lLmRpc2FibGVkJiYiZmllbGRzZXQiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfSx7ZGlyOiJwYXJlbnROb2RlIixuZXh0OiJsZWdlbmQifSk7dHJ5e0guYXBwbHkodD1PLmNhbGwobS5jaGlsZE5vZGVzKSxtLmNoaWxkTm9kZXMpLHRbbS5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZSl7SD17YXBwbHk6dC5sZW5ndGg/ZnVuY3Rpb24oZSx0KXtMLmFwcGx5KGUsTy5jYWxsKHQpKX06ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxlbmd0aCxyPTA7d2hpbGUoZVtuKytdPXRbcisrXSk7ZS5sZW5ndGg9bi0xfX19ZnVuY3Rpb24gc2UodCxlLG4scil7dmFyIGksbyxhLHMsdSxsLGMsZj1lJiZlLm93bmVyRG9jdW1lbnQscD1lP2Uubm9kZVR5cGU6OTtpZihuPW58fFtdLCJzdHJpbmciIT10eXBlb2YgdHx8IXR8fDEhPT1wJiY5IT09cCYmMTEhPT1wKXJldHVybiBuO2lmKCFyJiYoKGU/ZS5vd25lckRvY3VtZW50fHxlOm0pIT09QyYmVChlKSxlPWV8fEMsRSkpe2lmKDExIT09cCYmKHU9Wi5leGVjKHQpKSlpZihpPXVbMV0pe2lmKDk9PT1wKXtpZighKGE9ZS5nZXRFbGVtZW50QnlJZChpKSkpcmV0dXJuIG47aWYoYS5pZD09PWkpcmV0dXJuIG4ucHVzaChhKSxufWVsc2UgaWYoZiYmKGE9Zi5nZXRFbGVtZW50QnlJZChpKSkmJnkoZSxhKSYmYS5pZD09PWkpcmV0dXJuIG4ucHVzaChhKSxufWVsc2V7aWYodVsyXSlyZXR1cm4gSC5hcHBseShuLGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCkpLG47aWYoKGk9dVszXSkmJmQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBILmFwcGx5KG4sZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGkpKSxufWlmKGQucXNhJiYhQVt0KyIgIl0mJighdnx8IXYudGVzdCh0KSkmJigxIT09cHx8Im9iamVjdCIhPT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKXtpZihjPXQsZj1lLDE9PT1wJiZVLnRlc3QodCkpeyhzPWUuZ2V0QXR0cmlidXRlKCJpZCIpKT9zPXMucmVwbGFjZShyZSxpZSk6ZS5zZXRBdHRyaWJ1dGUoImlkIixzPWspLG89KGw9aCh0KSkubGVuZ3RoO3doaWxlKG8tLSlsW29dPSIjIitzKyIgIit4ZShsW29dKTtjPWwuam9pbigiLCIpLGY9ZWUudGVzdCh0KSYmeWUoZS5wYXJlbnROb2RlKXx8ZX10cnl7cmV0dXJuIEguYXBwbHkobixmLnF1ZXJ5U2VsZWN0b3JBbGwoYykpLG59Y2F0Y2goZSl7QSh0LCEwKX1maW5hbGx5e3M9PT1rJiZlLnJlbW92ZUF0dHJpYnV0ZSgiaWQiKX19fXJldHVybiBnKHQucmVwbGFjZShCLCIkMSIpLGUsbixyKX1mdW5jdGlvbiB1ZSgpe3ZhciByPVtdO3JldHVybiBmdW5jdGlvbiBlKHQsbil7cmV0dXJuIHIucHVzaCh0KyIgIik+Yi5jYWNoZUxlbmd0aCYmZGVsZXRlIGVbci5zaGlmdCgpXSxlW3QrIiAiXT1ufX1mdW5jdGlvbiBsZShlKXtyZXR1cm4gZVtrXT0hMCxlfWZ1bmN0aW9uIGNlKGUpe3ZhciB0PUMuY3JlYXRlRWxlbWVudCgiZmllbGRzZXQiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKGUpe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBmZShlLHQpe3ZhciBuPWUuc3BsaXQoInwiKSxyPW4ubGVuZ3RoO3doaWxlKHItLSliLmF0dHJIYW5kbGVbbltyXV09dH1mdW5jdGlvbiBwZShlLHQpe3ZhciBuPXQmJmUscj1uJiYxPT09ZS5ub2RlVHlwZSYmMT09PXQubm9kZVR5cGUmJmUuc291cmNlSW5kZXgtdC5zb3VyY2VJbmRleDtpZihyKXJldHVybiByO2lmKG4pd2hpbGUobj1uLm5leHRTaWJsaW5nKWlmKG49PT10KXJldHVybi0xO3JldHVybiBlPzE6LTF9ZnVuY3Rpb24gZGUodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiJpbnB1dCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJmUudHlwZT09PXR9fWZ1bmN0aW9uIGhlKG4pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKCJpbnB1dCI9PT10fHwiYnV0dG9uIj09PXQpJiZlLnR5cGU9PT1ufX1mdW5jdGlvbiBnZSh0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuImZvcm0iaW4gZT9lLnBhcmVudE5vZGUmJiExPT09ZS5kaXNhYmxlZD8ibGFiZWwiaW4gZT8ibGFiZWwiaW4gZS5wYXJlbnROb2RlP2UucGFyZW50Tm9kZS5kaXNhYmxlZD09PXQ6ZS5kaXNhYmxlZD09PXQ6ZS5pc0Rpc2FibGVkPT09dHx8ZS5pc0Rpc2FibGVkIT09IXQmJmFlKGUpPT09dDplLmRpc2FibGVkPT09dDoibGFiZWwiaW4gZSYmZS5kaXNhYmxlZD09PXR9fWZ1bmN0aW9uIHZlKGEpe3JldHVybiBsZShmdW5jdGlvbihvKXtyZXR1cm4gbz0rbyxsZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShbXSxlLmxlbmd0aCxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249cltpXV0mJihlW25dPSEodFtuXT1lW25dKSl9KX0pfWZ1bmN0aW9uIHllKGUpe3JldHVybiBlJiYidW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmV9Zm9yKGUgaW4gZD1zZS5zdXBwb3J0PXt9LGk9c2UuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5uYW1lc3BhY2VVUkksbj0oZS5vd25lckRvY3VtZW50fHxlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIVkudGVzdCh0fHxuJiZuLm5vZGVOYW1lfHwiSFRNTCIpfSxUPXNlLnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LG4scj1lP2Uub3duZXJEb2N1bWVudHx8ZTptO3JldHVybiByIT09QyYmOT09PXIubm9kZVR5cGUmJnIuZG9jdW1lbnRFbGVtZW50JiYoYT0oQz1yKS5kb2N1bWVudEVsZW1lbnQsRT0haShDKSxtIT09QyYmKG49Qy5kZWZhdWx0VmlldykmJm4udG9wIT09biYmKG4uYWRkRXZlbnRMaXN0ZW5lcj9uLmFkZEV2ZW50TGlzdGVuZXIoInVubG9hZCIsb2UsITEpOm4uYXR0YWNoRXZlbnQmJm4uYXR0YWNoRXZlbnQoIm9udW5sb2FkIixvZSkpLGQuYXR0cmlidXRlcz1jZShmdW5jdGlvbihlKXtyZXR1cm4gZS5jbGFzc05hbWU9ImkiLCFlLmdldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIil9KSxkLmdldEVsZW1lbnRzQnlUYWdOYW1lPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFwcGVuZENoaWxkKEMuY3JlYXRlQ29tbWVudCgiIikpLCFlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikubGVuZ3RofSksZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPUsudGVzdChDLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGQuZ2V0QnlJZD1jZShmdW5jdGlvbihlKXtyZXR1cm4gYS5hcHBlbmRDaGlsZChlKS5pZD1rLCFDLmdldEVsZW1lbnRzQnlOYW1lfHwhQy5nZXRFbGVtZW50c0J5TmFtZShrKS5sZW5ndGh9KSxkLmdldEJ5SWQ/KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSh0ZSxuZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSgiaWQiKT09PXR9fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJkUpe3ZhciBuPXQuZ2V0RWxlbWVudEJ5SWQoZSk7cmV0dXJuIG4/W25dOltdfX0pOihiLmZpbHRlci5JRD1mdW5jdGlvbihlKXt2YXIgbj1lLnJlcGxhY2UodGUsbmUpO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD0idW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSYmZS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpO3JldHVybiB0JiZ0LnZhbHVlPT09bn19LGIuZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmRSl7dmFyIG4scixpLG89dC5nZXRFbGVtZW50QnlJZChlKTtpZihvKXtpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoImlkIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb107aT10LmdldEVsZW1lbnRzQnlOYW1lKGUpLHI9MDt3aGlsZShvPWlbcisrXSlpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoImlkIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb119cmV0dXJuW119fSksYi5maW5kLlRBRz1kLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGUsdCl7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiB0LmdldEVsZW1lbnRzQnlUYWdOYW1lP3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk6ZC5xc2E/dC5xdWVyeVNlbGVjdG9yQWxsKGUpOnZvaWQgMH06ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9MCxvPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk7aWYoIioiPT09ZSl7d2hpbGUobj1vW2krK10pMT09PW4ubm9kZVR5cGUmJnIucHVzaChuKTtyZXR1cm4gcn1yZXR1cm4gb30sYi5maW5kLkNMQVNTPWQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSx0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmRSlyZXR1cm4gdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGUpfSxzPVtdLHY9W10sKGQucXNhPUsudGVzdChDLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGNlKGZ1bmN0aW9uKGUpe2EuYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MPSI8YSBpZD0nIitrKyInPjwvYT48c2VsZWN0IGlkPSciK2srIi1cclxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PiIsZS5xdWVyeVNlbGVjdG9yQWxsKCJbbXNhbGxvd2NhcHR1cmVePScnXSIpLmxlbmd0aCYmdi5wdXNoKCJbKl4kXT0iK00rIiooPzonJ3xcIlwiKSIpLGUucXVlcnlTZWxlY3RvckFsbCgiW3NlbGVjdGVkXSIpLmxlbmd0aHx8di5wdXNoKCJcXFsiK00rIiooPzp2YWx1ZXwiK1IrIikiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIltpZH49IitrKyItXSIpLmxlbmd0aHx8di5wdXNoKCJ+PSIpLGUucXVlcnlTZWxlY3RvckFsbCgiOmNoZWNrZWQiKS5sZW5ndGh8fHYucHVzaCgiOmNoZWNrZWQiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoImEjIitrKyIrKiIpLmxlbmd0aHx8di5wdXNoKCIuIy4rWyt+XSIpfSksY2UoZnVuY3Rpb24oZSl7ZS5pbm5lckhUTUw9IjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PiI7dmFyIHQ9Qy5jcmVhdGVFbGVtZW50KCJpbnB1dCIpO3Quc2V0QXR0cmlidXRlKCJ0eXBlIiwiaGlkZGVuIiksZS5hcHBlbmRDaGlsZCh0KS5zZXRBdHRyaWJ1dGUoIm5hbWUiLCJEIiksZS5xdWVyeVNlbGVjdG9yQWxsKCJbbmFtZT1kXSIpLmxlbmd0aCYmdi5wdXNoKCJuYW1lIitNKyIqWypeJHwhfl0/PSIpLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RoJiZ2LnB1c2goIjplbmFibGVkIiwiOmRpc2FibGVkIiksYS5hcHBlbmRDaGlsZChlKS5kaXNhYmxlZD0hMCwyIT09ZS5xdWVyeVNlbGVjdG9yQWxsKCI6ZGlzYWJsZWQiKS5sZW5ndGgmJnYucHVzaCgiOmVuYWJsZWQiLCI6ZGlzYWJsZWQiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIiosOngiKSx2LnB1c2goIiwuKjoiKX0pKSwoZC5tYXRjaGVzU2VsZWN0b3I9Sy50ZXN0KGM9YS5tYXRjaGVzfHxhLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8YS5tb3pNYXRjaGVzU2VsZWN0b3J8fGEub01hdGNoZXNTZWxlY3Rvcnx8YS5tc01hdGNoZXNTZWxlY3RvcikpJiZjZShmdW5jdGlvbihlKXtkLmRpc2Nvbm5lY3RlZE1hdGNoPWMuY2FsbChlLCIqIiksYy5jYWxsKGUsIltzIT0nJ106eCIpLHMucHVzaCgiIT0iLCQpfSksdj12Lmxlbmd0aCYmbmV3IFJlZ0V4cCh2LmpvaW4oInwiKSkscz1zLmxlbmd0aCYmbmV3IFJlZ0V4cChzLmpvaW4oInwiKSksdD1LLnRlc3QoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikseT10fHxLLnRlc3QoYS5jb250YWlucyk/ZnVuY3Rpb24oZSx0KXt2YXIgbj05PT09ZS5ub2RlVHlwZT9lLmRvY3VtZW50RWxlbWVudDplLHI9dCYmdC5wYXJlbnROb2RlO3JldHVybiBlPT09cnx8ISghcnx8MSE9PXIubm9kZVR5cGV8fCEobi5jb250YWlucz9uLmNvbnRhaW5zKHIpOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKX06ZnVuY3Rpb24oZSx0KXtpZih0KXdoaWxlKHQ9dC5wYXJlbnROb2RlKWlmKHQ9PT1lKXJldHVybiEwO3JldHVybiExfSxEPXQ/ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gbD0hMCwwO3ZhciBuPSFlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uLSF0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiBufHwoMSYobj0oZS5vd25lckRvY3VtZW50fHxlKT09PSh0Lm93bmVyRG9jdW1lbnR8fHQpP2UuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCk6MSl8fCFkLnNvcnREZXRhY2hlZCYmdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKT09PW4/ZT09PUN8fGUub3duZXJEb2N1bWVudD09PW0mJnkobSxlKT8tMTp0PT09Q3x8dC5vd25lckRvY3VtZW50PT09bSYmeShtLHQpPzE6dT9QKHUsZSktUCh1LHQpOjA6NCZuPy0xOjEpfTpmdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBsPSEwLDA7dmFyIG4scj0wLGk9ZS5wYXJlbnROb2RlLG89dC5wYXJlbnROb2RlLGE9W2VdLHM9W3RdO2lmKCFpfHwhbylyZXR1cm4gZT09PUM/LTE6dD09PUM/MTppPy0xOm8/MTp1P1AodSxlKS1QKHUsdCk6MDtpZihpPT09bylyZXR1cm4gcGUoZSx0KTtuPWU7d2hpbGUobj1uLnBhcmVudE5vZGUpYS51bnNoaWZ0KG4pO249dDt3aGlsZShuPW4ucGFyZW50Tm9kZSlzLnVuc2hpZnQobik7d2hpbGUoYVtyXT09PXNbcl0pcisrO3JldHVybiByP3BlKGFbcl0sc1tyXSk6YVtyXT09PW0/LTE6c1tyXT09PW0/MTowfSksQ30sc2UubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBzZShlLG51bGwsbnVsbCx0KX0sc2UubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoKGUub3duZXJEb2N1bWVudHx8ZSkhPT1DJiZUKGUpLGQubWF0Y2hlc1NlbGVjdG9yJiZFJiYhQVt0KyIgIl0mJighc3x8IXMudGVzdCh0KSkmJighdnx8IXYudGVzdCh0KSkpdHJ5e3ZhciBuPWMuY2FsbChlLHQpO2lmKG58fGQuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChlKXtBKHQsITApfXJldHVybiAwPHNlKHQsQyxudWxsLFtlXSkubGVuZ3RofSxzZS5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT09QyYmVChlKSx5KGUsdCl9LHNlLmF0dHI9ZnVuY3Rpb24oZSx0KXsoZS5vd25lckRvY3VtZW50fHxlKSE9PUMmJlQoZSk7dmFyIG49Yi5hdHRySGFuZGxlW3QudG9Mb3dlckNhc2UoKV0scj1uJiZqLmNhbGwoYi5hdHRySGFuZGxlLHQudG9Mb3dlckNhc2UoKSk/bihlLHQsIUUpOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09cj9yOmQuYXR0cmlidXRlc3x8IUU/ZS5nZXRBdHRyaWJ1dGUodCk6KHI9ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmci5zcGVjaWZpZWQ/ci52YWx1ZTpudWxsfSxzZS5lc2NhcGU9ZnVuY3Rpb24oZSl7cmV0dXJuKGUrIiIpLnJlcGxhY2UocmUsaWUpfSxzZS5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246ICIrZSl9LHNlLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1bXSxyPTAsaT0wO2lmKGw9IWQuZGV0ZWN0RHVwbGljYXRlcyx1PSFkLnNvcnRTdGFibGUmJmUuc2xpY2UoMCksZS5zb3J0KEQpLGwpe3doaWxlKHQ9ZVtpKytdKXQ9PT1lW2ldJiYocj1uLnB1c2goaSkpO3doaWxlKHItLSllLnNwbGljZShuW3JdLDEpfXJldHVybiB1PW51bGwsZX0sbz1zZS5nZXRUZXh0PWZ1bmN0aW9uKGUpe3ZhciB0LG49IiIscj0wLGk9ZS5ub2RlVHlwZTtpZihpKXtpZigxPT09aXx8OT09PWl8fDExPT09aSl7aWYoInN0cmluZyI9PXR5cGVvZiBlLnRleHRDb250ZW50KXJldHVybiBlLnRleHRDb250ZW50O2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyluKz1vKGUpfWVsc2UgaWYoMz09PWl8fDQ9PT1pKXJldHVybiBlLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKHQ9ZVtyKytdKW4rPW8odCk7cmV0dXJuIG59LChiPXNlLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmxlLG1hdGNoOkcsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOnsiPiI6e2RpcjoicGFyZW50Tm9kZSIsZmlyc3Q6ITB9LCIgIjp7ZGlyOiJwYXJlbnROb2RlIn0sIisiOntkaXI6InByZXZpb3VzU2libGluZyIsZmlyc3Q6ITB9LCJ+Ijp7ZGlyOiJwcmV2aW91c1NpYmxpbmcifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0ucmVwbGFjZSh0ZSxuZSksZVszXT0oZVszXXx8ZVs0XXx8ZVs1XXx8IiIpLnJlcGxhY2UodGUsbmUpLCJ+PSI9PT1lWzJdJiYoZVszXT0iICIrZVszXSsiICIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLCJudGgiPT09ZVsxXS5zbGljZSgwLDMpPyhlWzNdfHxzZS5lcnJvcihlWzBdKSxlWzRdPSsoZVs0XT9lWzVdKyhlWzZdfHwxKToyKigiZXZlbiI9PT1lWzNdfHwib2RkIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHwib2RkIj09PWVbM10pKTplWzNdJiZzZS5lcnJvcihlWzBdKSxlfSxQU0VVRE86ZnVuY3Rpb24oZSl7dmFyIHQsbj0hZVs2XSYmZVsyXTtyZXR1cm4gRy5DSElMRC50ZXN0KGVbMF0pP251bGw6KGVbM10/ZVsyXT1lWzRdfHxlWzVdfHwiIjpuJiZYLnRlc3QobikmJih0PWgobiwhMCkpJiYodD1uLmluZGV4T2YoIikiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHRlLG5lKS50b0xvd2VyQ2FzZSgpO3JldHVybiIqIj09PWU/ZnVuY3Rpb24oKXtyZXR1cm4hMH06ZnVuY3Rpb24oZSl7cmV0dXJuIGUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXR9fSxDTEFTUzpmdW5jdGlvbihlKXt2YXIgdD1wW2UrIiAiXTtyZXR1cm4gdHx8KHQ9bmV3IFJlZ0V4cCgiKF58IitNKyIpIitlKyIoIitNKyJ8JCkiKSkmJnAoZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KCJzdHJpbmciPT10eXBlb2YgZS5jbGFzc05hbWUmJmUuY2xhc3NOYW1lfHwidW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpfSl9LEFUVFI6ZnVuY3Rpb24obixyLGkpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1zZS5hdHRyKGUsbik7cmV0dXJuIG51bGw9PXQ/IiE9Ij09PXI6IXJ8fCh0Kz0iIiwiPSI9PT1yP3Q9PT1pOiIhPSI9PT1yP3QhPT1pOiJePSI9PT1yP2kmJjA9PT10LmluZGV4T2YoaSk6Iio9Ij09PXI/aSYmLTE8dC5pbmRleE9mKGkpOiIkPSI9PT1yP2kmJnQuc2xpY2UoLWkubGVuZ3RoKT09PWk6In49Ij09PXI/LTE8KCIgIit0LnJlcGxhY2UoRiwiICIpKyIgIikuaW5kZXhPZihpKToifD0iPT09ciYmKHQ9PT1pfHx0LnNsaWNlKDAsaS5sZW5ndGgrMSk9PT1pKyItIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oaCxlLHQsZyx2KXt2YXIgeT0ibnRoIiE9PWguc2xpY2UoMCwzKSxtPSJsYXN0IiE9PWguc2xpY2UoLTQpLHg9Im9mLXR5cGUiPT09ZTtyZXR1cm4gMT09PWcmJjA9PT12P2Z1bmN0aW9uKGUpe3JldHVybiEhZS5wYXJlbnROb2RlfTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGw9eSE9PW0/Im5leHRTaWJsaW5nIjoicHJldmlvdXNTaWJsaW5nIixjPWUucGFyZW50Tm9kZSxmPXgmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxwPSFuJiYheCxkPSExO2lmKGMpe2lmKHkpe3doaWxlKGwpe2E9ZTt3aGlsZShhPWFbbF0paWYoeD9hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1mOjE9PT1hLm5vZGVUeXBlKXJldHVybiExO3U9bD0ib25seSI9PT1oJiYhdSYmIm5leHRTaWJsaW5nIn1yZXR1cm4hMH1pZih1PVttP2MuZmlyc3RDaGlsZDpjLmxhc3RDaGlsZF0sbSYmcCl7ZD0ocz0ocj0oaT0obz0oYT1jKVtrXXx8KGFba109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09UyYmclsxXSkmJnJbMl0sYT1zJiZjLmNoaWxkTm9kZXNbc107d2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoMT09PWEubm9kZVR5cGUmJisrZCYmYT09PWUpe2lbaF09W1MscyxkXTticmVha319ZWxzZSBpZihwJiYoZD1zPShyPShpPShvPShhPWUpW2tdfHwoYVtrXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdfHxbXSlbMF09PT1TJiZyWzFdKSwhMT09PWQpd2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoKHg/YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09ZjoxPT09YS5ub2RlVHlwZSkmJisrZCYmKHAmJigoaT0obz1hW2tdfHwoYVtrXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdPVtTLGRdKSxhPT09ZSkpYnJlYWs7cmV0dXJuKGQtPXYpPT09Z3x8ZCVnPT0wJiYwPD1kL2d9fX0sUFNFVURPOmZ1bmN0aW9uKGUsbyl7dmFyIHQsYT1iLnBzZXVkb3NbZV18fGIuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldfHxzZS5lcnJvcigidW5zdXBwb3J0ZWQgcHNldWRvOiAiK2UpO3JldHVybiBhW2tdP2Eobyk6MTxhLmxlbmd0aD8odD1bZSxlLCIiLG9dLGIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShlLnRvTG93ZXJDYXNlKCkpP2xlKGZ1bmN0aW9uKGUsdCl7dmFyIG4scj1hKGUsbyksaT1yLmxlbmd0aDt3aGlsZShpLS0pZVtuPVAoZSxyW2ldKV09ISh0W25dPXJbaV0pfSk6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSwwLHQpfSk6YX19LHBzZXVkb3M6e25vdDpsZShmdW5jdGlvbihlKXt2YXIgcj1bXSxpPVtdLHM9ZihlLnJlcGxhY2UoQiwiJDEiKSk7cmV0dXJuIHNba10/bGUoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbz1zKGUsbnVsbCxyLFtdKSxhPWUubGVuZ3RoO3doaWxlKGEtLSkoaT1vW2FdKSYmKGVbYV09ISh0W2FdPWkpKX0pOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gclswXT1lLHMocixudWxsLG4saSksclswXT1udWxsLCFpLnBvcCgpfX0pLGhhczpsZShmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIDA8c2UodCxlKS5sZW5ndGh9fSksY29udGFpbnM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIHQ9dC5yZXBsYWNlKHRlLG5lKSxmdW5jdGlvbihlKXtyZXR1cm4tMTwoZS50ZXh0Q29udGVudHx8byhlKSkuaW5kZXhPZih0KX19KSxsYW5nOmxlKGZ1bmN0aW9uKG4pe3JldHVybiBWLnRlc3Qobnx8IiIpfHxzZS5lcnJvcigidW5zdXBwb3J0ZWQgbGFuZzogIituKSxuPW4ucmVwbGFjZSh0ZSxuZSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihlKXt2YXIgdDtkb3tpZih0PUU/ZS5sYW5nOmUuZ2V0QXR0cmlidXRlKCJ4bWw6bGFuZyIpfHxlLmdldEF0dHJpYnV0ZSgibGFuZyIpKXJldHVybih0PXQudG9Mb3dlckNhc2UoKSk9PT1ufHwwPT09dC5pbmRleE9mKG4rIi0iKX13aGlsZSgoZT1lLnBhcmVudE5vZGUpJiYxPT09ZS5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGUpe3ZhciB0PW4ubG9jYXRpb24mJm4ubG9jYXRpb24uaGFzaDtyZXR1cm4gdCYmdC5zbGljZSgxKT09PWUuaWR9LHJvb3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1hfSxmb2N1czpmdW5jdGlvbihlKXtyZXR1cm4gZT09PUMuYWN0aXZlRWxlbWVudCYmKCFDLmhhc0ZvY3VzfHxDLmhhc0ZvY3VzKCkpJiYhIShlLnR5cGV8fGUuaHJlZnx8fmUudGFiSW5kZXgpfSxlbmFibGVkOmdlKCExKSxkaXNhYmxlZDpnZSghMCksY2hlY2tlZDpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiEhZS5jaGVja2VkfHwib3B0aW9uIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsITA9PT1lLnNlbGVjdGVkfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIWIucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiBKLnRlc3QoZS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiBRLnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiJidXR0b24iPT09ZS50eXBlfHwiYnV0dG9uIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuImlucHV0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmInRleHQiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSl8fCJ0ZXh0Ij09PXQudG9Mb3dlckNhc2UoKSl9LGZpcnN0OnZlKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDp2ZShmdW5jdGlvbihlLHQpe3JldHVyblt0LTFdfSksZXE6dmUoZnVuY3Rpb24oZSx0LG4pe3JldHVybltuPDA/bit0Om5dfSksZXZlbjp2ZShmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248dDtuKz0yKWUucHVzaChuKTtyZXR1cm4gZX0pLG9kZDp2ZShmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0xO248dDtuKz0yKWUucHVzaChuKTtyZXR1cm4gZX0pLGx0OnZlKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDp0PG4/dDpuOzA8PS0tcjspZS5wdXNoKHIpO3JldHVybiBlfSksZ3Q6dmUoZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1uPDA/bit0Om47KytyPHQ7KWUucHVzaChyKTtyZXR1cm4gZX0pfX0pLnBzZXVkb3MubnRoPWIucHNldWRvcy5lcSx7cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pYi5wc2V1ZG9zW2VdPWRlKGUpO2ZvcihlIGlue3N1Ym1pdDohMCxyZXNldDohMH0pYi5wc2V1ZG9zW2VdPWhlKGUpO2Z1bmN0aW9uIG1lKCl7fWZ1bmN0aW9uIHhlKGUpe2Zvcih2YXIgdD0wLG49ZS5sZW5ndGgscj0iIjt0PG47dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gYmUocyxlLHQpe3ZhciB1PWUuZGlyLGw9ZS5uZXh0LGM9bHx8dSxmPXQmJiJwYXJlbnROb2RlIj09PWMscD1yKys7cmV0dXJuIGUuZmlyc3Q/ZnVuY3Rpb24oZSx0LG4pe3doaWxlKGU9ZVt1XSlpZigxPT09ZS5ub2RlVHlwZXx8ZilyZXR1cm4gcyhlLHQsbik7cmV0dXJuITF9OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT1bUyxwXTtpZihuKXt3aGlsZShlPWVbdV0paWYoKDE9PT1lLm5vZGVUeXBlfHxmKSYmcyhlLHQsbikpcmV0dXJuITB9ZWxzZSB3aGlsZShlPWVbdV0paWYoMT09PWUubm9kZVR5cGV8fGYpaWYoaT0obz1lW2tdfHwoZVtrXT17fSkpW2UudW5pcXVlSURdfHwob1tlLnVuaXF1ZUlEXT17fSksbCYmbD09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSllPWVbdV18fGU7ZWxzZXtpZigocj1pW2NdKSYmclswXT09PVMmJnJbMV09PT1wKXJldHVybiBhWzJdPXJbMl07aWYoKGlbY109YSlbMl09cyhlLHQsbikpcmV0dXJuITB9cmV0dXJuITF9fWZ1bmN0aW9uIHdlKGkpe3JldHVybiAxPGkubGVuZ3RoP2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj1pLmxlbmd0aDt3aGlsZShyLS0paWYoIWlbcl0oZSx0LG4pKXJldHVybiExO3JldHVybiEwfTppWzBdfWZ1bmN0aW9uIFRlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGE9W10scz0wLHU9ZS5sZW5ndGgsbD1udWxsIT10O3M8dTtzKyspKG89ZVtzXSkmJihuJiYhbihvLHIsaSl8fChhLnB1c2gobyksbCYmdC5wdXNoKHMpKSk7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoZCxoLGcsdix5LGUpe3JldHVybiB2JiYhdltrXSYmKHY9Q2UodikpLHkmJiF5W2tdJiYoeT1DZSh5LGUpKSxsZShmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscz1bXSx1PVtdLGw9dC5sZW5ndGgsYz1lfHxmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPTAsaT10Lmxlbmd0aDtyPGk7cisrKXNlKGUsdFtyXSxuKTtyZXR1cm4gbn0oaHx8IioiLG4ubm9kZVR5cGU/W25dOm4sW10pLGY9IWR8fCFlJiZoP2M6VGUoYyxzLGQsbixyKSxwPWc/eXx8KGU/ZDpsfHx2KT9bXTp0OmY7aWYoZyYmZyhmLHAsbixyKSx2KXtpPVRlKHAsdSksdihpLFtdLG4sciksbz1pLmxlbmd0aDt3aGlsZShvLS0pKGE9aVtvXSkmJihwW3Vbb11dPSEoZlt1W29dXT1hKSl9aWYoZSl7aWYoeXx8ZCl7aWYoeSl7aT1bXSxvPXAubGVuZ3RoO3doaWxlKG8tLSkoYT1wW29dKSYmaS5wdXNoKGZbb109YSk7eShudWxsLHA9W10saSxyKX1vPXAubGVuZ3RoO3doaWxlKG8tLSkoYT1wW29dKSYmLTE8KGk9eT9QKGUsYSk6c1tvXSkmJihlW2ldPSEodFtpXT1hKSl9fWVsc2UgcD1UZShwPT09dD9wLnNwbGljZShsLHAubGVuZ3RoKTpwKSx5P3kobnVsbCx0LHAscik6SC5hcHBseSh0LHApfSl9ZnVuY3Rpb24gRWUoZSl7Zm9yKHZhciBpLHQsbixyPWUubGVuZ3RoLG89Yi5yZWxhdGl2ZVtlWzBdLnR5cGVdLGE9b3x8Yi5yZWxhdGl2ZVsiICJdLHM9bz8xOjAsdT1iZShmdW5jdGlvbihlKXtyZXR1cm4gZT09PWl9LGEsITApLGw9YmUoZnVuY3Rpb24oZSl7cmV0dXJuLTE8UChpLGUpfSxhLCEwKSxjPVtmdW5jdGlvbihlLHQsbil7dmFyIHI9IW8mJihufHx0IT09dyl8fCgoaT10KS5ub2RlVHlwZT91KGUsdCxuKTpsKGUsdCxuKSk7cmV0dXJuIGk9bnVsbCxyfV07czxyO3MrKylpZih0PWIucmVsYXRpdmVbZVtzXS50eXBlXSljPVtiZSh3ZShjKSx0KV07ZWxzZXtpZigodD1iLmZpbHRlcltlW3NdLnR5cGVdLmFwcGx5KG51bGwsZVtzXS5tYXRjaGVzKSlba10pe2ZvcihuPSsrcztuPHI7bisrKWlmKGIucmVsYXRpdmVbZVtuXS50eXBlXSlicmVhaztyZXR1cm4gQ2UoMTxzJiZ3ZShjKSwxPHMmJnhlKGUuc2xpY2UoMCxzLTEpLmNvbmNhdCh7dmFsdWU6IiAiPT09ZVtzLTJdLnR5cGU/IioiOiIifSkpLnJlcGxhY2UoQiwiJDEiKSx0LHM8biYmRWUoZS5zbGljZShzLG4pKSxuPHImJkVlKGU9ZS5zbGljZShuKSksbjxyJiZ4ZShlKSl9Yy5wdXNoKHQpfXJldHVybiB3ZShjKX1yZXR1cm4gbWUucHJvdG90eXBlPWIuZmlsdGVycz1iLnBzZXVkb3MsYi5zZXRGaWx0ZXJzPW5ldyBtZSxoPXNlLnRva2VuaXplPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzLHUsbD14W2UrIiAiXTtpZihsKXJldHVybiB0PzA6bC5zbGljZSgwKTthPWUscz1bXSx1PWIucHJlRmlsdGVyO3doaWxlKGEpe2ZvcihvIGluIG4mJiEocj1fLmV4ZWMoYSkpfHwociYmKGE9YS5zbGljZShyWzBdLmxlbmd0aCl8fGEpLHMucHVzaChpPVtdKSksbj0hMSwocj16LmV4ZWMoYSkpJiYobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6clswXS5yZXBsYWNlKEIsIiAiKX0pLGE9YS5zbGljZShuLmxlbmd0aCkpLGIuZmlsdGVyKSEocj1HW29dLmV4ZWMoYSkpfHx1W29dJiYhKHI9dVtvXShyKSl8fChuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpvLG1hdGNoZXM6cn0pLGE9YS5zbGljZShuLmxlbmd0aCkpO2lmKCFuKWJyZWFrfXJldHVybiB0P2EubGVuZ3RoOmE/c2UuZXJyb3IoZSk6eChlLHMpLnNsaWNlKDApfSxmPXNlLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbix2LHksbSx4LHIsaT1bXSxvPVtdLGE9TltlKyIgIl07aWYoIWEpe3R8fCh0PWgoZSkpLG49dC5sZW5ndGg7d2hpbGUobi0tKShhPUVlKHRbbl0pKVtrXT9pLnB1c2goYSk6by5wdXNoKGEpOyhhPU4oZSwodj1vLG09MDwoeT1pKS5sZW5ndGgseD0wPHYubGVuZ3RoLHI9ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdT0wLGw9IjAiLGM9ZSYmW10sZj1bXSxwPXcsZD1lfHx4JiZiLmZpbmQuVEFHKCIqIixpKSxoPVMrPW51bGw9PXA/MTpNYXRoLnJhbmRvbSgpfHwuMSxnPWQubGVuZ3RoO2ZvcihpJiYodz10PT09Q3x8dHx8aSk7bCE9PWcmJm51bGwhPShvPWRbbF0pO2wrKyl7aWYoeCYmbyl7YT0wLHR8fG8ub3duZXJEb2N1bWVudD09PUN8fChUKG8pLG49IUUpO3doaWxlKHM9dlthKytdKWlmKHMobyx0fHxDLG4pKXtyLnB1c2gobyk7YnJlYWt9aSYmKFM9aCl9bSYmKChvPSFzJiZvKSYmdS0tLGUmJmMucHVzaChvKSl9aWYodSs9bCxtJiZsIT09dSl7YT0wO3doaWxlKHM9eVthKytdKXMoYyxmLHQsbik7aWYoZSl7aWYoMDx1KXdoaWxlKGwtLSljW2xdfHxmW2xdfHwoZltsXT1xLmNhbGwocikpO2Y9VGUoZil9SC5hcHBseShyLGYpLGkmJiFlJiYwPGYubGVuZ3RoJiYxPHUreS5sZW5ndGgmJnNlLnVuaXF1ZVNvcnQocil9cmV0dXJuIGkmJihTPWgsdz1wKSxjfSxtP2xlKHIpOnIpKSkuc2VsZWN0b3I9ZX1yZXR1cm4gYX0sZz1zZS5zZWxlY3Q9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPSJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLGM9IXImJmgoZT1sLnNlbGVjdG9yfHxlKTtpZihuPW58fFtdLDE9PT1jLmxlbmd0aCl7aWYoMjwobz1jWzBdPWNbMF0uc2xpY2UoMCkpLmxlbmd0aCYmIklEIj09PShhPW9bMF0pLnR5cGUmJjk9PT10Lm5vZGVUeXBlJiZFJiZiLnJlbGF0aXZlW29bMV0udHlwZV0pe2lmKCEodD0oYi5maW5kLklEKGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLG5lKSx0KXx8W10pWzBdKSlyZXR1cm4gbjtsJiYodD10LnBhcmVudE5vZGUpLGU9ZS5zbGljZShvLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1pPUcubmVlZHNDb250ZXh0LnRlc3QoZSk/MDpvLmxlbmd0aDt3aGlsZShpLS0pe2lmKGE9b1tpXSxiLnJlbGF0aXZlW3M9YS50eXBlXSlicmVhaztpZigodT1iLmZpbmRbc10pJiYocj11KGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLG5lKSxlZS50ZXN0KG9bMF0udHlwZSkmJnllKHQucGFyZW50Tm9kZSl8fHQpKSl7aWYoby5zcGxpY2UoaSwxKSwhKGU9ci5sZW5ndGgmJnhlKG8pKSlyZXR1cm4gSC5hcHBseShuLHIpLG47YnJlYWt9fX1yZXR1cm4obHx8ZihlLGMpKShyLHQsIUUsbiwhdHx8ZWUudGVzdChlKSYmeWUodC5wYXJlbnROb2RlKXx8dCksbn0sZC5zb3J0U3RhYmxlPWsuc3BsaXQoIiIpLnNvcnQoRCkuam9pbigiIik9PT1rLGQuZGV0ZWN0RHVwbGljYXRlcz0hIWwsVCgpLGQuc29ydERldGFjaGVkPWNlKGZ1bmN0aW9uKGUpe3JldHVybiAxJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oQy5jcmVhdGVFbGVtZW50KCJmaWVsZHNldCIpKX0pLGNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD0iPGEgaHJlZj0nIyc+PC9hPiIsIiMiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgiaHJlZiIpfSl8fGZlKCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoIixmdW5jdGlvbihlLHQsbil7aWYoIW4pcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsInR5cGUiPT09dC50b0xvd2VyQ2FzZSgpPzE6Mil9KSxkLmF0dHJpYnV0ZXMmJmNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD0iPGlucHV0Lz4iLGUuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoInZhbHVlIiwiIiksIiI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpfSl8fGZlKCJ2YWx1ZSIsZnVuY3Rpb24oZSx0LG4pe2lmKCFuJiYiaW5wdXQiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiBlLmRlZmF1bHRWYWx1ZX0pLGNlKGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lLmdldEF0dHJpYnV0ZSgiZGlzYWJsZWQiKX0pfHxmZShSLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtpZighbilyZXR1cm4hMD09PWVbdF0/dC50b0xvd2VyQ2FzZSgpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0pLHNlfShDKTtrLmZpbmQ9aCxrLmV4cHI9aC5zZWxlY3RvcnMsay5leHByWyI6Il09ay5leHByLnBzZXVkb3Msay51bmlxdWVTb3J0PWsudW5pcXVlPWgudW5pcXVlU29ydCxrLnRleHQ9aC5nZXRUZXh0LGsuaXNYTUxEb2M9aC5pc1hNTCxrLmNvbnRhaW5zPWguY29udGFpbnMsay5lc2NhcGVTZWxlY3Rvcj1oLmVzY2FwZTt2YXIgVD1mdW5jdGlvbihlLHQsbil7dmFyIHI9W10saT12b2lkIDAhPT1uO3doaWxlKChlPWVbdF0pJiY5IT09ZS5ub2RlVHlwZSlpZigxPT09ZS5ub2RlVHlwZSl7aWYoaSYmayhlKS5pcyhuKSlicmVhaztyLnB1c2goZSl9cmV0dXJuIHJ9LFM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W107ZTtlPWUubmV4dFNpYmxpbmcpMT09PWUubm9kZVR5cGUmJmUhPT10JiZuLnB1c2goZSk7cmV0dXJuIG59LE49ay5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtmdW5jdGlvbiBBKGUsdCl7cmV0dXJuIGUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXQudG9Mb3dlckNhc2UoKX12YXIgRD0vXjwoW2Etel1bXlwvXDA+Olx4MjBcdFxyXG5cZl0qKVtceDIwXHRcclxuXGZdKlwvPz4oPzo8XC9cMT58KSQvaTtmdW5jdGlvbiBqKGUsbixyKXtyZXR1cm4gbShuKT9rLmdyZXAoZSxmdW5jdGlvbihlLHQpe3JldHVybiEhbi5jYWxsKGUsdCxlKSE9PXJ9KTpuLm5vZGVUeXBlP2suZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBlPT09biE9PXJ9KToic3RyaW5nIiE9dHlwZW9mIG4/ay5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuLTE8aS5jYWxsKG4sZSkhPT1yfSk6ay5maWx0ZXIobixlLHIpfWsuZmlsdGVyPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10WzBdO3JldHVybiBuJiYoZT0iOm5vdCgiK2UrIikiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP2suZmluZC5tYXRjaGVzU2VsZWN0b3IocixlKT9bcl06W106ay5maW5kLm1hdGNoZXMoZSxrLmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LGsuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj10aGlzLmxlbmd0aCxpPXRoaXM7aWYoInN0cmluZyIhPXR5cGVvZiBlKXJldHVybiB0aGlzLnB1c2hTdGFjayhrKGUpLmZpbHRlcihmdW5jdGlvbigpe2Zvcih0PTA7dDxyO3QrKylpZihrLmNvbnRhaW5zKGlbdF0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKG49dGhpcy5wdXNoU3RhY2soW10pLHQ9MDt0PHI7dCsrKWsuZmluZChlLGlbdF0sbik7cmV0dXJuIDE8cj9rLnVuaXF1ZVNvcnQobik6bn0sZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhqKHRoaXMsZXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhqKHRoaXMsZXx8W10sITApKX0saXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFqKHRoaXMsInN0cmluZyI9PXR5cGVvZiBlJiZOLnRlc3QoZSk/ayhlKTplfHxbXSwhMSkubGVuZ3RofX0pO3ZhciBxLEw9L14oPzpccyooPFtcd1xXXSs+KVtePl0qfCMoW1x3LV0rKSkkLzsoay5mbi5pbml0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKCFlKXJldHVybiB0aGlzO2lmKG49bnx8cSwic3RyaW5nIj09dHlwZW9mIGUpe2lmKCEocj0iPCI9PT1lWzBdJiYiPiI9PT1lW2UubGVuZ3RoLTFdJiYzPD1lLmxlbmd0aD9bbnVsbCxlLG51bGxdOkwuZXhlYyhlKSl8fCFyWzFdJiZ0KXJldHVybiF0fHx0LmpxdWVyeT8odHx8bikuZmluZChlKTp0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7aWYoclsxXSl7aWYodD10IGluc3RhbmNlb2Ygaz90WzBdOnQsay5tZXJnZSh0aGlzLGsucGFyc2VIVE1MKHJbMV0sdCYmdC5ub2RlVHlwZT90Lm93bmVyRG9jdW1lbnR8fHQ6RSwhMCkpLEQudGVzdChyWzFdKSYmay5pc1BsYWluT2JqZWN0KHQpKWZvcihyIGluIHQpbSh0aGlzW3JdKT90aGlzW3JdKHRbcl0pOnRoaXMuYXR0cihyLHRbcl0pO3JldHVybiB0aGlzfXJldHVybihpPUUuZ2V0RWxlbWVudEJ5SWQoclsyXSkpJiYodGhpc1swXT1pLHRoaXMubGVuZ3RoPTEpLHRoaXN9cmV0dXJuIGUubm9kZVR5cGU/KHRoaXNbMF09ZSx0aGlzLmxlbmd0aD0xLHRoaXMpOm0oZSk/dm9pZCAwIT09bi5yZWFkeT9uLnJlYWR5KGUpOmUoayk6ay5tYWtlQXJyYXkoZSx0aGlzKX0pLnByb3RvdHlwZT1rLmZuLHE9ayhFKTt2YXIgSD0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxPPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O2Z1bmN0aW9uIFAoZSx0KXt3aGlsZSgoZT1lW3RdKSYmMSE9PWUubm9kZVR5cGUpO3JldHVybiBlfWsuZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oZSl7dmFyIHQ9ayhlLHRoaXMpLG49dC5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPTA7ZTxuO2UrKylpZihrLmNvbnRhaW5zKHRoaXMsdFtlXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MCxpPXRoaXMubGVuZ3RoLG89W10sYT0ic3RyaW5nIiE9dHlwZW9mIGUmJmsoZSk7aWYoIU4udGVzdChlKSlmb3IoO3I8aTtyKyspZm9yKG49dGhpc1tyXTtuJiZuIT09dDtuPW4ucGFyZW50Tm9kZSlpZihuLm5vZGVUeXBlPDExJiYoYT8tMTxhLmluZGV4KG4pOjE9PT1uLm5vZGVUeXBlJiZrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sZSkpKXtvLnB1c2gobik7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKDE8by5sZW5ndGg/ay51bmlxdWVTb3J0KG8pOm8pfSxpbmRleDpmdW5jdGlvbihlKXtyZXR1cm4gZT8ic3RyaW5nIj09dHlwZW9mIGU/aS5jYWxsKGsoZSksdGhpc1swXSk6aS5jYWxsKHRoaXMsZS5qcXVlcnk/ZVswXTplKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayhrLnVuaXF1ZVNvcnQoay5tZXJnZSh0aGlzLmdldCgpLGsoZSx0KSkpKX0sYWRkQmFjazpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9fSksay5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUsInBhcmVudE5vZGUiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gVChlLCJwYXJlbnROb2RlIixuKX0sbmV4dDpmdW5jdGlvbihlKXtyZXR1cm4gUChlLCJuZXh0U2libGluZyIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBQKGUsInByZXZpb3VzU2libGluZyIpfSxuZXh0QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUsIm5leHRTaWJsaW5nIil9LHByZXZBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoZSwicHJldmlvdXNTaWJsaW5nIil9LG5leHRVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFQoZSwibmV4dFNpYmxpbmciLG4pfSxwcmV2VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBUKGUsInByZXZpb3VzU2libGluZyIsbil9LHNpYmxpbmdzOmZ1bmN0aW9uKGUpe3JldHVybiBTKChlLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGUpfSxjaGlsZHJlbjpmdW5jdGlvbihlKXtyZXR1cm4gUyhlLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIGUuY29udGVudERvY3VtZW50P2UuY29udGVudERvY3VtZW50OihBKGUsInRlbXBsYXRlIikmJihlPWUuY29udGVudHx8ZSksay5tZXJnZShbXSxlLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKHIsaSl7ay5mbltyXT1mdW5jdGlvbihlLHQpe3ZhciBuPWsubWFwKHRoaXMsaSxlKTtyZXR1cm4iVW50aWwiIT09ci5zbGljZSgtNSkmJih0PWUpLHQmJiJzdHJpbmciPT10eXBlb2YgdCYmKG49ay5maWx0ZXIodCxuKSksMTx0aGlzLmxlbmd0aCYmKE9bcl18fGsudW5pcXVlU29ydChuKSxILnRlc3QocikmJm4ucmV2ZXJzZSgpKSx0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgUj0vW15ceDIwXHRcclxuXGZdKy9nO2Z1bmN0aW9uIE0oZSl7cmV0dXJuIGV9ZnVuY3Rpb24gSShlKXt0aHJvdyBlfWZ1bmN0aW9uIFcoZSx0LG4scil7dmFyIGk7dHJ5e2UmJm0oaT1lLnByb21pc2UpP2kuY2FsbChlKS5kb25lKHQpLmZhaWwobik6ZSYmbShpPWUudGhlbik/aS5jYWxsKGUsdCxuKTp0LmFwcGx5KHZvaWQgMCxbZV0uc2xpY2UocikpfWNhdGNoKGUpe24uYXBwbHkodm9pZCAwLFtlXSl9fWsuQ2FsbGJhY2tzPWZ1bmN0aW9uKHIpe3ZhciBlLG47cj0ic3RyaW5nIj09dHlwZW9mIHI/KGU9cixuPXt9LGsuZWFjaChlLm1hdGNoKFIpfHxbXSxmdW5jdGlvbihlLHQpe25bdF09ITB9KSxuKTprLmV4dGVuZCh7fSxyKTt2YXIgaSx0LG8sYSxzPVtdLHU9W10sbD0tMSxjPWZ1bmN0aW9uKCl7Zm9yKGE9YXx8ci5vbmNlLG89aT0hMDt1Lmxlbmd0aDtsPS0xKXt0PXUuc2hpZnQoKTt3aGlsZSgrK2w8cy5sZW5ndGgpITE9PT1zW2xdLmFwcGx5KHRbMF0sdFsxXSkmJnIuc3RvcE9uRmFsc2UmJihsPXMubGVuZ3RoLHQ9ITEpfXIubWVtb3J5fHwodD0hMSksaT0hMSxhJiYocz10P1tdOiIiKX0sZj17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIHMmJih0JiYhaSYmKGw9cy5sZW5ndGgtMSx1LnB1c2godCkpLGZ1bmN0aW9uIG4oZSl7ay5lYWNoKGUsZnVuY3Rpb24oZSx0KXttKHQpP3IudW5pcXVlJiZmLmhhcyh0KXx8cy5wdXNoKHQpOnQmJnQubGVuZ3RoJiYic3RyaW5nIiE9PXcodCkmJm4odCl9KX0oYXJndW1lbnRzKSx0JiYhaSYmYygpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gay5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihlLHQpe3ZhciBuO3doaWxlKC0xPChuPWsuaW5BcnJheSh0LHMsbikpKXMuc3BsaWNlKG4sMSksbjw9bCYmbC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGUpe3JldHVybiBlPy0xPGsuaW5BcnJheShlLHMpOjA8cy5sZW5ndGh9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHMmJihzPVtdKSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGE9dT1bXSxzPXQ9IiIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hc30sbG9jazpmdW5jdGlvbigpe3JldHVybiBhPXU9W10sdHx8aXx8KHM9dD0iIiksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuISFhfSxmaXJlV2l0aDpmdW5jdGlvbihlLHQpe3JldHVybiBhfHwodD1bZSwodD10fHxbXSkuc2xpY2U/dC5zbGljZSgpOnRdLHUucHVzaCh0KSxpfHxjKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIW99fTtyZXR1cm4gZn0say5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGUpe3ZhciBvPVtbIm5vdGlmeSIsInByb2dyZXNzIixrLkNhbGxiYWNrcygibWVtb3J5Iiksay5DYWxsYmFja3MoIm1lbW9yeSIpLDJdLFsicmVzb2x2ZSIsImRvbmUiLGsuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLGsuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLDAsInJlc29sdmVkIl0sWyJyZWplY3QiLCJmYWlsIixrLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSxrLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwxLCJyZWplY3RlZCJdXSxpPSJwZW5kaW5nIixhPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBpfSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gcy5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LCJjYXRjaCI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEudGhlbihudWxsLGUpfSxwaXBlOmZ1bmN0aW9uKCl7dmFyIGk9YXJndW1lbnRzO3JldHVybiBrLkRlZmVycmVkKGZ1bmN0aW9uKHIpe2suZWFjaChvLGZ1bmN0aW9uKGUsdCl7dmFyIG49bShpW3RbNF1dKSYmaVt0WzRdXTtzW3RbMV1dKGZ1bmN0aW9uKCl7dmFyIGU9biYmbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZSYmbShlLnByb21pc2UpP2UucHJvbWlzZSgpLnByb2dyZXNzKHIubm90aWZ5KS5kb25lKHIucmVzb2x2ZSkuZmFpbChyLnJlamVjdCk6clt0WzBdKyJXaXRoIl0odGhpcyxuP1tlXTphcmd1bWVudHMpfSl9KSxpPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24odCxuLHIpe3ZhciB1PTA7ZnVuY3Rpb24gbChpLG8sYSxzKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzLGU9ZnVuY3Rpb24oKXt2YXIgZSx0O2lmKCEoaTx1KSl7aWYoKGU9YS5hcHBseShuLHIpKT09PW8ucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvbiIpO3Q9ZSYmKCJvYmplY3QiPT10eXBlb2YgZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGUpJiZlLnRoZW4sbSh0KT9zP3QuY2FsbChlLGwodSxvLE0scyksbCh1LG8sSSxzKSk6KHUrKyx0LmNhbGwoZSxsKHUsbyxNLHMpLGwodSxvLEkscyksbCh1LG8sTSxvLm5vdGlmeVdpdGgpKSk6KGEhPT1NJiYobj12b2lkIDAscj1bZV0pLChzfHxvLnJlc29sdmVXaXRoKShuLHIpKX19LHQ9cz9lOmZ1bmN0aW9uKCl7dHJ5e2UoKX1jYXRjaChlKXtrLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJmsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLHQuc3RhY2tUcmFjZSksdTw9aSsxJiYoYSE9PUkmJihuPXZvaWQgMCxyPVtlXSksby5yZWplY3RXaXRoKG4scikpfX07aT90KCk6KGsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYodC5zdGFja1RyYWNlPWsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLEMuc2V0VGltZW91dCh0KSl9fXJldHVybiBrLkRlZmVycmVkKGZ1bmN0aW9uKGUpe29bMF1bM10uYWRkKGwoMCxlLG0ocik/cjpNLGUubm90aWZ5V2l0aCkpLG9bMV1bM10uYWRkKGwoMCxlLG0odCk/dDpNKSksb1syXVszXS5hZGQobCgwLGUsbShuKT9uOkkpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT9rLmV4dGVuZChlLGEpOmF9fSxzPXt9O3JldHVybiBrLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPXRbMl0scj10WzVdO2FbdFsxXV09bi5hZGQsciYmbi5hZGQoZnVuY3Rpb24oKXtpPXJ9LG9bMy1lXVsyXS5kaXNhYmxlLG9bMy1lXVszXS5kaXNhYmxlLG9bMF1bMl0ubG9jayxvWzBdWzNdLmxvY2spLG4uYWRkKHRbM10uZmlyZSksc1t0WzBdXT1mdW5jdGlvbigpe3JldHVybiBzW3RbMF0rIldpdGgiXSh0aGlzPT09cz92b2lkIDA6dGhpcyxhcmd1bWVudHMpLHRoaXN9LHNbdFswXSsiV2l0aCJdPW4uZmlyZVdpdGh9KSxhLnByb21pc2UocyksZSYmZS5jYWxsKHMscyksc30sd2hlbjpmdW5jdGlvbihlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHQ9bixyPUFycmF5KHQpLGk9cy5jYWxsKGFyZ3VtZW50cyksbz1rLkRlZmVycmVkKCksYT1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7clt0XT10aGlzLGlbdF09MTxhcmd1bWVudHMubGVuZ3RoP3MuY2FsbChhcmd1bWVudHMpOmUsLS1ufHxvLnJlc29sdmVXaXRoKHIsaSl9fTtpZihuPD0xJiYoVyhlLG8uZG9uZShhKHQpKS5yZXNvbHZlLG8ucmVqZWN0LCFuKSwicGVuZGluZyI9PT1vLnN0YXRlKCl8fG0oaVt0XSYmaVt0XS50aGVuKSkpcmV0dXJuIG8udGhlbigpO3doaWxlKHQtLSlXKGlbdF0sYSh0KSxvLnJlamVjdCk7cmV0dXJuIG8ucHJvbWlzZSgpfX0pO3ZhciAkPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO2suRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihlLHQpe0MuY29uc29sZSYmQy5jb25zb2xlLndhcm4mJmUmJiQudGVzdChlLm5hbWUpJiZDLmNvbnNvbGUud2FybigialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogIitlLm1lc3NhZ2UsZS5zdGFjayx0KX0say5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihlKXtDLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlfSl9O3ZhciBGPWsuRGVmZXJyZWQoKTtmdW5jdGlvbiBCKCl7RS5yZW1vdmVFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIixCKSxDLnJlbW92ZUV2ZW50TGlzdGVuZXIoImxvYWQiLEIpLGsucmVhZHkoKX1rLmZuLnJlYWR5PWZ1bmN0aW9uKGUpe3JldHVybiBGLnRoZW4oZSlbImNhdGNoIl0oZnVuY3Rpb24oZSl7ay5yZWFkeUV4Y2VwdGlvbihlKX0pLHRoaXN9LGsuZXh0ZW5kKHtpc1JlYWR5OiExLHJlYWR5V2FpdDoxLHJlYWR5OmZ1bmN0aW9uKGUpeyghMD09PWU/LS1rLnJlYWR5V2FpdDprLmlzUmVhZHkpfHwoay5pc1JlYWR5PSEwKSE9PWUmJjA8LS1rLnJlYWR5V2FpdHx8Ri5yZXNvbHZlV2l0aChFLFtrXSl9fSksay5yZWFkeS50aGVuPUYudGhlbiwiY29tcGxldGUiPT09RS5yZWFkeVN0YXRlfHwibG9hZGluZyIhPT1FLnJlYWR5U3RhdGUmJiFFLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9DLnNldFRpbWVvdXQoay5yZWFkeSk6KEUuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsQiksQy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixCKSk7dmFyIF89ZnVuY3Rpb24oZSx0LG4scixpLG8sYSl7dmFyIHM9MCx1PWUubGVuZ3RoLGw9bnVsbD09bjtpZigib2JqZWN0Ij09PXcobikpZm9yKHMgaW4gaT0hMCxuKV8oZSx0LHMsbltzXSwhMCxvLGEpO2Vsc2UgaWYodm9pZCAwIT09ciYmKGk9ITAsbShyKXx8KGE9ITApLGwmJihhPyh0LmNhbGwoZSxyKSx0PW51bGwpOihsPXQsdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGwuY2FsbChrKGUpLG4pfSkpLHQpKWZvcig7czx1O3MrKyl0KGVbc10sbixhP3I6ci5jYWxsKGVbc10scyx0KGVbc10sbikpKTtyZXR1cm4gaT9lOmw/dC5jYWxsKGUpOnU/dChlWzBdLG4pOm99LHo9L14tbXMtLyxVPS8tKFthLXpdKS9nO2Z1bmN0aW9uIFgoZSx0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfWZ1bmN0aW9uIFYoZSl7cmV0dXJuIGUucmVwbGFjZSh6LCJtcy0iKS5yZXBsYWNlKFUsWCl9dmFyIEc9ZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfHw5PT09ZS5ub2RlVHlwZXx8IStlLm5vZGVUeXBlfTtmdW5jdGlvbiBZKCl7dGhpcy5leHBhbmRvPWsuZXhwYW5kbytZLnVpZCsrfVkudWlkPTEsWS5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdHx8KHQ9e30sRyhlKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXQ6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5leHBhbmRvLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pKSksdH0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPXRoaXMuY2FjaGUoZSk7aWYoInN0cmluZyI9PXR5cGVvZiB0KWlbVih0KV09bjtlbHNlIGZvcihyIGluIHQpaVtWKHIpXT10W3JdO3JldHVybiBpfSxnZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD90aGlzLmNhY2hlKGUpOmVbdGhpcy5leHBhbmRvXSYmZVt0aGlzLmV4cGFuZG9dW1YodCldfSxhY2Nlc3M6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT10fHx0JiYic3RyaW5nIj09dHlwZW9mIHQmJnZvaWQgMD09PW4/dGhpcy5nZXQoZSx0KToodGhpcy5zZXQoZSx0LG4pLHZvaWQgMCE9PW4/bjp0KX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lW3RoaXMuZXhwYW5kb107aWYodm9pZCAwIT09cil7aWYodm9pZCAwIT09dCl7bj0odD1BcnJheS5pc0FycmF5KHQpP3QubWFwKFYpOih0PVYodCkpaW4gcj9bdF06dC5tYXRjaChSKXx8W10pLmxlbmd0aDt3aGlsZShuLS0pZGVsZXRlIHJbdFtuXV19KHZvaWQgMD09PXR8fGsuaXNFbXB0eU9iamVjdChyKSkmJihlLm5vZGVUeXBlP2VbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIGVbdGhpcy5leHBhbmRvXSl9fSxoYXNEYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdm9pZCAwIT09dCYmIWsuaXNFbXB0eU9iamVjdCh0KX19O3ZhciBRPW5ldyBZLEo9bmV3IFksSz0vXig/Olx7W1x3XFddKlx9fFxbW1x3XFddKlxdKSQvLFo9L1tBLVpdL2c7ZnVuY3Rpb24gZWUoZSx0LG4pe3ZhciByLGk7aWYodm9pZCAwPT09biYmMT09PWUubm9kZVR5cGUpaWYocj0iZGF0YS0iK3QucmVwbGFjZShaLCItJCYiKS50b0xvd2VyQ2FzZSgpLCJzdHJpbmciPT10eXBlb2Yobj1lLmdldEF0dHJpYnV0ZShyKSkpe3RyeXtuPSJ0cnVlIj09PShpPW4pfHwiZmFsc2UiIT09aSYmKCJudWxsIj09PWk/bnVsbDppPT09K2krIiI/K2k6Sy50ZXN0KGkpP0pTT04ucGFyc2UoaSk6aSl9Y2F0Y2goZSl7fUouc2V0KGUsdCxuKX1lbHNlIG49dm9pZCAwO3JldHVybiBufWsuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBKLmhhc0RhdGEoZSl8fFEuaGFzRGF0YShlKX0sZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEouYWNjZXNzKGUsdCxuKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe0oucmVtb3ZlKGUsdCl9LF9kYXRhOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUS5hY2Nlc3MoZSx0LG4pfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe1EucmVtb3ZlKGUsdCl9fSksay5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24obixlKXt2YXIgdCxyLGksbz10aGlzWzBdLGE9byYmby5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PW4pe2lmKHRoaXMubGVuZ3RoJiYoaT1KLmdldChvKSwxPT09by5ub2RlVHlwZSYmIVEuZ2V0KG8sImhhc0RhdGFBdHRycyIpKSl7dD1hLmxlbmd0aDt3aGlsZSh0LS0pYVt0XSYmMD09PShyPWFbdF0ubmFtZSkuaW5kZXhPZigiZGF0YS0iKSYmKHI9VihyLnNsaWNlKDUpKSxlZShvLHIsaVtyXSkpO1Euc2V0KG8sImhhc0RhdGFBdHRycyIsITApfXJldHVybiBpfXJldHVybiJvYmplY3QiPT10eXBlb2Ygbj90aGlzLmVhY2goZnVuY3Rpb24oKXtKLnNldCh0aGlzLG4pfSk6Xyh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0O2lmKG8mJnZvaWQgMD09PWUpcmV0dXJuIHZvaWQgMCE9PSh0PUouZ2V0KG8sbikpP3Q6dm9pZCAwIT09KHQ9ZWUobyxuKSk/dDp2b2lkIDA7dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Si5zZXQodGhpcyxuLGUpfSl9LG51bGwsZSwxPGFyZ3VtZW50cy5sZW5ndGgsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe0oucmVtb3ZlKHRoaXMsZSl9KX19KSxrLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fCJmeCIpKyJxdWV1ZSIscj1RLmdldChlLHQpLG4mJighcnx8QXJyYXkuaXNBcnJheShuKT9yPVEuYWNjZXNzKGUsdCxrLm1ha2VBcnJheShuKSk6ci5wdXNoKG4pKSxyfHxbXX0sZGVxdWV1ZTpmdW5jdGlvbihlLHQpe3Q9dHx8ImZ4Ijt2YXIgbj1rLnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPWsuX3F1ZXVlSG9va3MoZSx0KTsiaW5wcm9ncmVzcyI9PT1pJiYoaT1uLnNoaWZ0KCksci0tKSxpJiYoImZ4Ij09PXQmJm4udW5zaGlmdCgiaW5wcm9ncmVzcyIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsZnVuY3Rpb24oKXtrLmRlcXVldWUoZSx0KX0sbykpLCFyJiZvJiZvLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10KyJxdWV1ZUhvb2tzIjtyZXR1cm4gUS5nZXQoZSxuKXx8US5hY2Nlc3MoZSxuLHtlbXB0eTprLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKS5hZGQoZnVuY3Rpb24oKXtRLnJlbW92ZShlLFt0KyJxdWV1ZSIsbl0pfSl9KX19KSxrLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24odCxuKXt2YXIgZT0yO3JldHVybiJzdHJpbmciIT10eXBlb2YgdCYmKG49dCx0PSJmeCIsZS0tKSxhcmd1bWVudHMubGVuZ3RoPGU/ay5xdWV1ZSh0aGlzWzBdLHQpOnZvaWQgMD09PW4/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1rLnF1ZXVlKHRoaXMsdCxuKTtrLl9xdWV1ZUhvb2tzKHRoaXMsdCksImZ4Ij09PXQmJiJpbnByb2dyZXNzIiE9PWVbMF0mJmsuZGVxdWV1ZSh0aGlzLHQpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2suZGVxdWV1ZSh0aGlzLGUpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8ImZ4IixbXSl9LHByb21pc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTEsaT1rLkRlZmVycmVkKCksbz10aGlzLGE9dGhpcy5sZW5ndGgscz1mdW5jdGlvbigpey0tcnx8aS5yZXNvbHZlV2l0aChvLFtvXSl9OyJzdHJpbmciIT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksZT1lfHwiZngiO3doaWxlKGEtLSkobj1RLmdldChvW2FdLGUrInF1ZXVlSG9va3MiKSkmJm4uZW1wdHkmJihyKyssbi5lbXB0eS5hZGQocykpO3JldHVybiBzKCksaS5wcm9taXNlKHQpfX0pO3ZhciB0ZT0vWystXT8oPzpcZCpcLnwpXGQrKD86W2VFXVsrLV0/XGQrfCkvLnNvdXJjZSxuZT1uZXcgUmVnRXhwKCJeKD86KFsrLV0pPXwpKCIrdGUrIikoW2EteiVdKikkIiwiaSIpLHJlPVsiVG9wIiwiUmlnaHQiLCJCb3R0b20iLCJMZWZ0Il0saWU9RS5kb2N1bWVudEVsZW1lbnQsb2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGsuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfSxhZT17Y29tcG9zZWQ6ITB9O2llLmdldFJvb3ROb2RlJiYob2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGsuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfHxlLmdldFJvb3ROb2RlKGFlKT09PWUub3duZXJEb2N1bWVudH0pO3ZhciBzZT1mdW5jdGlvbihlLHQpe3JldHVybiJub25lIj09PShlPXR8fGUpLnN0eWxlLmRpc3BsYXl8fCIiPT09ZS5zdHlsZS5kaXNwbGF5JiZvZShlKSYmIm5vbmUiPT09ay5jc3MoZSwiZGlzcGxheSIpfSx1ZT1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGE9e307Zm9yKG8gaW4gdClhW29dPWUuc3R5bGVbb10sZS5zdHlsZVtvXT10W29dO2ZvcihvIGluIGk9bi5hcHBseShlLHJ8fFtdKSx0KWUuc3R5bGVbb109YVtvXTtyZXR1cm4gaX07ZnVuY3Rpb24gbGUoZSx0LG4scil7dmFyIGksbyxhPTIwLHM9cj9mdW5jdGlvbigpe3JldHVybiByLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiBrLmNzcyhlLHQsIiIpfSx1PXMoKSxsPW4mJm5bM118fChrLmNzc051bWJlclt0XT8iIjoicHgiKSxjPWUubm9kZVR5cGUmJihrLmNzc051bWJlclt0XXx8InB4IiE9PWwmJit1KSYmbmUuZXhlYyhrLmNzcyhlLHQpKTtpZihjJiZjWzNdIT09bCl7dS89MixsPWx8fGNbM10sYz0rdXx8MTt3aGlsZShhLS0pay5zdHlsZShlLHQsYytsKSwoMS1vKSooMS0obz1zKCkvdXx8LjUpKTw9MCYmKGE9MCksYy89bztjKj0yLGsuc3R5bGUoZSx0LGMrbCksbj1ufHxbXX1yZXR1cm4gbiYmKGM9K2N8fCt1fHwwLGk9blsxXT9jKyhuWzFdKzEpKm5bMl06K25bMl0sciYmKHIudW5pdD1sLHIuc3RhcnQ9YyxyLmVuZD1pKSksaX12YXIgY2U9e307ZnVuY3Rpb24gZmUoZSx0KXtmb3IodmFyIG4scixpLG8sYSxzLHUsbD1bXSxjPTAsZj1lLmxlbmd0aDtjPGY7YysrKShyPWVbY10pLnN0eWxlJiYobj1yLnN0eWxlLmRpc3BsYXksdD8oIm5vbmUiPT09biYmKGxbY109US5nZXQociwiZGlzcGxheSIpfHxudWxsLGxbY118fChyLnN0eWxlLmRpc3BsYXk9IiIpKSwiIj09PXIuc3R5bGUuZGlzcGxheSYmc2UocikmJihsW2NdPSh1PWE9bz12b2lkIDAsYT0oaT1yKS5vd25lckRvY3VtZW50LHM9aS5ub2RlTmFtZSwodT1jZVtzXSl8fChvPWEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpLHU9ay5jc3MobywiZGlzcGxheSIpLG8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSwibm9uZSI9PT11JiYodT0iYmxvY2siKSxjZVtzXT11KSkpKToibm9uZSIhPT1uJiYobFtjXT0ibm9uZSIsUS5zZXQociwiZGlzcGxheSIsbikpKTtmb3IoYz0wO2M8ZjtjKyspbnVsbCE9bFtjXSYmKGVbY10uc3R5bGUuZGlzcGxheT1sW2NdKTtyZXR1cm4gZX1rLmZuLmV4dGVuZCh7c2hvdzpmdW5jdGlvbigpe3JldHVybiBmZSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBmZSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGUpe3JldHVybiJib29sZWFuIj09dHlwZW9mIGU/ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtzZSh0aGlzKT9rKHRoaXMpLnNob3coKTprKHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBwZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxkZT0vPChbYS16XVteXC9cMD5ceDIwXHRcclxuXGZdKikvaSxoZT0vXiR8Xm1vZHVsZSR8XC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksZ2U9e29wdGlvbjpbMSwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPiIsIjwvc2VsZWN0PiJdLHRoZWFkOlsxLCI8dGFibGU+IiwiPC90YWJsZT4iXSxjb2w6WzIsIjx0YWJsZT48Y29sZ3JvdXA+IiwiPC9jb2xncm91cD48L3RhYmxlPiJdLHRyOlsyLCI8dGFibGU+PHRib2R5PiIsIjwvdGJvZHk+PC90YWJsZT4iXSx0ZDpbMywiPHRhYmxlPjx0Ym9keT48dHI+IiwiPC90cj48L3Rib2R5PjwvdGFibGU+Il0sX2RlZmF1bHQ6WzAsIiIsIiJdfTtmdW5jdGlvbiB2ZShlLHQpe3ZhciBuO3JldHVybiBuPSJ1bmRlZmluZWQiIT10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZT9lLmdldEVsZW1lbnRzQnlUYWdOYW1lKHR8fCIqIik6InVuZGVmaW5lZCIhPXR5cGVvZiBlLnF1ZXJ5U2VsZWN0b3JBbGw/ZS5xdWVyeVNlbGVjdG9yQWxsKHR8fCIqIik6W10sdm9pZCAwPT09dHx8dCYmQShlLHQpP2subWVyZ2UoW2VdLG4pOm59ZnVuY3Rpb24geWUoZSx0KXtmb3IodmFyIG49MCxyPWUubGVuZ3RoO248cjtuKyspUS5zZXQoZVtuXSwiZ2xvYmFsRXZhbCIsIXR8fFEuZ2V0KHRbbl0sImdsb2JhbEV2YWwiKSl9Z2Uub3B0Z3JvdXA9Z2Uub3B0aW9uLGdlLnRib2R5PWdlLnRmb290PWdlLmNvbGdyb3VwPWdlLmNhcHRpb249Z2UudGhlYWQsZ2UudGg9Z2UudGQ7dmFyIG1lLHhlLGJlPS88fCYjP1x3KzsvO2Z1bmN0aW9uIHdlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoIm9iamVjdCI9PT13KG8pKWsubWVyZ2UocCxvLm5vZGVUeXBlP1tvXTpvKTtlbHNlIGlmKGJlLnRlc3Qobykpe2E9YXx8Zi5hcHBlbmRDaGlsZCh0LmNyZWF0ZUVsZW1lbnQoImRpdiIpKSxzPShkZS5leGVjKG8pfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpLHU9Z2Vbc118fGdlLl9kZWZhdWx0LGEuaW5uZXJIVE1MPXVbMV0ray5odG1sUHJlZmlsdGVyKG8pK3VbMl0sYz11WzBdO3doaWxlKGMtLSlhPWEubGFzdENoaWxkO2subWVyZ2UocCxhLmNoaWxkTm9kZXMpLChhPWYuZmlyc3RDaGlsZCkudGV4dENvbnRlbnQ9IiJ9ZWxzZSBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7Zi50ZXh0Q29udGVudD0iIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmLTE8ay5pbkFycmF5KG8scikpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD1vZShvKSxhPXZlKGYuYXBwZW5kQ2hpbGQobyksInNjcmlwdCIpLGwmJnllKGEpLG4pe2M9MDt3aGlsZShvPWFbYysrXSloZS50ZXN0KG8udHlwZXx8IiIpJiZuLnB1c2gobyl9cmV0dXJuIGZ9bWU9RS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KCJkaXYiKSksKHhlPUUuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSkuc2V0QXR0cmlidXRlKCJ0eXBlIiwicmFkaW8iKSx4ZS5zZXRBdHRyaWJ1dGUoImNoZWNrZWQiLCJjaGVja2VkIikseGUuc2V0QXR0cmlidXRlKCJuYW1lIiwidCIpLG1lLmFwcGVuZENoaWxkKHhlKSx5LmNoZWNrQ2xvbmU9bWUuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLG1lLmlubmVySFRNTD0iPHRleHRhcmVhPng8L3RleHRhcmVhPiIseS5ub0Nsb25lQ2hlY2tlZD0hIW1lLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTt2YXIgVGU9L15rZXkvLENlPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxFZT0vXihbXi5dKikoPzpcLiguKyl8KS87ZnVuY3Rpb24ga2UoKXtyZXR1cm4hMH1mdW5jdGlvbiBTZSgpe3JldHVybiExfWZ1bmN0aW9uIE5lKGUsdCl7cmV0dXJuIGU9PT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gRS5hY3RpdmVFbGVtZW50fWNhdGNoKGUpe319KCk9PSgiZm9jdXMiPT09dCl9ZnVuY3Rpb24gQWUoZSx0LG4scixpLG8pe3ZhciBhLHM7aWYoIm9iamVjdCI9PXR5cGVvZiB0KXtmb3IocyBpbiJzdHJpbmciIT10eXBlb2YgbiYmKHI9cnx8bixuPXZvaWQgMCksdClBZShlLHMsbixyLHRbc10sbyk7cmV0dXJuIGV9aWYobnVsbD09ciYmbnVsbD09aT8oaT1uLHI9bj12b2lkIDApOm51bGw9PWkmJigic3RyaW5nIj09dHlwZW9mIG4/KGk9cixyPXZvaWQgMCk6KGk9cixyPW4sbj12b2lkIDApKSwhMT09PWkpaT1TZTtlbHNlIGlmKCFpKXJldHVybiBlO3JldHVybiAxPT09byYmKGE9aSwoaT1mdW5jdGlvbihlKXtyZXR1cm4gaygpLm9mZihlKSxhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLmd1aWQ9YS5ndWlkfHwoYS5ndWlkPWsuZ3VpZCsrKSksZS5lYWNoKGZ1bmN0aW9uKCl7ay5ldmVudC5hZGQodGhpcyx0LGkscixuKX0pfWZ1bmN0aW9uIERlKGUsaSxvKXtvPyhRLnNldChlLGksITEpLGsuZXZlbnQuYWRkKGUsaSx7bmFtZXNwYWNlOiExLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPVEuZ2V0KHRoaXMsaSk7aWYoMSZlLmlzVHJpZ2dlciYmdGhpc1tpXSl7aWYoci5sZW5ndGgpKGsuZXZlbnQuc3BlY2lhbFtpXXx8e30pLmRlbGVnYXRlVHlwZSYmZS5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKHI9cy5jYWxsKGFyZ3VtZW50cyksUS5zZXQodGhpcyxpLHIpLHQ9byh0aGlzLGkpLHRoaXNbaV0oKSxyIT09KG49US5nZXQodGhpcyxpKSl8fHQ/US5zZXQodGhpcyxpLCExKTpuPXt9LHIhPT1uKXJldHVybiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUucHJldmVudERlZmF1bHQoKSxuLnZhbHVlfWVsc2Ugci5sZW5ndGgmJihRLnNldCh0aGlzLGkse3ZhbHVlOmsuZXZlbnQudHJpZ2dlcihrLmV4dGVuZChyWzBdLGsuRXZlbnQucHJvdG90eXBlKSxyLnNsaWNlKDEpLHRoaXMpfSksZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSl9fSkpOnZvaWQgMD09PVEuZ2V0KGUsaSkmJmsuZXZlbnQuYWRkKGUsaSxrZSl9ay5ldmVudD17Z2xvYmFsOnt9LGFkZDpmdW5jdGlvbih0LGUsbixyLGkpe3ZhciBvLGEscyx1LGwsYyxmLHAsZCxoLGcsdj1RLmdldCh0KTtpZih2KXtuLmhhbmRsZXImJihuPShvPW4pLmhhbmRsZXIsaT1vLnNlbGVjdG9yKSxpJiZrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGllLGkpLG4uZ3VpZHx8KG4uZ3VpZD1rLmd1aWQrKyksKHU9di5ldmVudHMpfHwodT12LmV2ZW50cz17fSksKGE9di5oYW5kbGUpfHwoYT12LmhhbmRsZT1mdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIGsmJmsuZXZlbnQudHJpZ2dlcmVkIT09ZS50eXBlP2suZXZlbnQuZGlzcGF0Y2guYXBwbHkodCxhcmd1bWVudHMpOnZvaWQgMH0pLGw9KGU9KGV8fCIiKS5tYXRjaChSKXx8WyIiXSkubGVuZ3RoO3doaWxlKGwtLSlkPWc9KHM9RWUuZXhlYyhlW2xdKXx8W10pWzFdLGg9KHNbMl18fCIiKS5zcGxpdCgiLiIpLnNvcnQoKSxkJiYoZj1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LGQ9KGk/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGQsZj1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LGM9ay5leHRlbmQoe3R5cGU6ZCxvcmlnVHlwZTpnLGRhdGE6cixoYW5kbGVyOm4sZ3VpZDpuLmd1aWQsc2VsZWN0b3I6aSxuZWVkc0NvbnRleHQ6aSYmay5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGkpLG5hbWVzcGFjZTpoLmpvaW4oIi4iKX0sbyksKHA9dVtkXSl8fCgocD11W2RdPVtdKS5kZWxlZ2F0ZUNvdW50PTAsZi5zZXR1cCYmITEhPT1mLnNldHVwLmNhbGwodCxyLGgsYSl8fHQuYWRkRXZlbnRMaXN0ZW5lciYmdC5hZGRFdmVudExpc3RlbmVyKGQsYSkpLGYuYWRkJiYoZi5hZGQuY2FsbCh0LGMpLGMuaGFuZGxlci5ndWlkfHwoYy5oYW5kbGVyLmd1aWQ9bi5ndWlkKSksaT9wLnNwbGljZShwLmRlbGVnYXRlQ291bnQrKywwLGMpOnAucHVzaChjKSxrLmV2ZW50Lmdsb2JhbFtkXT0hMCl9fSxyZW1vdmU6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHY9US5oYXNEYXRhKGUpJiZRLmdldChlKTtpZih2JiYodT12LmV2ZW50cykpe2w9KHQ9KHR8fCIiKS5tYXRjaChSKXx8WyIiXSkubGVuZ3RoO3doaWxlKGwtLSlpZihkPWc9KHM9RWUuZXhlYyh0W2xdKXx8W10pWzFdLGg9KHNbMl18fCIiKS5zcGxpdCgiLiIpLnNvcnQoKSxkKXtmPWsuZXZlbnQuc3BlY2lhbFtkXXx8e30scD11W2Q9KHI/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGRdfHxbXSxzPXNbMl0mJm5ldyBSZWdFeHAoIihefFxcLikiK2guam9pbigiXFwuKD86LipcXC58KSIpKyIoXFwufCQpIiksYT1vPXAubGVuZ3RoO3doaWxlKG8tLSljPXBbb10sIWkmJmchPT1jLm9yaWdUeXBlfHxuJiZuLmd1aWQhPT1jLmd1aWR8fHMmJiFzLnRlc3QoYy5uYW1lc3BhY2UpfHxyJiZyIT09Yy5zZWxlY3RvciYmKCIqKiIhPT1yfHwhYy5zZWxlY3Rvcil8fChwLnNwbGljZShvLDEpLGMuc2VsZWN0b3ImJnAuZGVsZWdhdGVDb3VudC0tLGYucmVtb3ZlJiZmLnJlbW92ZS5jYWxsKGUsYykpO2EmJiFwLmxlbmd0aCYmKGYudGVhcmRvd24mJiExIT09Zi50ZWFyZG93bi5jYWxsKGUsaCx2LmhhbmRsZSl8fGsucmVtb3ZlRXZlbnQoZSxkLHYuaGFuZGxlKSxkZWxldGUgdVtkXSl9ZWxzZSBmb3IoZCBpbiB1KWsuZXZlbnQucmVtb3ZlKGUsZCt0W2xdLG4sciwhMCk7ay5pc0VtcHR5T2JqZWN0KHUpJiZRLnJlbW92ZShlLCJoYW5kbGUgZXZlbnRzIil9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGEscz1rLmV2ZW50LmZpeChlKSx1PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxsPShRLmdldCh0aGlzLCJldmVudHMiKXx8e30pW3MudHlwZV18fFtdLGM9ay5ldmVudC5zcGVjaWFsW3MudHlwZV18fHt9O2Zvcih1WzBdPXMsdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspdVt0XT1hcmd1bWVudHNbdF07aWYocy5kZWxlZ2F0ZVRhcmdldD10aGlzLCFjLnByZURpc3BhdGNofHwhMSE9PWMucHJlRGlzcGF0Y2guY2FsbCh0aGlzLHMpKXthPWsuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLHMsbCksdD0wO3doaWxlKChpPWFbdCsrXSkmJiFzLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe3MuY3VycmVudFRhcmdldD1pLmVsZW0sbj0wO3doaWxlKChvPWkuaGFuZGxlcnNbbisrXSkmJiFzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpcy5ybmFtZXNwYWNlJiYhMSE9PW8ubmFtZXNwYWNlJiYhcy5ybmFtZXNwYWNlLnRlc3Qoby5uYW1lc3BhY2UpfHwocy5oYW5kbGVPYmo9byxzLmRhdGE9by5kYXRhLHZvaWQgMCE9PShyPSgoay5ldmVudC5zcGVjaWFsW28ub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSx1KSkmJiExPT09KHMucmVzdWx0PXIpJiYocy5wcmV2ZW50RGVmYXVsdCgpLHMuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gYy5wb3N0RGlzcGF0Y2gmJmMucG9zdERpc3BhdGNoLmNhbGwodGhpcyxzKSxzLnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzPVtdLHU9dC5kZWxlZ2F0ZUNvdW50LGw9ZS50YXJnZXQ7aWYodSYmbC5ub2RlVHlwZSYmISgiY2xpY2siPT09ZS50eXBlJiYxPD1lLmJ1dHRvbikpZm9yKDtsIT09dGhpcztsPWwucGFyZW50Tm9kZXx8dGhpcylpZigxPT09bC5ub2RlVHlwZSYmKCJjbGljayIhPT1lLnR5cGV8fCEwIT09bC5kaXNhYmxlZCkpe2ZvcihvPVtdLGE9e30sbj0wO248dTtuKyspdm9pZCAwPT09YVtpPShyPXRbbl0pLnNlbGVjdG9yKyIgIl0mJihhW2ldPXIubmVlZHNDb250ZXh0Py0xPGsoaSx0aGlzKS5pbmRleChsKTprLmZpbmQoaSx0aGlzLG51bGwsW2xdKS5sZW5ndGgpLGFbaV0mJm8ucHVzaChyKTtvLmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6b30pfXJldHVybiBsPXRoaXMsdTx0Lmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6dC5zbGljZSh1KX0pLHN9LGFkZFByb3A6ZnVuY3Rpb24odCxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoay5FdmVudC5wcm90b3R5cGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0Om0oZSk/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGUodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XX0sc2V0OmZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX19KX0sZml4OmZ1bmN0aW9uKGUpe3JldHVybiBlW2suZXhwYW5kb10/ZTpuZXcgay5FdmVudChlKX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGNsaWNrOntzZXR1cDpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmRGUodCwiY2xpY2siLGtlKSwhMX0sdHJpZ2dlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmRGUodCwiY2xpY2siKSwhMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7cmV0dXJuIHBlLnRlc3QodC50eXBlKSYmdC5jbGljayYmQSh0LCJpbnB1dCIpJiZRLmdldCh0LCJjbGljayIpfHxBKHQsImEiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSxrLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSxrLkV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoISh0aGlzIGluc3RhbmNlb2Ygay5FdmVudCkpcmV0dXJuIG5ldyBrLkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/a2U6U2UsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmay5leHRlbmQodGhpcyx0KSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKSx0aGlzW2suZXhwYW5kb109ITB9LGsuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjprLkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDpTZSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpTZSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpTZSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1rZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1rZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9a2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LGsuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCwiY2hhciI6ITAsY29kZTohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihlKXt2YXIgdD1lLmJ1dHRvbjtyZXR1cm4gbnVsbD09ZS53aGljaCYmVGUudGVzdChlLnR5cGUpP251bGwhPWUuY2hhckNvZGU/ZS5jaGFyQ29kZTplLmtleUNvZGU6IWUud2hpY2gmJnZvaWQgMCE9PXQmJkNlLnRlc3QoZS50eXBlKT8xJnQ/MToyJnQ/Mzo0JnQ/MjowOmUud2hpY2h9fSxrLmV2ZW50LmFkZFByb3ApLGsuZWFjaCh7Zm9jdXM6ImZvY3VzaW4iLGJsdXI6ImZvY3Vzb3V0In0sZnVuY3Rpb24oZSx0KXtrLmV2ZW50LnNwZWNpYWxbZV09e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIERlKHRoaXMsZSxOZSksITF9LHRyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gRGUodGhpcyxlKSwhMH0sZGVsZWdhdGVUeXBlOnR9fSksay5lYWNoKHttb3VzZWVudGVyOiJtb3VzZW92ZXIiLG1vdXNlbGVhdmU6Im1vdXNlb3V0Iixwb2ludGVyZW50ZXI6InBvaW50ZXJvdmVyIixwb2ludGVybGVhdmU6InBvaW50ZXJvdXQifSxmdW5jdGlvbihlLGkpe2suZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOmksYmluZFR5cGU6aSxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLnJlbGF0ZWRUYXJnZXQscj1lLmhhbmRsZU9iajtyZXR1cm4gbiYmKG49PT10aGlzfHxrLmNvbnRhaW5zKHRoaXMsbikpfHwoZS50eXBlPXIub3JpZ1R5cGUsdD1yLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGUudHlwZT1pKSx0fX19KSxrLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIEFlKHRoaXMsZSx0LG4scil9LG9uZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gQWUodGhpcyxlLHQsbixyLDEpfSxvZmY6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk7aWYoZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5oYW5kbGVPYmopcmV0dXJuIHI9ZS5oYW5kbGVPYmosayhlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoci5uYW1lc3BhY2U/ci5vcmlnVHlwZSsiLiIrci5uYW1lc3BhY2U6ci5vcmlnVHlwZSxyLnNlbGVjdG9yLHIuaGFuZGxlciksdGhpcztpZigib2JqZWN0Ij09dHlwZW9mIGUpe2ZvcihpIGluIGUpdGhpcy5vZmYoaSx0LGVbaV0pO3JldHVybiB0aGlzfXJldHVybiExIT09dCYmImZ1bmN0aW9uIiE9dHlwZW9mIHR8fChuPXQsdD12b2lkIDApLCExPT09biYmKG49U2UpLHRoaXMuZWFjaChmdW5jdGlvbigpe2suZXZlbnQucmVtb3ZlKHRoaXMsZSxuLHQpfSl9fSk7dmFyIGplPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cL1wwPlx4MjBcdFxyXG5cZl0qKVtePl0qKVwvPi9naSxxZT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxMZT0vY2hlY2tlZFxzKig/OltePV18PVxzKi5jaGVja2VkLikvaSxIZT0vXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2c7ZnVuY3Rpb24gT2UoZSx0KXtyZXR1cm4gQShlLCJ0YWJsZSIpJiZBKDExIT09dC5ub2RlVHlwZT90OnQuZmlyc3RDaGlsZCwidHIiKSYmayhlKS5jaGlsZHJlbigidGJvZHkiKVswXXx8ZX1mdW5jdGlvbiBQZShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSkrIi8iK2UudHlwZSxlfWZ1bmN0aW9uIFJlKGUpe3JldHVybiJ0cnVlLyI9PT0oZS50eXBlfHwiIikuc2xpY2UoMCw1KT9lLnR5cGU9ZS50eXBlLnNsaWNlKDUpOmUucmVtb3ZlQXR0cmlidXRlKCJ0eXBlIiksZX1mdW5jdGlvbiBNZShlLHQpe3ZhciBuLHIsaSxvLGEscyx1LGw7aWYoMT09PXQubm9kZVR5cGUpe2lmKFEuaGFzRGF0YShlKSYmKG89US5hY2Nlc3MoZSksYT1RLnNldCh0LG8pLGw9by5ldmVudHMpKWZvcihpIGluIGRlbGV0ZSBhLmhhbmRsZSxhLmV2ZW50cz17fSxsKWZvcihuPTAscj1sW2ldLmxlbmd0aDtuPHI7bisrKWsuZXZlbnQuYWRkKHQsaSxsW2ldW25dKTtKLmhhc0RhdGEoZSkmJihzPUouYWNjZXNzKGUpLHU9ay5leHRlbmQoe30scyksSi5zZXQodCx1KSl9fWZ1bmN0aW9uIEllKG4scixpLG8pe3I9Zy5hcHBseShbXSxyKTt2YXIgZSx0LGEscyx1LGwsYz0wLGY9bi5sZW5ndGgscD1mLTEsZD1yWzBdLGg9bShkKTtpZihofHwxPGYmJiJzdHJpbmciPT10eXBlb2YgZCYmIXkuY2hlY2tDbG9uZSYmTGUudGVzdChkKSlyZXR1cm4gbi5lYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uZXEoZSk7aCYmKHJbMF09ZC5jYWxsKHRoaXMsZSx0Lmh0bWwoKSkpLEllKHQscixpLG8pfSk7aWYoZiYmKHQ9KGU9d2UocixuWzBdLm93bmVyRG9jdW1lbnQsITEsbixvKSkuZmlyc3RDaGlsZCwxPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmKGU9dCksdHx8bykpe2ZvcihzPShhPWsubWFwKHZlKGUsInNjcmlwdCIpLFBlKSkubGVuZ3RoO2M8ZjtjKyspdT1lLGMhPT1wJiYodT1rLmNsb25lKHUsITAsITApLHMmJmsubWVyZ2UoYSx2ZSh1LCJzY3JpcHQiKSkpLGkuY2FsbChuW2NdLHUsYyk7aWYocylmb3IobD1hW2EubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsay5tYXAoYSxSZSksYz0wO2M8cztjKyspdT1hW2NdLGhlLnRlc3QodS50eXBlfHwiIikmJiFRLmFjY2Vzcyh1LCJnbG9iYWxFdmFsIikmJmsuY29udGFpbnMobCx1KSYmKHUuc3JjJiYibW9kdWxlIiE9PSh1LnR5cGV8fCIiKS50b0xvd2VyQ2FzZSgpP2suX2V2YWxVcmwmJiF1Lm5vTW9kdWxlJiZrLl9ldmFsVXJsKHUuc3JjLHtub25jZTp1Lm5vbmNlfHx1LmdldEF0dHJpYnV0ZSgibm9uY2UiKX0pOmIodS50ZXh0Q29udGVudC5yZXBsYWNlKEhlLCIiKSx1LGwpKX1yZXR1cm4gbn1mdW5jdGlvbiBXZShlLHQsbil7Zm9yKHZhciByLGk9dD9rLmZpbHRlcih0LGUpOmUsbz0wO251bGwhPShyPWlbb10pO28rKylufHwxIT09ci5ub2RlVHlwZXx8ay5jbGVhbkRhdGEodmUocikpLHIucGFyZW50Tm9kZSYmKG4mJm9lKHIpJiZ5ZSh2ZShyLCJzY3JpcHQiKSksci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpKTtyZXR1cm4gZX1rLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKGplLCI8JDE+PC8kMj4iKX0sY2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGM9ZS5jbG9uZU5vZGUoITApLGY9b2UoZSk7aWYoISh5Lm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHxrLmlzWE1MRG9jKGUpKSlmb3IoYT12ZShjKSxyPTAsaT0obz12ZShlKSkubGVuZ3RoO3I8aTtyKyspcz1vW3JdLHU9YVtyXSx2b2lkIDAsImlucHV0Ij09PShsPXUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkmJnBlLnRlc3Qocy50eXBlKT91LmNoZWNrZWQ9cy5jaGVja2VkOiJpbnB1dCIhPT1sJiYidGV4dGFyZWEiIT09bHx8KHUuZGVmYXVsdFZhbHVlPXMuZGVmYXVsdFZhbHVlKTtpZih0KWlmKG4pZm9yKG89b3x8dmUoZSksYT1hfHx2ZShjKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKU1lKG9bcl0sYVtyXSk7ZWxzZSBNZShlLGMpO3JldHVybiAwPChhPXZlKGMsInNjcmlwdCIpKS5sZW5ndGgmJnllKGEsIWYmJnZlKGUsInNjcmlwdCIpKSxjfSxjbGVhbkRhdGE6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scixpPWsuZXZlbnQuc3BlY2lhbCxvPTA7dm9pZCAwIT09KG49ZVtvXSk7bysrKWlmKEcobikpe2lmKHQ9bltRLmV4cGFuZG9dKXtpZih0LmV2ZW50cylmb3IociBpbiB0LmV2ZW50cylpW3JdP2suZXZlbnQucmVtb3ZlKG4scik6ay5yZW1vdmVFdmVudChuLHIsdC5oYW5kbGUpO25bUS5leHBhbmRvXT12b2lkIDB9bltKLmV4cGFuZG9dJiYobltKLmV4cGFuZG9dPXZvaWQgMCl9fX0pLGsuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIFdlKHRoaXMsZSwhMCl9LHJlbW92ZTpmdW5jdGlvbihlKXtyZXR1cm4gV2UodGhpcyxlKX0sdGV4dDpmdW5jdGlvbihlKXtyZXR1cm4gXyh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP2sudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1lKX0pfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8T2UodGhpcyxlKS5hcHBlbmRDaGlsZChlKX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1PZSh0aGlzLGUpO3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDtudWxsIT0oZT10aGlzW3RdKTt0KyspMT09PWUubm9kZVR5cGUmJihrLmNsZWFuRGF0YSh2ZShlLCExKSksZS50ZXh0Q29udGVudD0iIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bnVsbCE9ZSYmZSx0PW51bGw9PXQ/ZTp0LHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIGsuY2xvbmUodGhpcyxlLHQpfSl9LGh0bWw6ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlKXt2YXIgdD10aGlzWzBdfHx7fSxuPTAscj10aGlzLmxlbmd0aDtpZih2b2lkIDA9PT1lJiYxPT09dC5ub2RlVHlwZSlyZXR1cm4gdC5pbm5lckhUTUw7aWYoInN0cmluZyI9PXR5cGVvZiBlJiYhcWUudGVzdChlKSYmIWdlWyhkZS5leGVjKGUpfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7ZT1rLmh0bWxQcmVmaWx0ZXIoZSk7dHJ5e2Zvcig7bjxyO24rKykxPT09KHQ9dGhpc1tuXXx8e30pLm5vZGVUeXBlJiYoay5jbGVhbkRhdGEodmUodCwhMSkpLHQuaW5uZXJIVE1MPWUpO3Q9MH1jYXRjaChlKXt9fXQmJnRoaXMuZW1wdHkoKS5hcHBlbmQoZSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgbj1bXTtyZXR1cm4gSWUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJlbnROb2RlO2suaW5BcnJheSh0aGlzLG4pPDAmJihrLmNsZWFuRGF0YSh2ZSh0aGlzKSksdCYmdC5yZXBsYWNlQ2hpbGQoZSx0aGlzKSl9LG4pfX0pLGsuZWFjaCh7YXBwZW5kVG86ImFwcGVuZCIscHJlcGVuZFRvOiJwcmVwZW5kIixpbnNlcnRCZWZvcmU6ImJlZm9yZSIsaW5zZXJ0QWZ0ZXI6ImFmdGVyIixyZXBsYWNlQWxsOiJyZXBsYWNlV2l0aCJ9LGZ1bmN0aW9uKGUsYSl7ay5mbltlXT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1bXSxyPWsoZSksaT1yLmxlbmd0aC0xLG89MDtvPD1pO28rKyl0PW89PT1pP3RoaXM6dGhpcy5jbG9uZSghMCksayhyW29dKVthXSh0KSx1LmFwcGx5KG4sdC5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4pfX0pO3ZhciAkZT1uZXcgUmVnRXhwKCJeKCIrdGUrIikoPyFweClbYS16JV0rJCIsImkiKSxGZT1mdW5jdGlvbihlKXt2YXIgdD1lLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIHQmJnQub3BlbmVyfHwodD1DKSx0LmdldENvbXB1dGVkU3R5bGUoZSl9LEJlPW5ldyBSZWdFeHAocmUuam9pbigifCIpLCJpIik7ZnVuY3Rpb24gX2UoZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5zdHlsZTtyZXR1cm4obj1ufHxGZShlKSkmJigiIiE9PShhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSl8fG9lKGUpfHwoYT1rLnN0eWxlKGUsdCkpLCF5LnBpeGVsQm94U3R5bGVzKCkmJiRlLnRlc3QoYSkmJkJlLnRlc3QodCkmJihyPXMud2lkdGgsaT1zLm1pbldpZHRoLG89cy5tYXhXaWR0aCxzLm1pbldpZHRoPXMubWF4V2lkdGg9cy53aWR0aD1hLGE9bi53aWR0aCxzLndpZHRoPXIscy5taW5XaWR0aD1pLHMubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YSsiIjphfWZ1bmN0aW9uIHplKGUsdCl7cmV0dXJue2dldDpmdW5jdGlvbigpe2lmKCFlKCkpcmV0dXJuKHRoaXMuZ2V0PXQpLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtkZWxldGUgdGhpcy5nZXR9fX0hZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7aWYodSl7cy5zdHlsZS5jc3NUZXh0PSJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowIix1LnN0eWxlLmNzc1RleHQ9InBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSUiLGllLmFwcGVuZENoaWxkKHMpLmFwcGVuZENoaWxkKHUpO3ZhciBlPUMuZ2V0Q29tcHV0ZWRTdHlsZSh1KTtuPSIxJSIhPT1lLnRvcCxhPTEyPT09dChlLm1hcmdpbkxlZnQpLHUuc3R5bGUucmlnaHQ9IjYwJSIsbz0zNj09PXQoZS5yaWdodCkscj0zNj09PXQoZS53aWR0aCksdS5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGk9MTI9PT10KHUub2Zmc2V0V2lkdGgvMyksaWUucmVtb3ZlQ2hpbGQocyksdT1udWxsfX1mdW5jdGlvbiB0KGUpe3JldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpfXZhciBuLHIsaSxvLGEscz1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpLHU9RS5jcmVhdGVFbGVtZW50KCJkaXYiKTt1LnN0eWxlJiYodS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD0iY29udGVudC1ib3giLHUuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD0iIix5LmNsZWFyQ2xvbmVTdHlsZT0iY29udGVudC1ib3giPT09dS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxrLmV4dGVuZCh5LHtib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBlKCkscn0scGl4ZWxCb3hTdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLG99LHBpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLG59LHJlbGlhYmxlTWFyZ2luTGVmdDpmdW5jdGlvbigpe3JldHVybiBlKCksYX0sc2Nyb2xsYm94U2l6ZTpmdW5jdGlvbigpe3JldHVybiBlKCksaX19KSl9KCk7dmFyIFVlPVsiV2Via2l0IiwiTW96IiwibXMiXSxYZT1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpLnN0eWxlLFZlPXt9O2Z1bmN0aW9uIEdlKGUpe3ZhciB0PWsuY3NzUHJvcHNbZV18fFZlW2VdO3JldHVybiB0fHwoZSBpbiBYZT9lOlZlW2VdPWZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49VWUubGVuZ3RoO3doaWxlKG4tLSlpZigoZT1VZVtuXSt0KWluIFhlKXJldHVybiBlfShlKXx8ZSl9dmFyIFllPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxRZT0vXi0tLyxKZT17cG9zaXRpb246ImFic29sdXRlIix2aXNpYmlsaXR5OiJoaWRkZW4iLGRpc3BsYXk6ImJsb2NrIn0sS2U9e2xldHRlclNwYWNpbmc6IjAiLGZvbnRXZWlnaHQ6IjQwMCJ9O2Z1bmN0aW9uIFplKGUsdCxuKXt2YXIgcj1uZS5leGVjKHQpO3JldHVybiByP01hdGgubWF4KDAsclsyXS0obnx8MCkpKyhyWzNdfHwicHgiKTp0fWZ1bmN0aW9uIGV0KGUsdCxuLHIsaSxvKXt2YXIgYT0id2lkdGgiPT09dD8xOjAscz0wLHU9MDtpZihuPT09KHI/ImJvcmRlciI6ImNvbnRlbnQiKSlyZXR1cm4gMDtmb3IoO2E8NDthKz0yKSJtYXJnaW4iPT09biYmKHUrPWsuY3NzKGUsbityZVthXSwhMCxpKSkscj8oImNvbnRlbnQiPT09biYmKHUtPWsuY3NzKGUsInBhZGRpbmciK3JlW2FdLCEwLGkpKSwibWFyZ2luIiE9PW4mJih1LT1rLmNzcyhlLCJib3JkZXIiK3JlW2FdKyJXaWR0aCIsITAsaSkpKToodSs9ay5jc3MoZSwicGFkZGluZyIrcmVbYV0sITAsaSksInBhZGRpbmciIT09bj91Kz1rLmNzcyhlLCJib3JkZXIiK3JlW2FdKyJXaWR0aCIsITAsaSk6cys9ay5jc3MoZSwiYm9yZGVyIityZVthXSsiV2lkdGgiLCEwLGkpKTtyZXR1cm4hciYmMDw9byYmKHUrPU1hdGgubWF4KDAsTWF0aC5jZWlsKGVbIm9mZnNldCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLW8tdS1zLS41KSl8fDApLHV9ZnVuY3Rpb24gdHQoZSx0LG4pe3ZhciByPUZlKGUpLGk9KCF5LmJveFNpemluZ1JlbGlhYmxlKCl8fG4pJiYiYm9yZGVyLWJveCI9PT1rLmNzcyhlLCJib3hTaXppbmciLCExLHIpLG89aSxhPV9lKGUsdCxyKSxzPSJvZmZzZXQiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2lmKCRlLnRlc3QoYSkpe2lmKCFuKXJldHVybiBhO2E9ImF1dG8ifXJldHVybigheS5ib3hTaXppbmdSZWxpYWJsZSgpJiZpfHwiYXV0byI9PT1hfHwhcGFyc2VGbG9hdChhKSYmImlubGluZSI9PT1rLmNzcyhlLCJkaXNwbGF5IiwhMSxyKSkmJmUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJihpPSJib3JkZXItYm94Ij09PWsuY3NzKGUsImJveFNpemluZyIsITEsciksKG89cyBpbiBlKSYmKGE9ZVtzXSkpLChhPXBhcnNlRmxvYXQoYSl8fDApK2V0KGUsdCxufHwoaT8iYm9yZGVyIjoiY29udGVudCIpLG8scixhKSsicHgifWZ1bmN0aW9uIG50KGUsdCxuLHIsaSl7cmV0dXJuIG5ldyBudC5wcm90b3R5cGUuaW5pdChlLHQsbixyLGkpfWsuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49X2UoZSwib3BhY2l0eSIpO3JldHVybiIiPT09bj8iMSI6bn19fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsZ3JpZEFyZWE6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TdGFydDohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1N0YXJ0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e30sc3R5bGU6ZnVuY3Rpb24oZSx0LG4scil7aWYoZSYmMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiZlLnN0eWxlKXt2YXIgaSxvLGEscz1WKHQpLHU9UWUudGVzdCh0KSxsPWUuc3R5bGU7aWYodXx8KHQ9R2UocykpLGE9ay5jc3NIb29rc1t0XXx8ay5jc3NIb29rc1tzXSx2b2lkIDA9PT1uKXJldHVybiBhJiYiZ2V0ImluIGEmJnZvaWQgMCE9PShpPWEuZ2V0KGUsITEscikpP2k6bFt0XTsic3RyaW5nIj09PShvPXR5cGVvZiBuKSYmKGk9bmUuZXhlYyhuKSkmJmlbMV0mJihuPWxlKGUsdCxpKSxvPSJudW1iZXIiKSxudWxsIT1uJiZuPT1uJiYoIm51bWJlciIhPT1vfHx1fHwobis9aSYmaVszXXx8KGsuY3NzTnVtYmVyW3NdPyIiOiJweCIpKSx5LmNsZWFyQ2xvbmVTdHlsZXx8IiIhPT1ufHwwIT09dC5pbmRleE9mKCJiYWNrZ3JvdW5kIil8fChsW3RdPSJpbmhlcml0IiksYSYmInNldCJpbiBhJiZ2b2lkIDA9PT0obj1hLnNldChlLG4scikpfHwodT9sLnNldFByb3BlcnR5KHQsbik6bFt0XT1uKSl9fSxjc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9Vih0KTtyZXR1cm4gUWUudGVzdCh0KXx8KHQ9R2UocykpLChhPWsuY3NzSG9va3NbdF18fGsuY3NzSG9va3Nbc10pJiYiZ2V0ImluIGEmJihpPWEuZ2V0KGUsITAsbikpLHZvaWQgMD09PWkmJihpPV9lKGUsdCxyKSksIm5vcm1hbCI9PT1pJiZ0IGluIEtlJiYoaT1LZVt0XSksIiI9PT1ufHxuPyhvPXBhcnNlRmxvYXQoaSksITA9PT1ufHxpc0Zpbml0ZShvKT9vfHwwOmkpOml9fSksay5lYWNoKFsiaGVpZ2h0Iiwid2lkdGgiXSxmdW5jdGlvbihlLHUpe2suY3NzSG9va3NbdV09e2dldDpmdW5jdGlvbihlLHQsbil7aWYodClyZXR1cm4hWWUudGVzdChrLmNzcyhlLCJkaXNwbGF5IikpfHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiZlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoP3R0KGUsdSxuKTp1ZShlLEplLGZ1bmN0aW9uKCl7cmV0dXJuIHR0KGUsdSxuKX0pfSxzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9RmUoZSksbz0heS5zY3JvbGxib3hTaXplKCkmJiJhYnNvbHV0ZSI9PT1pLnBvc2l0aW9uLGE9KG98fG4pJiYiYm9yZGVyLWJveCI9PT1rLmNzcyhlLCJib3hTaXppbmciLCExLGkpLHM9bj9ldChlLHUsbixhLGkpOjA7cmV0dXJuIGEmJm8mJihzLT1NYXRoLmNlaWwoZVsib2Zmc2V0Iit1WzBdLnRvVXBwZXJDYXNlKCkrdS5zbGljZSgxKV0tcGFyc2VGbG9hdChpW3VdKS1ldChlLHUsImJvcmRlciIsITEsaSktLjUpKSxzJiYocj1uZS5leGVjKHQpKSYmInB4IiE9PShyWzNdfHwicHgiKSYmKGUuc3R5bGVbdV09dCx0PWsuY3NzKGUsdSkpLFplKDAsdCxzKX19fSksay5jc3NIb29rcy5tYXJnaW5MZWZ0PXplKHkucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGUsdCl7aWYodClyZXR1cm4ocGFyc2VGbG9hdChfZShlLCJtYXJnaW5MZWZ0IikpfHxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtdWUoZSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrInB4In0pLGsuZWFjaCh7bWFyZ2luOiIiLHBhZGRpbmc6IiIsYm9yZGVyOiJXaWR0aCJ9LGZ1bmN0aW9uKGksbyl7ay5jc3NIb29rc1tpK29dPXtleHBhbmQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj17fSxyPSJzdHJpbmciPT10eXBlb2YgZT9lLnNwbGl0KCIgIik6W2VdO3Q8NDt0KyspbltpK3JlW3RdK29dPXJbdF18fHJbdC0yXXx8clswXTtyZXR1cm4gbn19LCJtYXJnaW4iIT09aSYmKGsuY3NzSG9va3NbaStvXS5zZXQ9WmUpfSksay5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihlLHQpe3JldHVybiBfKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz17fSxhPTA7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHI9RmUoZSksaT10Lmxlbmd0aDthPGk7YSsrKW9bdFthXV09ay5jc3MoZSx0W2FdLCExLHIpO3JldHVybiBvfXJldHVybiB2b2lkIDAhPT1uP2suc3R5bGUoZSx0LG4pOmsuY3NzKGUsdCl9LGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfX0pLCgoay5Ud2Vlbj1udCkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpudCxpbml0OmZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt0aGlzLmVsZW09ZSx0aGlzLnByb3A9bix0aGlzLmVhc2luZz1pfHxrLmVhc2luZy5fZGVmYXVsdCx0aGlzLm9wdGlvbnM9dCx0aGlzLnN0YXJ0PXRoaXMubm93PXRoaXMuY3VyKCksdGhpcy5lbmQ9cix0aGlzLnVuaXQ9b3x8KGsuY3NzTnVtYmVyW25dPyIiOiJweCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT1udC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6bnQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49bnQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PWsuZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPXQ9ZSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqdCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxuJiZuLnNldD9uLnNldCh0aGlzKTpudC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSkuaW5pdC5wcm90b3R5cGU9bnQucHJvdG90eXBlLChudC5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIDEhPT1lLmVsZW0ubm9kZVR5cGV8fG51bGwhPWUuZWxlbVtlLnByb3BdJiZudWxsPT1lLmVsZW0uc3R5bGVbZS5wcm9wXT9lLmVsZW1bZS5wcm9wXToodD1rLmNzcyhlLmVsZW0sZS5wcm9wLCIiKSkmJiJhdXRvIiE9PXQ/dDowfSxzZXQ6ZnVuY3Rpb24oZSl7ay5meC5zdGVwW2UucHJvcF0/ay5meC5zdGVwW2UucHJvcF0oZSk6MSE9PWUuZWxlbS5ub2RlVHlwZXx8IWsuY3NzSG9va3NbZS5wcm9wXSYmbnVsbD09ZS5lbGVtLnN0eWxlW0dlKGUucHJvcCldP2UuZWxlbVtlLnByb3BdPWUubm93Omsuc3R5bGUoZS5lbGVtLGUucHJvcCxlLm5vdytlLnVuaXQpfX19KS5zY3JvbGxUb3A9bnQucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihlKXtlLmVsZW0ubm9kZVR5cGUmJmUuZWxlbS5wYXJlbnROb2RlJiYoZS5lbGVtW2UucHJvcF09ZS5ub3cpfX0say5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yfSxfZGVmYXVsdDoic3dpbmcifSxrLmZ4PW50LnByb3RvdHlwZS5pbml0LGsuZnguc3RlcD17fTt2YXIgcnQsaXQsb3QsYXQsc3Q9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLHV0PS9xdWV1ZUhvb2tzJC87ZnVuY3Rpb24gbHQoKXtpdCYmKCExPT09RS5oaWRkZW4mJkMucmVxdWVzdEFuaW1hdGlvbkZyYW1lP0MucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGx0KTpDLnNldFRpbWVvdXQobHQsay5meC5pbnRlcnZhbCksay5meC50aWNrKCkpfWZ1bmN0aW9uIGN0KCl7cmV0dXJuIEMuc2V0VGltZW91dChmdW5jdGlvbigpe3J0PXZvaWQgMH0pLHJ0PURhdGUubm93KCl9ZnVuY3Rpb24gZnQoZSx0KXt2YXIgbixyPTAsaT17aGVpZ2h0OmV9O2Zvcih0PXQ/MTowO3I8NDtyKz0yLXQpaVsibWFyZ2luIisobj1yZVtyXSldPWlbInBhZGRpbmciK25dPWU7cmV0dXJuIHQmJihpLm9wYWNpdHk9aS53aWR0aD1lKSxpfWZ1bmN0aW9uIHB0KGUsdCxuKXtmb3IodmFyIHIsaT0oZHQudHdlZW5lcnNbdF18fFtdKS5jb25jYXQoZHQudHdlZW5lcnNbIioiXSksbz0wLGE9aS5sZW5ndGg7bzxhO28rKylpZihyPWlbb10uY2FsbChuLHQsZSkpcmV0dXJuIHJ9ZnVuY3Rpb24gZHQobyxlLHQpe3ZhciBuLGEscj0wLGk9ZHQucHJlZmlsdGVycy5sZW5ndGgscz1rLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIHUuZWxlbX0pLHU9ZnVuY3Rpb24oKXtpZihhKXJldHVybiExO2Zvcih2YXIgZT1ydHx8Y3QoKSx0PU1hdGgubWF4KDAsbC5zdGFydFRpbWUrbC5kdXJhdGlvbi1lKSxuPTEtKHQvbC5kdXJhdGlvbnx8MCkscj0wLGk9bC50d2VlbnMubGVuZ3RoO3I8aTtyKyspbC50d2VlbnNbcl0ucnVuKG4pO3JldHVybiBzLm5vdGlmeVdpdGgobyxbbCxuLHRdKSxuPDEmJmk/dDooaXx8cy5ub3RpZnlXaXRoKG8sW2wsMSwwXSkscy5yZXNvbHZlV2l0aChvLFtsXSksITEpfSxsPXMucHJvbWlzZSh7ZWxlbTpvLHByb3BzOmsuZXh0ZW5kKHt9LGUpLG9wdHM6ay5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOmsuZWFzaW5nLl9kZWZhdWx0fSx0KSxvcmlnaW5hbFByb3BlcnRpZXM6ZSxvcmlnaW5hbE9wdGlvbnM6dCxzdGFydFRpbWU6cnR8fGN0KCksZHVyYXRpb246dC5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oZSx0KXt2YXIgbj1rLlR3ZWVuKG8sbC5vcHRzLGUsdCxsLm9wdHMuc3BlY2lhbEVhc2luZ1tlXXx8bC5vcHRzLmVhc2luZyk7cmV0dXJuIGwudHdlZW5zLnB1c2gobiksbn0sc3RvcDpmdW5jdGlvbihlKXt2YXIgdD0wLG49ZT9sLnR3ZWVucy5sZW5ndGg6MDtpZihhKXJldHVybiB0aGlzO2ZvcihhPSEwO3Q8bjt0KyspbC50d2VlbnNbdF0ucnVuKDEpO3JldHVybiBlPyhzLm5vdGlmeVdpdGgobyxbbCwxLDBdKSxzLnJlc29sdmVXaXRoKG8sW2wsZV0pKTpzLnJlamVjdFdpdGgobyxbbCxlXSksdGhpc319KSxjPWwucHJvcHM7Zm9yKCFmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGE7Zm9yKG4gaW4gZSlpZihpPXRbcj1WKG4pXSxvPWVbbl0sQXJyYXkuaXNBcnJheShvKSYmKGk9b1sxXSxvPWVbbl09b1swXSksbiE9PXImJihlW3JdPW8sZGVsZXRlIGVbbl0pLChhPWsuY3NzSG9va3Nbcl0pJiYiZXhwYW5kImluIGEpZm9yKG4gaW4gbz1hLmV4cGFuZChvKSxkZWxldGUgZVtyXSxvKW4gaW4gZXx8KGVbbl09b1tuXSx0W25dPWkpO2Vsc2UgdFtyXT1pfShjLGwub3B0cy5zcGVjaWFsRWFzaW5nKTtyPGk7cisrKWlmKG49ZHQucHJlZmlsdGVyc1tyXS5jYWxsKGwsbyxjLGwub3B0cykpcmV0dXJuIG0obi5zdG9wKSYmKGsuX3F1ZXVlSG9va3MobC5lbGVtLGwub3B0cy5xdWV1ZSkuc3RvcD1uLnN0b3AuYmluZChuKSksbjtyZXR1cm4gay5tYXAoYyxwdCxsKSxtKGwub3B0cy5zdGFydCkmJmwub3B0cy5zdGFydC5jYWxsKG8sbCksbC5wcm9ncmVzcyhsLm9wdHMucHJvZ3Jlc3MpLmRvbmUobC5vcHRzLmRvbmUsbC5vcHRzLmNvbXBsZXRlKS5mYWlsKGwub3B0cy5mYWlsKS5hbHdheXMobC5vcHRzLmFsd2F5cyksay5meC50aW1lcihrLmV4dGVuZCh1LHtlbGVtOm8sYW5pbTpsLHF1ZXVlOmwub3B0cy5xdWV1ZX0pKSxsfWsuQW5pbWF0aW9uPWsuZXh0ZW5kKGR0LHt0d2VlbmVyczp7IioiOltmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuY3JlYXRlVHdlZW4oZSx0KTtyZXR1cm4gbGUobi5lbGVtLGUsbmUuZXhlYyh0KSxuKSxufV19LHR3ZWVuZXI6ZnVuY3Rpb24oZSx0KXttKGUpPyh0PWUsZT1bIioiXSk6ZT1lLm1hdGNoKFIpO2Zvcih2YXIgbixyPTAsaT1lLmxlbmd0aDtyPGk7cisrKW49ZVtyXSxkdC50d2VlbmVyc1tuXT1kdC50d2VlbmVyc1tuXXx8W10sZHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KX0scHJlZmlsdGVyczpbZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGMsZj0id2lkdGgiaW4gdHx8ImhlaWdodCJpbiB0LHA9dGhpcyxkPXt9LGg9ZS5zdHlsZSxnPWUubm9kZVR5cGUmJnNlKGUpLHY9US5nZXQoZSwiZnhzaG93Iik7Zm9yKHIgaW4gbi5xdWV1ZXx8KG51bGw9PShhPWsuX3F1ZXVlSG9va3MoZSwiZngiKSkudW5xdWV1ZWQmJihhLnVucXVldWVkPTAscz1hLmVtcHR5LmZpcmUsYS5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7YS51bnF1ZXVlZHx8cygpfSksYS51bnF1ZXVlZCsrLHAuYWx3YXlzKGZ1bmN0aW9uKCl7cC5hbHdheXMoZnVuY3Rpb24oKXthLnVucXVldWVkLS0say5xdWV1ZShlLCJmeCIpLmxlbmd0aHx8YS5lbXB0eS5maXJlKCl9KX0pKSx0KWlmKGk9dFtyXSxzdC50ZXN0KGkpKXtpZihkZWxldGUgdFtyXSxvPW98fCJ0b2dnbGUiPT09aSxpPT09KGc/ImhpZGUiOiJzaG93Iikpe2lmKCJzaG93IiE9PWl8fCF2fHx2b2lkIDA9PT12W3JdKWNvbnRpbnVlO2c9ITB9ZFtyXT12JiZ2W3JdfHxrLnN0eWxlKGUscil9aWYoKHU9IWsuaXNFbXB0eU9iamVjdCh0KSl8fCFrLmlzRW1wdHlPYmplY3QoZCkpZm9yKHIgaW4gZiYmMT09PWUubm9kZVR5cGUmJihuLm92ZXJmbG93PVtoLm92ZXJmbG93LGgub3ZlcmZsb3dYLGgub3ZlcmZsb3dZXSxudWxsPT0obD12JiZ2LmRpc3BsYXkpJiYobD1RLmdldChlLCJkaXNwbGF5IikpLCJub25lIj09PShjPWsuY3NzKGUsImRpc3BsYXkiKSkmJihsP2M9bDooZmUoW2VdLCEwKSxsPWUuc3R5bGUuZGlzcGxheXx8bCxjPWsuY3NzKGUsImRpc3BsYXkiKSxmZShbZV0pKSksKCJpbmxpbmUiPT09Y3x8ImlubGluZS1ibG9jayI9PT1jJiZudWxsIT1sKSYmIm5vbmUiPT09ay5jc3MoZSwiZmxvYXQiKSYmKHV8fChwLmRvbmUoZnVuY3Rpb24oKXtoLmRpc3BsYXk9bH0pLG51bGw9PWwmJihjPWguZGlzcGxheSxsPSJub25lIj09PWM/IiI6YykpLGguZGlzcGxheT0iaW5saW5lLWJsb2NrIikpLG4ub3ZlcmZsb3cmJihoLm92ZXJmbG93PSJoaWRkZW4iLHAuYWx3YXlzKGZ1bmN0aW9uKCl7aC5vdmVyZmxvdz1uLm92ZXJmbG93WzBdLGgub3ZlcmZsb3dYPW4ub3ZlcmZsb3dbMV0saC5vdmVyZmxvd1k9bi5vdmVyZmxvd1syXX0pKSx1PSExLGQpdXx8KHY/ImhpZGRlbiJpbiB2JiYoZz12LmhpZGRlbik6dj1RLmFjY2VzcyhlLCJmeHNob3ciLHtkaXNwbGF5Omx9KSxvJiYodi5oaWRkZW49IWcpLGcmJmZlKFtlXSwhMCkscC5kb25lKGZ1bmN0aW9uKCl7Zm9yKHIgaW4gZ3x8ZmUoW2VdKSxRLnJlbW92ZShlLCJmeHNob3ciKSxkKWsuc3R5bGUoZSxyLGRbcl0pfSkpLHU9cHQoZz92W3JdOjAscixwKSxyIGluIHZ8fCh2W3JdPXUuc3RhcnQsZyYmKHUuZW5kPXUuc3RhcnQsdS5zdGFydD0wKSl9XSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P2R0LnByZWZpbHRlcnMudW5zaGlmdChlKTpkdC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksay5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmIm9iamVjdCI9PXR5cGVvZiBlP2suZXh0ZW5kKHt9LGUpOntjb21wbGV0ZTpufHwhbiYmdHx8bShlKSYmZSxkdXJhdGlvbjplLGVhc2luZzpuJiZ0fHx0JiYhbSh0KSYmdH07cmV0dXJuIGsuZngub2ZmP3IuZHVyYXRpb249MDoibnVtYmVyIiE9dHlwZW9mIHIuZHVyYXRpb24mJihyLmR1cmF0aW9uIGluIGsuZnguc3BlZWRzP3IuZHVyYXRpb249ay5meC5zcGVlZHNbci5kdXJhdGlvbl06ci5kdXJhdGlvbj1rLmZ4LnNwZWVkcy5fZGVmYXVsdCksbnVsbCE9ci5xdWV1ZSYmITAhPT1yLnF1ZXVlfHwoci5xdWV1ZT0iZngiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXttKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZrLmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0say5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIoc2UpLmNzcygib3BhY2l0eSIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6dH0sZSxuLHIpfSxhbmltYXRlOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBpPWsuaXNFbXB0eU9iamVjdCh0KSxvPWsuc3BlZWQoZSxuLHIpLGE9ZnVuY3Rpb24oKXt2YXIgZT1kdCh0aGlzLGsuZXh0ZW5kKHt9LHQpLG8pOyhpfHxRLmdldCh0aGlzLCJmaW5pc2giKSkmJmUuc3RvcCghMCl9O3JldHVybiBhLmZpbmlzaD1hLGl8fCExPT09by5xdWV1ZT90aGlzLmVhY2goYSk6dGhpcy5xdWV1ZShvLnF1ZXVlLGEpfSxzdG9wOmZ1bmN0aW9uKGksZSxvKXt2YXIgYT1mdW5jdGlvbihlKXt2YXIgdD1lLnN0b3A7ZGVsZXRlIGUuc3RvcCx0KG8pfTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGkmJihvPWUsZT1pLGk9dm9pZCAwKSxlJiYhMSE9PWkmJnRoaXMucXVldWUoaXx8ImZ4IixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ITAsdD1udWxsIT1pJiZpKyJxdWV1ZUhvb2tzIixuPWsudGltZXJzLHI9US5nZXQodGhpcyk7aWYodClyW3RdJiZyW3RdLnN0b3AmJmEoclt0XSk7ZWxzZSBmb3IodCBpbiByKXJbdF0mJnJbdF0uc3RvcCYmdXQudGVzdCh0KSYmYShyW3RdKTtmb3IodD1uLmxlbmd0aDt0LS07KW5bdF0uZWxlbSE9PXRoaXN8fG51bGwhPWkmJm5bdF0ucXVldWUhPT1pfHwoblt0XS5hbmltLnN0b3AobyksZT0hMSxuLnNwbGljZSh0LDEpKTshZSYmb3x8ay5kZXF1ZXVlKHRoaXMsaSl9KX0sZmluaXNoOmZ1bmN0aW9uKGEpe3JldHVybiExIT09YSYmKGE9YXx8ImZ4IiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdD1RLmdldCh0aGlzKSxuPXRbYSsicXVldWUiXSxyPXRbYSsicXVldWVIb29rcyJdLGk9ay50aW1lcnMsbz1uP24ubGVuZ3RoOjA7Zm9yKHQuZmluaXNoPSEwLGsucXVldWUodGhpcyxhLFtdKSxyJiZyLnN0b3AmJnIuc3RvcC5jYWxsKHRoaXMsITApLGU9aS5sZW5ndGg7ZS0tOylpW2VdLmVsZW09PT10aGlzJiZpW2VdLnF1ZXVlPT09YSYmKGlbZV0uYW5pbS5zdG9wKCEwKSxpLnNwbGljZShlLDEpKTtmb3IoZT0wO2U8bztlKyspbltlXSYmbltlXS5maW5pc2gmJm5bZV0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIHQuZmluaXNofSl9fSksay5lYWNoKFsidG9nZ2xlIiwic2hvdyIsImhpZGUiXSxmdW5jdGlvbihlLHIpe3ZhciBpPWsuZm5bcl07ay5mbltyXT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PWV8fCJib29sZWFuIj09dHlwZW9mIGU/aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGZ0KHIsITApLGUsdCxuKX19KSxrLmVhY2goe3NsaWRlRG93bjpmdCgic2hvdyIpLHNsaWRlVXA6ZnQoImhpZGUiKSxzbGlkZVRvZ2dsZTpmdCgidG9nZ2xlIiksZmFkZUluOntvcGFjaXR5OiJzaG93In0sZmFkZU91dDp7b3BhY2l0eToiaGlkZSJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6InRvZ2dsZSJ9fSxmdW5jdGlvbihlLHIpe2suZm5bZV09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLmFuaW1hdGUocixlLHQsbil9fSksay50aW1lcnM9W10say5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49ay50aW1lcnM7Zm9yKHJ0PURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8ay5meC5zdG9wKCkscnQ9dm9pZCAwfSxrLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe2sudGltZXJzLnB1c2goZSksay5meC5zdGFydCgpfSxrLmZ4LmludGVydmFsPTEzLGsuZnguc3RhcnQ9ZnVuY3Rpb24oKXtpdHx8KGl0PSEwLGx0KCkpfSxrLmZ4LnN0b3A9ZnVuY3Rpb24oKXtpdD1udWxsfSxrLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxrLmZuLmRlbGF5PWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHI9ay5meCYmay5meC5zcGVlZHNbcl18fHIsZT1lfHwiZngiLHRoaXMucXVldWUoZSxmdW5jdGlvbihlLHQpe3ZhciBuPUMuc2V0VGltZW91dChlLHIpO3Quc3RvcD1mdW5jdGlvbigpe0MuY2xlYXJUaW1lb3V0KG4pfX0pfSxvdD1FLmNyZWF0ZUVsZW1lbnQoImlucHV0IiksYXQ9RS5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKS5hcHBlbmRDaGlsZChFLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKSxvdC50eXBlPSJjaGVja2JveCIseS5jaGVja09uPSIiIT09b3QudmFsdWUseS5vcHRTZWxlY3RlZD1hdC5zZWxlY3RlZCwob3Q9RS5jcmVhdGVFbGVtZW50KCJpbnB1dCIpKS52YWx1ZT0idCIsb3QudHlwZT0icmFkaW8iLHkucmFkaW9WYWx1ZT0idCI9PT1vdC52YWx1ZTt2YXIgaHQsZ3Q9ay5leHByLmF0dHJIYW5kbGU7ay5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gXyh0aGlzLGsuYXR0cixlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ay5yZW1vdmVBdHRyKHRoaXMsZSl9KX19KSxrLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4idW5kZWZpbmVkIj09dHlwZW9mIGUuZ2V0QXR0cmlidXRlP2sucHJvcChlLHQsbik6KDE9PT1vJiZrLmlzWE1MRG9jKGUpfHwoaT1rLmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldfHwoay5leHByLm1hdGNoLmJvb2wudGVzdCh0KT9odDp2b2lkIDApKSx2b2lkIDAhPT1uP251bGw9PT1uP3ZvaWQgay5yZW1vdmVBdHRyKGUsdCk6aSYmInNldCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6KGUuc2V0QXR0cmlidXRlKHQsbisiIiksbik6aSYmImdldCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjpudWxsPT0ocj1rLmZpbmQuYXR0cihlLHQpKT92b2lkIDA6cil9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGUsdCl7aWYoIXkucmFkaW9WYWx1ZSYmInJhZGlvIj09PXQmJkEoZSwiaW5wdXQiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoInR5cGUiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10JiZ0Lm1hdGNoKFIpO2lmKGkmJjE9PT1lLm5vZGVUeXBlKXdoaWxlKG49aVtyKytdKWUucmVtb3ZlQXR0cmlidXRlKG4pfX0pLGh0PXtzZXQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiExPT09dD9rLnJlbW92ZUF0dHIoZSxuKTplLnNldEF0dHJpYnV0ZShuLG4pLG59fSxrLmVhY2goay5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cdysvZyksZnVuY3Rpb24oZSx0KXt2YXIgYT1ndFt0XXx8ay5maW5kLmF0dHI7Z3RbdF09ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz10LnRvTG93ZXJDYXNlKCk7cmV0dXJuIG58fChpPWd0W29dLGd0W29dPXIscj1udWxsIT1hKGUsdCxuKT9vOm51bGwsZ3Rbb109aSkscn19KTt2YXIgdnQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSx5dD0vXig/OmF8YXJlYSkkL2k7ZnVuY3Rpb24gbXQoZSl7cmV0dXJuKGUubWF0Y2goUil8fFtdKS5qb2luKCIgIil9ZnVuY3Rpb24geHQoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiJ9ZnVuY3Rpb24gYnQoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZToic3RyaW5nIj09dHlwZW9mIGUmJmUubWF0Y2goUil8fFtdfWsuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIF8odGhpcyxrLnByb3AsZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW2sucHJvcEZpeFtlXXx8ZV19KX19KSxrLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4gMT09PW8mJmsuaXNYTUxEb2MoZSl8fCh0PWsucHJvcEZpeFt0XXx8dCxpPWsucHJvcEhvb2tzW3RdKSx2b2lkIDAhPT1uP2kmJiJzZXQiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOmVbdF09bjppJiYiZ2V0ImluIGkmJm51bGwhPT0ocj1pLmdldChlLHQpKT9yOmVbdF19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihlKXt2YXIgdD1rLmZpbmQuYXR0cihlLCJ0YWJpbmRleCIpO3JldHVybiB0P3BhcnNlSW50KHQsMTApOnZ0LnRlc3QoZS5ub2RlTmFtZSl8fHl0LnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOi0xfX19LHByb3BGaXg6eyJmb3IiOiJodG1sRm9yIiwiY2xhc3MiOiJjbGFzc05hbWUifX0pLHkub3B0U2VsZWN0ZWR8fChrLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksay5lYWNoKFsidGFiSW5kZXgiLCJyZWFkT25seSIsIm1heExlbmd0aCIsImNlbGxTcGFjaW5nIiwiY2VsbFBhZGRpbmciLCJyb3dTcGFuIiwiY29sU3BhbiIsInVzZU1hcCIsImZyYW1lQm9yZGVyIiwiY29udGVudEVkaXRhYmxlIl0sZnVuY3Rpb24oKXtrLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSksay5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLHU9MDtpZihtKHQpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS5hZGRDbGFzcyh0LmNhbGwodGhpcyxlLHh0KHRoaXMpKSl9KTtpZigoZT1idCh0KSkubGVuZ3RoKXdoaWxlKG49dGhpc1t1KytdKWlmKGk9eHQobikscj0xPT09bi5ub2RlVHlwZSYmIiAiK210KGkpKyIgIil7YT0wO3doaWxlKG89ZVthKytdKXIuaW5kZXhPZigiICIrbysiICIpPDAmJihyKz1vKyIgIik7aSE9PShzPW10KHIpKSYmbi5zZXRBdHRyaWJ1dGUoImNsYXNzIixzKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsdT0wO2lmKG0odCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLGUseHQodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoImNsYXNzIiwiIik7aWYoKGU9YnQodCkpLmxlbmd0aCl3aGlsZShuPXRoaXNbdSsrXSlpZihpPXh0KG4pLHI9MT09PW4ubm9kZVR5cGUmJiIgIittdChpKSsiICIpe2E9MDt3aGlsZShvPWVbYSsrXSl3aGlsZSgtMTxyLmluZGV4T2YoIiAiK28rIiAiKSlyPXIucmVwbGFjZSgiICIrbysiICIsIiAiKTtpIT09KHM9bXQocikpJiZuLnNldEF0dHJpYnV0ZSgiY2xhc3MiLHMpfXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihpLHQpe3ZhciBvPXR5cGVvZiBpLGE9InN0cmluZyI9PT1vfHxBcnJheS5pc0FycmF5KGkpO3JldHVybiJib29sZWFuIj09dHlwZW9mIHQmJmE/dD90aGlzLmFkZENsYXNzKGkpOnRoaXMucmVtb3ZlQ2xhc3MoaSk6bShpKT90aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS50b2dnbGVDbGFzcyhpLmNhbGwodGhpcyxlLHh0KHRoaXMpLHQpLHQpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7aWYoYSl7dD0wLG49ayh0aGlzKSxyPWJ0KGkpO3doaWxlKGU9clt0KytdKW4uaGFzQ2xhc3MoZSk/bi5yZW1vdmVDbGFzcyhlKTpuLmFkZENsYXNzKGUpfWVsc2Ugdm9pZCAwIT09aSYmImJvb2xlYW4iIT09b3x8KChlPXh0KHRoaXMpKSYmUS5zZXQodGhpcywiX19jbGFzc05hbWVfXyIsZSksdGhpcy5zZXRBdHRyaWJ1dGUmJnRoaXMuc2V0QXR0cmlidXRlKCJjbGFzcyIsZXx8ITE9PT1pPyIiOlEuZ2V0KHRoaXMsIl9fY2xhc3NOYW1lX18iKXx8IiIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHI9MDt0PSIgIitlKyIgIjt3aGlsZShuPXRoaXNbcisrXSlpZigxPT09bi5ub2RlVHlwZSYmLTE8KCIgIittdCh4dChuKSkrIiAiKS5pbmRleE9mKHQpKXJldHVybiEwO3JldHVybiExfX0pO3ZhciB3dD0vXHIvZztrLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKG4pe3ZhciByLGUsaSx0PXRoaXNbMF07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGk9bShuKSx0aGlzLmVhY2goZnVuY3Rpb24oZSl7dmFyIHQ7MT09PXRoaXMubm9kZVR5cGUmJihudWxsPT0odD1pP24uY2FsbCh0aGlzLGUsayh0aGlzKS52YWwoKSk6bik/dD0iIjoibnVtYmVyIj09dHlwZW9mIHQ/dCs9IiI6QXJyYXkuaXNBcnJheSh0KSYmKHQ9ay5tYXAodCxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjplKyIifSkpLChyPWsudmFsSG9va3NbdGhpcy50eXBlXXx8ay52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmInNldCJpbiByJiZ2b2lkIDAhPT1yLnNldCh0aGlzLHQsInZhbHVlIil8fCh0aGlzLnZhbHVlPXQpKX0pKTp0PyhyPWsudmFsSG9va3NbdC50eXBlXXx8ay52YWxIb29rc1t0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmImdldCJpbiByJiZ2b2lkIDAhPT0oZT1yLmdldCh0LCJ2YWx1ZSIpKT9lOiJzdHJpbmciPT10eXBlb2YoZT10LnZhbHVlKT9lLnJlcGxhY2Uod3QsIiIpOm51bGw9PWU/IiI6ZTp2b2lkIDB9fSksay5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1rLmZpbmQuYXR0cihlLCJ2YWx1ZSIpO3JldHVybiBudWxsIT10P3Q6bXQoay50ZXh0KGUpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPWUub3B0aW9ucyxvPWUuc2VsZWN0ZWRJbmRleCxhPSJzZWxlY3Qtb25lIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUEobi5wYXJlbnROb2RlLCJvcHRncm91cCIpKSl7aWYodD1rKG4pLnZhbCgpLGEpcmV0dXJuIHQ7cy5wdXNoKHQpfXJldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9ZS5vcHRpb25zLG89ay5tYWtlQXJyYXkodCksYT1pLmxlbmd0aDt3aGlsZShhLS0pKChyPWlbYV0pLnNlbGVjdGVkPS0xPGsuaW5BcnJheShrLnZhbEhvb2tzLm9wdGlvbi5nZXQociksbykpJiYobj0hMCk7cmV0dXJuIG58fChlLnNlbGVjdGVkSW5kZXg9LTEpLG99fX19KSxrLmVhY2goWyJyYWRpbyIsImNoZWNrYm94Il0sZnVuY3Rpb24oKXtrLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9LTE8ay5pbkFycmF5KGsoZSkudmFsKCksdCl9fSx5LmNoZWNrT258fChrLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpPyJvbiI6ZS52YWx1ZX0pfSkseS5mb2N1c2luPSJvbmZvY3VzaW4iaW4gQzt2YXIgVHQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLEN0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O2suZXh0ZW5kKGsuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGMsZixwPVtufHxFXSxkPXYuY2FsbChlLCJ0eXBlIik/ZS50eXBlOmUsaD12LmNhbGwoZSwibmFtZXNwYWNlIik/ZS5uYW1lc3BhY2Uuc3BsaXQoIi4iKTpbXTtpZihvPWY9YT1uPW58fEUsMyE9PW4ubm9kZVR5cGUmJjghPT1uLm5vZGVUeXBlJiYhVHQudGVzdChkK2suZXZlbnQudHJpZ2dlcmVkKSYmKC0xPGQuaW5kZXhPZigiLiIpJiYoZD0oaD1kLnNwbGl0KCIuIikpLnNoaWZ0KCksaC5zb3J0KCkpLHU9ZC5pbmRleE9mKCI6Iik8MCYmIm9uIitkLChlPWVbay5leHBhbmRvXT9lOm5ldyBrLkV2ZW50KGQsIm9iamVjdCI9PXR5cGVvZiBlJiZlKSkuaXNUcmlnZ2VyPXI/MjozLGUubmFtZXNwYWNlPWguam9pbigiLiIpLGUucm5hbWVzcGFjZT1lLm5hbWVzcGFjZT9uZXcgUmVnRXhwKCIoXnxcXC4pIitoLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpOm51bGwsZS5yZXN1bHQ9dm9pZCAwLGUudGFyZ2V0fHwoZS50YXJnZXQ9biksdD1udWxsPT10P1tlXTprLm1ha2VBcnJheSh0LFtlXSksYz1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LHJ8fCFjLnRyaWdnZXJ8fCExIT09Yy50cmlnZ2VyLmFwcGx5KG4sdCkpKXtpZighciYmIWMubm9CdWJibGUmJiF4KG4pKXtmb3Iocz1jLmRlbGVnYXRlVHlwZXx8ZCxUdC50ZXN0KHMrZCl8fChvPW8ucGFyZW50Tm9kZSk7bztvPW8ucGFyZW50Tm9kZSlwLnB1c2gobyksYT1vO2E9PT0obi5vd25lckRvY3VtZW50fHxFKSYmcC5wdXNoKGEuZGVmYXVsdFZpZXd8fGEucGFyZW50V2luZG93fHxDKX1pPTA7d2hpbGUoKG89cFtpKytdKSYmIWUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlmPW8sZS50eXBlPTE8aT9zOmMuYmluZFR5cGV8fGQsKGw9KFEuZ2V0KG8sImV2ZW50cyIpfHx7fSlbZS50eXBlXSYmUS5nZXQobywiaGFuZGxlIikpJiZsLmFwcGx5KG8sdCksKGw9dSYmb1t1XSkmJmwuYXBwbHkmJkcobykmJihlLnJlc3VsdD1sLmFwcGx5KG8sdCksITE9PT1lLnJlc3VsdCYmZS5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gZS50eXBlPWQscnx8ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Yy5fZGVmYXVsdCYmITEhPT1jLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksdCl8fCFHKG4pfHx1JiZtKG5bZF0pJiYheChuKSYmKChhPW5bdV0pJiYoblt1XT1udWxsKSxrLmV2ZW50LnRyaWdnZXJlZD1kLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmZi5hZGRFdmVudExpc3RlbmVyKGQsQ3QpLG5bZF0oKSxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLEN0KSxrLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsYSYmKG5bdV09YSkpLGUucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWsuZXh0ZW5kKG5ldyBrLkV2ZW50LG4se3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO2suZXZlbnQudHJpZ2dlcihyLG51bGwsdCl9fSksay5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ay5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXNbMF07aWYobilyZXR1cm4gay5ldmVudC50cmlnZ2VyKGUsdCxuLCEwKX19KSx5LmZvY3VzaW58fGsuZWFjaCh7Zm9jdXM6ImZvY3VzaW4iLGJsdXI6ImZvY3Vzb3V0In0sZnVuY3Rpb24obixyKXt2YXIgaT1mdW5jdGlvbihlKXtrLmV2ZW50LnNpbXVsYXRlKHIsZS50YXJnZXQsay5ldmVudC5maXgoZSkpfTtrLmV2ZW50LnNwZWNpYWxbcl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLHQ9US5hY2Nlc3MoZSxyKTt0fHxlLmFkZEV2ZW50TGlzdGVuZXIobixpLCEwKSxRLmFjY2VzcyhlLHIsKHR8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyx0PVEuYWNjZXNzKGUsciktMTt0P1EuYWNjZXNzKGUscix0KTooZS5yZW1vdmVFdmVudExpc3RlbmVyKG4saSwhMCksUS5yZW1vdmUoZSxyKSl9fX0pO3ZhciBFdD1DLmxvY2F0aW9uLGt0PURhdGUubm93KCksU3Q9L1w/LztrLnBhcnNlWE1MPWZ1bmN0aW9uKGUpe3ZhciB0O2lmKCFlfHwic3RyaW5nIiE9dHlwZW9mIGUpcmV0dXJuIG51bGw7dHJ5e3Q9KG5ldyBDLkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKGUsInRleHQveG1sIil9Y2F0Y2goZSl7dD12b2lkIDB9cmV0dXJuIHQmJiF0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aHx8ay5lcnJvcigiSW52YWxpZCBYTUw6ICIrZSksdH07dmFyIE50PS9cW1xdJC8sQXQ9L1xyP1xuL2csRHQ9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGp0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBxdChuLGUscixpKXt2YXIgdDtpZihBcnJheS5pc0FycmF5KGUpKWsuZWFjaChlLGZ1bmN0aW9uKGUsdCl7cnx8TnQudGVzdChuKT9pKG4sdCk6cXQobisiWyIrKCJvYmplY3QiPT10eXBlb2YgdCYmbnVsbCE9dD9lOiIiKSsiXSIsdCxyLGkpfSk7ZWxzZSBpZihyfHwib2JqZWN0IiE9PXcoZSkpaShuLGUpO2Vsc2UgZm9yKHQgaW4gZSlxdChuKyJbIit0KyJdIixlW3RdLHIsaSl9ay5wYXJhbT1mdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT1mdW5jdGlvbihlLHQpe3ZhciBuPW0odCk/dCgpOnQ7cltyLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGUpKyI9IitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj8iIjpuKX07aWYobnVsbD09ZSlyZXR1cm4iIjtpZihBcnJheS5pc0FycmF5KGUpfHxlLmpxdWVyeSYmIWsuaXNQbGFpbk9iamVjdChlKSlrLmVhY2goZSxmdW5jdGlvbigpe2kodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IobiBpbiBlKXF0KG4sZVtuXSx0LGkpO3JldHVybiByLmpvaW4oIiYiKX0say5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBrLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9ay5wcm9wKHRoaXMsImVsZW1lbnRzIik7cmV0dXJuIGU/ay5tYWtlQXJyYXkoZSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhayh0aGlzKS5pcygiOmRpc2FibGVkIikmJmp0LnRlc3QodGhpcy5ub2RlTmFtZSkmJiFEdC50ZXN0KGUpJiYodGhpcy5jaGVja2VkfHwhcGUudGVzdChlKSl9KS5tYXAoZnVuY3Rpb24oZSx0KXt2YXIgbj1rKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1uP251bGw6QXJyYXkuaXNBcnJheShuKT9rLm1hcChuLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoQXQsIlxyXG4iKX19KTp7bmFtZTp0Lm5hbWUsdmFsdWU6bi5yZXBsYWNlKEF0LCJcclxuIil9fSkuZ2V0KCl9fSk7dmFyIEx0PS8lMjAvZyxIdD0vIy4qJC8sT3Q9LyhbPyZdKV89W14mXSovLFB0PS9eKC4qPyk6WyBcdF0qKFteXHJcbl0qKSQvZ20sUnQ9L14oPzpHRVR8SEVBRCkkLyxNdD0vXlwvXC8vLEl0PXt9LFd0PXt9LCR0PSIqLyIuY29uY2F0KCIqIiksRnQ9RS5jcmVhdGVFbGVtZW50KCJhIik7ZnVuY3Rpb24gQnQobyl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7InN0cmluZyIhPXR5cGVvZiBlJiYodD1lLGU9IioiKTt2YXIgbixyPTAsaT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goUil8fFtdO2lmKG0odCkpd2hpbGUobj1pW3IrK10pIisiPT09blswXT8obj1uLnNsaWNlKDEpfHwiKiIsKG9bbl09b1tuXXx8W10pLnVuc2hpZnQodCkpOihvW25dPW9bbl18fFtdKS5wdXNoKHQpfX1mdW5jdGlvbiBfdCh0LGksbyxhKXt2YXIgcz17fSx1PXQ9PT1XdDtmdW5jdGlvbiBsKGUpe3ZhciByO3JldHVybiBzW2VdPSEwLGsuZWFjaCh0W2VdfHxbXSxmdW5jdGlvbihlLHQpe3ZhciBuPXQoaSxvLGEpO3JldHVybiJzdHJpbmciIT10eXBlb2Ygbnx8dXx8c1tuXT91PyEocj1uKTp2b2lkIDA6KGkuZGF0YVR5cGVzLnVuc2hpZnQobiksbChuKSwhMSl9KSxyfXJldHVybiBsKGkuZGF0YVR5cGVzWzBdKXx8IXNbIioiXSYmbCgiKiIpfWZ1bmN0aW9uIHp0KGUsdCl7dmFyIG4scixpPWsuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IobiBpbiB0KXZvaWQgMCE9PXRbbl0mJigoaVtuXT9lOnJ8fChyPXt9KSlbbl09dFtuXSk7cmV0dXJuIHImJmsuZXh0ZW5kKCEwLGUsciksZX1GdC5ocmVmPUV0LmhyZWYsay5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOkV0LmhyZWYsdHlwZToiR0VUIixpc0xvY2FsOi9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoRXQucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZToiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IixhY2NlcHRzOnsiKiI6JHQsdGV4dDoidGV4dC9wbGFpbiIsaHRtbDoidGV4dC9odG1sIix4bWw6ImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLGpzb246ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCJ9LGNvbnRlbnRzOnt4bWw6L1xieG1sXGIvLGh0bWw6L1xiaHRtbC8sanNvbjovXGJqc29uXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOiJyZXNwb25zZVhNTCIsdGV4dDoicmVzcG9uc2VUZXh0Iixqc29uOiJyZXNwb25zZUpTT04ifSxjb252ZXJ0ZXJzOnsiKiB0ZXh0IjpTdHJpbmcsInRleHQgaHRtbCI6ITAsInRleHQganNvbiI6SlNPTi5wYXJzZSwidGV4dCB4bWwiOmsucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihlLHQpe3JldHVybiB0P3p0KHp0KGUsay5hamF4U2V0dGluZ3MpLHQpOnp0KGsuYWpheFNldHRpbmdzLGUpfSxhamF4UHJlZmlsdGVyOkJ0KEl0KSxhamF4VHJhbnNwb3J0OkJ0KFd0KSxhamF4OmZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSx0PXR8fHt9O3ZhciBjLGYscCxuLGQscixoLGcsaSxvLHY9ay5hamF4U2V0dXAoe30sdCkseT12LmNvbnRleHR8fHYsbT12LmNvbnRleHQmJih5Lm5vZGVUeXBlfHx5LmpxdWVyeSk/ayh5KTprLmV2ZW50LHg9ay5EZWZlcnJlZCgpLGI9ay5DYWxsYmFja3MoIm9uY2UgbWVtb3J5Iiksdz12LnN0YXR1c0NvZGV8fHt9LGE9e30scz17fSx1PSJjYW5jZWxlZCIsVD17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGgpe2lmKCFuKXtuPXt9O3doaWxlKHQ9UHQuZXhlYyhwKSluW3RbMV0udG9Mb3dlckNhc2UoKSsiICJdPShuW3RbMV0udG9Mb3dlckNhc2UoKSsiICJdfHxbXSkuY29uY2F0KHRbMl0pfXQ9bltlLnRvTG93ZXJDYXNlKCkrIiAiXX1yZXR1cm4gbnVsbD09dD9udWxsOnQuam9pbigiLCAiKX0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGg/cDpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWgmJihlPXNbZS50b0xvd2VyQ2FzZSgpXT1zW2UudG9Mb3dlckNhc2UoKV18fGUsYVtlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1oJiYodi5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoaClULmFsd2F5cyhlW1Quc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXdbdF09W3dbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fHU7cmV0dXJuIGMmJmMuYWJvcnQodCksbCgwLHQpLHRoaXN9fTtpZih4LnByb21pc2UoVCksdi51cmw9KChlfHx2LnVybHx8RXQuaHJlZikrIiIpLnJlcGxhY2UoTXQsRXQucHJvdG9jb2wrIi8vIiksdi50eXBlPXQubWV0aG9kfHx0LnR5cGV8fHYubWV0aG9kfHx2LnR5cGUsdi5kYXRhVHlwZXM9KHYuZGF0YVR5cGV8fCIqIikudG9Mb3dlckNhc2UoKS5tYXRjaChSKXx8WyIiXSxudWxsPT12LmNyb3NzRG9tYWluKXtyPUUuY3JlYXRlRWxlbWVudCgiYSIpO3RyeXtyLmhyZWY9di51cmwsci5ocmVmPXIuaHJlZix2LmNyb3NzRG9tYWluPUZ0LnByb3RvY29sKyIvLyIrRnQuaG9zdCE9ci5wcm90b2NvbCsiLy8iK3IuaG9zdH1jYXRjaChlKXt2LmNyb3NzRG9tYWluPSEwfX1pZih2LmRhdGEmJnYucHJvY2Vzc0RhdGEmJiJzdHJpbmciIT10eXBlb2Ygdi5kYXRhJiYodi5kYXRhPWsucGFyYW0odi5kYXRhLHYudHJhZGl0aW9uYWwpKSxfdChJdCx2LHQsVCksaClyZXR1cm4gVDtmb3IoaSBpbihnPWsuZXZlbnQmJnYuZ2xvYmFsKSYmMD09ay5hY3RpdmUrKyYmay5ldmVudC50cmlnZ2VyKCJhamF4U3RhcnQiKSx2LnR5cGU9di50eXBlLnRvVXBwZXJDYXNlKCksdi5oYXNDb250ZW50PSFSdC50ZXN0KHYudHlwZSksZj12LnVybC5yZXBsYWNlKEh0LCIiKSx2Lmhhc0NvbnRlbnQ/di5kYXRhJiZ2LnByb2Nlc3NEYXRhJiYwPT09KHYuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmKHYuZGF0YT12LmRhdGEucmVwbGFjZShMdCwiKyIpKToobz12LnVybC5zbGljZShmLmxlbmd0aCksdi5kYXRhJiYodi5wcm9jZXNzRGF0YXx8InN0cmluZyI9PXR5cGVvZiB2LmRhdGEpJiYoZis9KFN0LnRlc3QoZik/IiYiOiI/Iikrdi5kYXRhLGRlbGV0ZSB2LmRhdGEpLCExPT09di5jYWNoZSYmKGY9Zi5yZXBsYWNlKE90LCIkMSIpLG89KFN0LnRlc3QoZik/IiYiOiI/IikrIl89IitrdCsrK28pLHYudXJsPWYrbyksdi5pZk1vZGlmaWVkJiYoay5sYXN0TW9kaWZpZWRbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcigiSWYtTW9kaWZpZWQtU2luY2UiLGsubGFzdE1vZGlmaWVkW2ZdKSxrLmV0YWdbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcigiSWYtTm9uZS1NYXRjaCIsay5ldGFnW2ZdKSksKHYuZGF0YSYmdi5oYXNDb250ZW50JiYhMSE9PXYuY29udGVudFR5cGV8fHQuY29udGVudFR5cGUpJiZULnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsdi5jb250ZW50VHlwZSksVC5zZXRSZXF1ZXN0SGVhZGVyKCJBY2NlcHQiLHYuZGF0YVR5cGVzWzBdJiZ2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dP3YuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0rKCIqIiE9PXYuZGF0YVR5cGVzWzBdPyIsICIrJHQrIjsgcT0wLjAxIjoiIik6di5hY2NlcHRzWyIqIl0pLHYuaGVhZGVycylULnNldFJlcXVlc3RIZWFkZXIoaSx2LmhlYWRlcnNbaV0pO2lmKHYuYmVmb3JlU2VuZCYmKCExPT09di5iZWZvcmVTZW5kLmNhbGwoeSxULHYpfHxoKSlyZXR1cm4gVC5hYm9ydCgpO2lmKHU9ImFib3J0IixiLmFkZCh2LmNvbXBsZXRlKSxULmRvbmUodi5zdWNjZXNzKSxULmZhaWwodi5lcnJvciksYz1fdChXdCx2LHQsVCkpe2lmKFQucmVhZHlTdGF0ZT0xLGcmJm0udHJpZ2dlcigiYWpheFNlbmQiLFtULHZdKSxoKXJldHVybiBUO3YuYXN5bmMmJjA8di50aW1lb3V0JiYoZD1DLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtULmFib3J0KCJ0aW1lb3V0Iil9LHYudGltZW91dCkpO3RyeXtoPSExLGMuc2VuZChhLGwpfWNhdGNoKGUpe2lmKGgpdGhyb3cgZTtsKC0xLGUpfX1lbHNlIGwoLTEsIk5vIFRyYW5zcG9ydCIpO2Z1bmN0aW9uIGwoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXQ7aHx8KGg9ITAsZCYmQy5jbGVhclRpbWVvdXQoZCksYz12b2lkIDAscD1yfHwiIixULnJlYWR5U3RhdGU9MDxlPzQ6MCxpPTIwMDw9ZSYmZTwzMDB8fDMwND09PWUsbiYmKHM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5jb250ZW50cyx1PWUuZGF0YVR5cGVzO3doaWxlKCIqIj09PXVbMF0pdS5zaGlmdCgpLHZvaWQgMD09PXImJihyPWUubWltZVR5cGV8fHQuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtVHlwZSIpKTtpZihyKWZvcihpIGluIHMpaWYoc1tpXSYmc1tpXS50ZXN0KHIpKXt1LnVuc2hpZnQoaSk7YnJlYWt9aWYodVswXWluIG4pbz11WzBdO2Vsc2V7Zm9yKGkgaW4gbil7aWYoIXVbMF18fGUuY29udmVydGVyc1tpKyIgIit1WzBdXSl7bz1pO2JyZWFrfWF8fChhPWkpfW89b3x8YX1pZihvKXJldHVybiBvIT09dVswXSYmdS51bnNoaWZ0KG8pLG5bb119KHYsVCxuKSkscz1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9e30sYz1lLmRhdGFUeXBlcy5zbGljZSgpO2lmKGNbMV0pZm9yKGEgaW4gZS5jb252ZXJ0ZXJzKWxbYS50b0xvd2VyQ2FzZSgpXT1lLmNvbnZlcnRlcnNbYV07bz1jLnNoaWZ0KCk7d2hpbGUobylpZihlLnJlc3BvbnNlRmllbGRzW29dJiYobltlLnJlc3BvbnNlRmllbGRzW29dXT10KSwhdSYmciYmZS5kYXRhRmlsdGVyJiYodD1lLmRhdGFGaWx0ZXIodCxlLmRhdGFUeXBlKSksdT1vLG89Yy5zaGlmdCgpKWlmKCIqIj09PW8pbz11O2Vsc2UgaWYoIioiIT09dSYmdSE9PW8pe2lmKCEoYT1sW3UrIiAiK29dfHxsWyIqICIrb10pKWZvcihpIGluIGwpaWYoKHM9aS5zcGxpdCgiICIpKVsxXT09PW8mJihhPWxbdSsiICIrc1swXV18fGxbIiogIitzWzBdXSkpeyEwPT09YT9hPWxbaV06ITAhPT1sW2ldJiYobz1zWzBdLGMudW5zaGlmdChzWzFdKSk7YnJlYWt9aWYoITAhPT1hKWlmKGEmJmVbInRocm93cyJdKXQ9YSh0KTtlbHNlIHRyeXt0PWEodCl9Y2F0Y2goZSl7cmV0dXJue3N0YXRlOiJwYXJzZXJlcnJvciIsZXJyb3I6YT9lOiJObyBjb252ZXJzaW9uIGZyb20gIit1KyIgdG8gIitvfX19cmV0dXJue3N0YXRlOiJzdWNjZXNzIixkYXRhOnR9fSh2LHMsVCxpKSxpPyh2LmlmTW9kaWZpZWQmJigodT1ULmdldFJlc3BvbnNlSGVhZGVyKCJMYXN0LU1vZGlmaWVkIikpJiYoay5sYXN0TW9kaWZpZWRbZl09dSksKHU9VC5nZXRSZXNwb25zZUhlYWRlcigiZXRhZyIpKSYmKGsuZXRhZ1tmXT11KSksMjA0PT09ZXx8IkhFQUQiPT09di50eXBlP2w9Im5vY29udGVudCI6MzA0PT09ZT9sPSJub3Rtb2RpZmllZCI6KGw9cy5zdGF0ZSxvPXMuZGF0YSxpPSEoYT1zLmVycm9yKSkpOihhPWwsIWUmJmx8fChsPSJlcnJvciIsZTwwJiYoZT0wKSkpLFQuc3RhdHVzPWUsVC5zdGF0dXNUZXh0PSh0fHxsKSsiIixpP3gucmVzb2x2ZVdpdGgoeSxbbyxsLFRdKTp4LnJlamVjdFdpdGgoeSxbVCxsLGFdKSxULnN0YXR1c0NvZGUodyksdz12b2lkIDAsZyYmbS50cmlnZ2VyKGk/ImFqYXhTdWNjZXNzIjoiYWpheEVycm9yIixbVCx2LGk/bzphXSksYi5maXJlV2l0aCh5LFtULGxdKSxnJiYobS50cmlnZ2VyKCJhamF4Q29tcGxldGUiLFtULHZdKSwtLWsuYWN0aXZlfHxrLmV2ZW50LnRyaWdnZXIoImFqYXhTdG9wIikpKX1yZXR1cm4gVH0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsuZ2V0KGUsdCxuLCJqc29uIil9LGdldFNjcmlwdDpmdW5jdGlvbihlLHQpe3JldHVybiBrLmdldChlLHZvaWQgMCx0LCJzY3JpcHQiKX19KSxrLmVhY2goWyJnZXQiLCJwb3N0Il0sZnVuY3Rpb24oZSxpKXtrW2ldPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBtKHQpJiYocj1yfHxuLG49dCx0PXZvaWQgMCksay5hamF4KGsuZXh0ZW5kKHt1cmw6ZSx0eXBlOmksZGF0YVR5cGU6cixkYXRhOnQsc3VjY2VzczpufSxrLmlzUGxhaW5PYmplY3QoZSkmJmUpKX19KSxrLl9ldmFsVXJsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGsuYWpheCh7dXJsOmUsdHlwZToiR0VUIixkYXRhVHlwZToic2NyaXB0IixjYWNoZTohMCxhc3luYzohMSxnbG9iYWw6ITEsY29udmVydGVyczp7InRleHQgc2NyaXB0IjpmdW5jdGlvbigpe319LGRhdGFGaWx0ZXI6ZnVuY3Rpb24oZSl7ay5nbG9iYWxFdmFsKGUsdCl9fSl9LGsuZm4uZXh0ZW5kKHt3cmFwQWxsOmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiB0aGlzWzBdJiYobShlKSYmKGU9ZS5jYWxsKHRoaXNbMF0pKSx0PWsoZSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSx0aGlzWzBdLnBhcmVudE5vZGUmJnQuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLHQubWFwKGZ1bmN0aW9uKCl7dmFyIGU9dGhpczt3aGlsZShlLmZpcnN0RWxlbWVudENoaWxkKWU9ZS5maXJzdEVsZW1lbnRDaGlsZDtyZXR1cm4gZX0pLmFwcGVuZCh0aGlzKSksdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKG4pe3JldHVybiBtKG4pP3RoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLndyYXBJbm5lcihuLmNhbGwodGhpcyxlKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1rKHRoaXMpLHQ9ZS5jb250ZW50cygpO3QubGVuZ3RoP3Qud3JhcEFsbChuKTplLmFwcGVuZChuKX0pfSx3cmFwOmZ1bmN0aW9uKHQpe3ZhciBuPW0odCk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLndyYXBBbGwobj90LmNhbGwodGhpcyxlKTp0KX0pfSx1bndyYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucGFyZW50KGUpLm5vdCgiYm9keSIpLmVhY2goZnVuY3Rpb24oKXtrKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KSx0aGlzfX0pLGsuZXhwci5wc2V1ZG9zLmhpZGRlbj1mdW5jdGlvbihlKXtyZXR1cm4hay5leHByLnBzZXVkb3MudmlzaWJsZShlKX0say5leHByLnBzZXVkb3MudmlzaWJsZT1mdW5jdGlvbihlKXtyZXR1cm4hIShlLm9mZnNldFdpZHRofHxlLm9mZnNldEhlaWdodHx8ZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCl9LGsuYWpheFNldHRpbmdzLnhocj1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IEMuWE1MSHR0cFJlcXVlc3R9Y2F0Y2goZSl7fX07dmFyIFV0PXswOjIwMCwxMjIzOjIwNH0sWHQ9ay5hamF4U2V0dGluZ3MueGhyKCk7eS5jb3JzPSEhWHQmJiJ3aXRoQ3JlZGVudGlhbHMiaW4gWHQseS5hamF4PVh0PSEhWHQsay5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGkpe3ZhciBvLGE7aWYoeS5jb3JzfHxYdCYmIWkuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWkueGhyKCk7aWYoci5vcGVuKGkudHlwZSxpLnVybCxpLmFzeW5jLGkudXNlcm5hbWUsaS5wYXNzd29yZCksaS54aHJGaWVsZHMpZm9yKG4gaW4gaS54aHJGaWVsZHMpcltuXT1pLnhockZpZWxkc1tuXTtmb3IobiBpbiBpLm1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUmJnIub3ZlcnJpZGVNaW1lVHlwZShpLm1pbWVUeXBlKSxpLmNyb3NzRG9tYWlufHxlWyJYLVJlcXVlc3RlZC1XaXRoIl18fChlWyJYLVJlcXVlc3RlZC1XaXRoIl09IlhNTEh0dHBSZXF1ZXN0IiksZSlyLnNldFJlcXVlc3RIZWFkZXIobixlW25dKTtvPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe28mJihvPWE9ci5vbmxvYWQ9ci5vbmVycm9yPXIub25hYm9ydD1yLm9udGltZW91dD1yLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLCJhYm9ydCI9PT1lP3IuYWJvcnQoKToiZXJyb3IiPT09ZT8ibnVtYmVyIiE9dHlwZW9mIHIuc3RhdHVzP3QoMCwiZXJyb3IiKTp0KHIuc3RhdHVzLHIuc3RhdHVzVGV4dCk6dChVdFtyLnN0YXR1c118fHIuc3RhdHVzLHIuc3RhdHVzVGV4dCwidGV4dCIhPT0oci5yZXNwb25zZVR5cGV8fCJ0ZXh0Iil8fCJzdHJpbmciIT10eXBlb2Ygci5yZXNwb25zZVRleHQ/e2JpbmFyeTpyLnJlc3BvbnNlfTp7dGV4dDpyLnJlc3BvbnNlVGV4dH0sci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfX0sci5vbmxvYWQ9bygpLGE9ci5vbmVycm9yPXIub250aW1lb3V0PW8oImVycm9yIiksdm9pZCAwIT09ci5vbmFib3J0P3Iub25hYm9ydD1hOnIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09PXIucmVhZHlTdGF0ZSYmQy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7byYmYSgpfSl9LG89bygiYWJvcnQiKTt0cnl7ci5zZW5kKGkuaGFzQ29udGVudCYmaS5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihvKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe28mJm8oKX19fSksay5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe2UuY3Jvc3NEb21haW4mJihlLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSxrLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OiJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCJ9LGNvbnRlbnRzOntzY3JpcHQ6L1xiKD86amF2YXxlY21hKXNjcmlwdFxiL30sY29udmVydGVyczp7InRleHQgc2NyaXB0IjpmdW5jdGlvbihlKXtyZXR1cm4gay5nbG9iYWxFdmFsKGUpLGV9fX0pLGsuYWpheFByZWZpbHRlcigic2NyaXB0IixmdW5jdGlvbihlKXt2b2lkIDA9PT1lLmNhY2hlJiYoZS5jYWNoZT0hMSksZS5jcm9zc0RvbWFpbiYmKGUudHlwZT0iR0VUIil9KSxrLmFqYXhUcmFuc3BvcnQoInNjcmlwdCIsZnVuY3Rpb24obil7dmFyIHIsaTtpZihuLmNyb3NzRG9tYWlufHxuLnNjcmlwdEF0dHJzKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7cj1rKCI8c2NyaXB0PiIpLmF0dHIobi5zY3JpcHRBdHRyc3x8e30pLnByb3Aoe2NoYXJzZXQ6bi5zY3JpcHRDaGFyc2V0LHNyYzpuLnVybH0pLm9uKCJsb2FkIGVycm9yIixpPWZ1bmN0aW9uKGUpe3IucmVtb3ZlKCksaT1udWxsLGUmJnQoImVycm9yIj09PWUudHlwZT80MDQ6MjAwLGUudHlwZSl9KSxFLmhlYWQuYXBwZW5kQ2hpbGQoclswXSl9LGFib3J0OmZ1bmN0aW9uKCl7aSYmaSgpfX19KTt2YXIgVnQsR3Q9W10sWXQ9Lyg9KVw/KD89JnwkKXxcP1w/LztrLmFqYXhTZXR1cCh7anNvbnA6ImNhbGxiYWNrIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9R3QucG9wKCl8fGsuZXhwYW5kbysiXyIra3QrKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLGsuYWpheFByZWZpbHRlcigianNvbiBqc29ucCIsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPSExIT09ZS5qc29ucCYmKFl0LnRlc3QoZS51cmwpPyJ1cmwiOiJzdHJpbmciPT10eXBlb2YgZS5kYXRhJiYwPT09KGUuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmWXQudGVzdChlLmRhdGEpJiYiZGF0YSIpO2lmKGF8fCJqc29ucCI9PT1lLmRhdGFUeXBlc1swXSlyZXR1cm4gcj1lLmpzb25wQ2FsbGJhY2s9bShlLmpzb25wQ2FsbGJhY2spP2UuanNvbnBDYWxsYmFjaygpOmUuanNvbnBDYWxsYmFjayxhP2VbYV09ZVthXS5yZXBsYWNlKFl0LCIkMSIrcik6ITEhPT1lLmpzb25wJiYoZS51cmwrPShTdC50ZXN0KGUudXJsKT8iJiI6Ij8iKStlLmpzb25wKyI9IityKSxlLmNvbnZlcnRlcnNbInNjcmlwdCBqc29uIl09ZnVuY3Rpb24oKXtyZXR1cm4gb3x8ay5lcnJvcihyKyIgd2FzIG5vdCBjYWxsZWQiKSxvWzBdfSxlLmRhdGFUeXBlc1swXT0ianNvbiIsaT1DW3JdLENbcl09ZnVuY3Rpb24oKXtvPWFyZ3VtZW50c30sbi5hbHdheXMoZnVuY3Rpb24oKXt2b2lkIDA9PT1pP2soQykucmVtb3ZlUHJvcChyKTpDW3JdPWksZVtyXSYmKGUuanNvbnBDYWxsYmFjaz10Lmpzb25wQ2FsbGJhY2ssR3QucHVzaChyKSksbyYmbShpKSYmaShvWzBdKSxvPWk9dm9pZCAwfSksInNjcmlwdCJ9KSx5LmNyZWF0ZUhUTUxEb2N1bWVudD0oKFZ0PUUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCIiKS5ib2R5KS5pbm5lckhUTUw9Ijxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+IiwyPT09VnQuY2hpbGROb2Rlcy5sZW5ndGgpLGsucGFyc2VIVE1MPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGU/W106KCJib29sZWFuIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdHx8KHkuY3JlYXRlSFRNTERvY3VtZW50Pygocj0odD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgiIikpLmNyZWF0ZUVsZW1lbnQoImJhc2UiKSkuaHJlZj1FLmxvY2F0aW9uLmhyZWYsdC5oZWFkLmFwcGVuZENoaWxkKHIpKTp0PUUpLG89IW4mJltdLChpPUQuZXhlYyhlKSk/W3QuY3JlYXRlRWxlbWVudChpWzFdKV06KGk9d2UoW2VdLHQsbyksbyYmby5sZW5ndGgmJmsobykucmVtb3ZlKCksay5tZXJnZShbXSxpLmNoaWxkTm9kZXMpKSk7dmFyIHIsaSxvfSxrLmZuLmxvYWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPXRoaXMscz1lLmluZGV4T2YoIiAiKTtyZXR1cm4tMTxzJiYocj1tdChlLnNsaWNlKHMpKSxlPWUuc2xpY2UoMCxzKSksbSh0KT8obj10LHQ9dm9pZCAwKTp0JiYib2JqZWN0Ij09dHlwZW9mIHQmJihpPSJQT1NUIiksMDxhLmxlbmd0aCYmay5hamF4KHt1cmw6ZSx0eXBlOml8fCJHRVQiLGRhdGFUeXBlOiJodG1sIixkYXRhOnR9KS5kb25lKGZ1bmN0aW9uKGUpe289YXJndW1lbnRzLGEuaHRtbChyP2soIjxkaXY+IikuYXBwZW5kKGsucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30say5lYWNoKFsiYWpheFN0YXJ0IiwiYWpheFN0b3AiLCJhamF4Q29tcGxldGUiLCJhamF4RXJyb3IiLCJhamF4U3VjY2VzcyIsImFqYXhTZW5kIl0sZnVuY3Rpb24oZSx0KXtrLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9uKHQsZSl9fSksay5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIGsuZ3JlcChrLnRpbWVycyxmdW5jdGlvbihlKXtyZXR1cm4gdD09PWUuZWxlbX0pLmxlbmd0aH0say5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGw9ay5jc3MoZSwicG9zaXRpb24iKSxjPWsoZSksZj17fTsic3RhdGljIj09PWwmJihlLnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSIpLHM9Yy5vZmZzZXQoKSxvPWsuY3NzKGUsInRvcCIpLHU9ay5jc3MoZSwibGVmdCIpLCgiYWJzb2x1dGUiPT09bHx8ImZpeGVkIj09PWwpJiYtMTwobyt1KS5pbmRleE9mKCJhdXRvIik/KGE9KHI9Yy5wb3NpdGlvbigpKS50b3AsaT1yLmxlZnQpOihhPXBhcnNlRmxvYXQobyl8fDAsaT1wYXJzZUZsb2F0KHUpfHwwKSxtKHQpJiYodD10LmNhbGwoZSxuLGsuZXh0ZW5kKHt9LHMpKSksbnVsbCE9dC50b3AmJihmLnRvcD10LnRvcC1zLnRvcCthKSxudWxsIT10LmxlZnQmJihmLmxlZnQ9dC5sZWZ0LXMubGVmdCtpKSwidXNpbmciaW4gdD90LnVzaW5nLmNhbGwoZSxmKTpjLmNzcyhmKX19LGsuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24odCl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihlKXtrLm9mZnNldC5zZXRPZmZzZXQodGhpcyx0LGUpfSk7dmFyIGUsbixyPXRoaXNbMF07cmV0dXJuIHI/ci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8oZT1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49ci5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LHt0b3A6ZS50b3Arbi5wYWdlWU9mZnNldCxsZWZ0OmUubGVmdCtuLnBhZ2VYT2Zmc2V0fSk6e3RvcDowLGxlZnQ6MH06dm9pZCAwfSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBlLHQsbixyPXRoaXNbMF0saT17dG9wOjAsbGVmdDowfTtpZigiZml4ZWQiPT09ay5jc3MociwicG9zaXRpb24iKSl0PXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXt0PXRoaXMub2Zmc2V0KCksbj1yLm93bmVyRG9jdW1lbnQsZT1yLm9mZnNldFBhcmVudHx8bi5kb2N1bWVudEVsZW1lbnQ7d2hpbGUoZSYmKGU9PT1uLmJvZHl8fGU9PT1uLmRvY3VtZW50RWxlbWVudCkmJiJzdGF0aWMiPT09ay5jc3MoZSwicG9zaXRpb24iKSllPWUucGFyZW50Tm9kZTtlJiZlIT09ciYmMT09PWUubm9kZVR5cGUmJigoaT1rKGUpLm9mZnNldCgpKS50b3ArPWsuY3NzKGUsImJvcmRlclRvcFdpZHRoIiwhMCksaS5sZWZ0Kz1rLmNzcyhlLCJib3JkZXJMZWZ0V2lkdGgiLCEwKSl9cmV0dXJue3RvcDp0LnRvcC1pLnRvcC1rLmNzcyhyLCJtYXJnaW5Ub3AiLCEwKSxsZWZ0OnQubGVmdC1pLmxlZnQtay5jc3MociwibWFyZ2luTGVmdCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGUmJiJzdGF0aWMiPT09ay5jc3MoZSwicG9zaXRpb24iKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxpZX0pfX0pLGsuZWFjaCh7c2Nyb2xsTGVmdDoicGFnZVhPZmZzZXQiLHNjcm9sbFRvcDoicGFnZVlPZmZzZXQifSxmdW5jdGlvbih0LGkpe3ZhciBvPSJwYWdlWU9mZnNldCI9PT1pO2suZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoeChlKT9yPWU6OT09PWUubm9kZVR5cGUmJihyPWUuZGVmYXVsdFZpZXcpLHZvaWQgMD09PW4pcmV0dXJuIHI/cltpXTplW3RdO3I/ci5zY3JvbGxUbyhvP3IucGFnZVhPZmZzZXQ6bixvP246ci5wYWdlWU9mZnNldCk6ZVt0XT1ufSx0LGUsYXJndW1lbnRzLmxlbmd0aCl9fSksay5lYWNoKFsidG9wIiwibGVmdCJdLGZ1bmN0aW9uKGUsbil7ay5jc3NIb29rc1tuXT16ZSh5LnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oZSx0KXtpZih0KXJldHVybiB0PV9lKGUsbiksJGUudGVzdCh0KT9rKGUpLnBvc2l0aW9uKClbbl0rInB4Ijp0fSl9KSxrLmVhY2goe0hlaWdodDoiaGVpZ2h0IixXaWR0aDoid2lkdGgifSxmdW5jdGlvbihhLHMpe2suZWFjaCh7cGFkZGluZzoiaW5uZXIiK2EsY29udGVudDpzLCIiOiJvdXRlciIrYX0sZnVuY3Rpb24ocixvKXtrLmZuW29dPWZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCYmKHJ8fCJib29sZWFuIiE9dHlwZW9mIGUpLGk9cnx8KCEwPT09ZXx8ITA9PT10PyJtYXJnaW4iOiJib3JkZXIiKTtyZXR1cm4gXyh0aGlzLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtyZXR1cm4geChlKT8wPT09by5pbmRleE9mKCJvdXRlciIpP2VbImlubmVyIithXTplLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsiY2xpZW50IithXTo5PT09ZS5ub2RlVHlwZT8ocj1lLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChlLmJvZHlbInNjcm9sbCIrYV0sclsic2Nyb2xsIithXSxlLmJvZHlbIm9mZnNldCIrYV0sclsib2Zmc2V0IithXSxyWyJjbGllbnQiK2FdKSk6dm9pZCAwPT09bj9rLmNzcyhlLHQsaSk6ay5zdHlsZShlLHQsbixpKX0scyxuP2U6dm9pZCAwLG4pfX0pfSksay5lYWNoKCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51Ii5zcGxpdCgiICIpLGZ1bmN0aW9uKGUsbil7ay5mbltuXT1mdW5jdGlvbihlLHQpe3JldHVybiAwPGFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vbihuLG51bGwsZSx0KTp0aGlzLnRyaWdnZXIobil9fSksay5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubW91c2VlbnRlcihlKS5tb3VzZWxlYXZlKHR8fGUpfX0pLGsuZm4uZXh0ZW5kKHtiaW5kOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5vbihlLG51bGwsdCxuKX0sdW5iaW5kOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMub2ZmKGUsbnVsbCx0KX0sZGVsZWdhdGU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMub24odCxlLG4scil9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihlLCIqKiIpOnRoaXMub2ZmKHQsZXx8IioqIixuKX19KSxrLnByb3h5PWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpO2lmKCJzdHJpbmciPT10eXBlb2YgdCYmKG49ZVt0XSx0PWUsZT1uKSxtKGUpKXJldHVybiByPXMuY2FsbChhcmd1bWVudHMsMiksKGk9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0fHx0aGlzLHIuY29uY2F0KHMuY2FsbChhcmd1bWVudHMpKSl9KS5ndWlkPWUuZ3VpZD1lLmd1aWR8fGsuZ3VpZCsrLGl9LGsuaG9sZFJlYWR5PWZ1bmN0aW9uKGUpe2U/ay5yZWFkeVdhaXQrKzprLnJlYWR5KCEwKX0say5pc0FycmF5PUFycmF5LmlzQXJyYXksay5wYXJzZUpTT049SlNPTi5wYXJzZSxrLm5vZGVOYW1lPUEsay5pc0Z1bmN0aW9uPW0say5pc1dpbmRvdz14LGsuY2FtZWxDYXNlPVYsay50eXBlPXcsay5ub3c9RGF0ZS5ub3csay5pc051bWVyaWM9ZnVuY3Rpb24oZSl7dmFyIHQ9ay50eXBlKGUpO3JldHVybigibnVtYmVyIj09PXR8fCJzdHJpbmciPT09dCkmJiFpc05hTihlLXBhcnNlRmxvYXQoZSkpfSwiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoImpxdWVyeSIsW10sZnVuY3Rpb24oKXtyZXR1cm4ga30pO3ZhciBRdD1DLmpRdWVyeSxKdD1DLiQ7cmV0dXJuIGsubm9Db25mbGljdD1mdW5jdGlvbihlKXtyZXR1cm4gQy4kPT09ayYmKEMuJD1KdCksZSYmQy5qUXVlcnk9PT1rJiYoQy5qUXVlcnk9UXQpLGt9LGV8fChDLmpRdWVyeT1DLiQ9ayksa30pOwo="}]},{"name":"AC-baidu-重定向优化百度搜狗谷歌必应搜索_favicon_双列","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["baidu.com","google.com","google.com.hk","google.com.jp","bing.com","duckduckgo.com","dogedoge.com","so.com"],"orig_excludes":["*://*.google*/sorry*","https://zhidao.baidu.com/*","https://*.zhidao.baidu.com/*","https://www.baidu.com/img/*"],"orig_includes":["*://ipv6.baidu.com/*","*://www.baidu.com/*","*://www1.baidu.com/*","*://m.baidu.com/*","*://xueshu.baidu.com/s*","*://www.so.com/s?*","*://*.bing.com/*","*://encrypted.google.*/search*","*://*.google*/search*","*://*.google*/webhp*","*://*.zhihu.com/*","*://*duckduckgo.com/*","*://*.dogedoge.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":["weixin.sogou.com","downza.cn","*"],"use_connects":["www.baidu.com","wx.qq.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"AdsStyleMode_Baidu":"s0","AdsStyleMode_Google":"s0","Config":"s{\"isRedirectEnable\":true,\"isAdsEnable\":false,\"AdsStyleEnable\":false,\"AdsStyleMode_Baidu\":\"0\",\"AdsStyleMode_Google\":\"0\",\"AdsStyleMode_Bing\":\"0\",\"HuYan_Baidu\":false,\"HuYan_Google\":false,\"HuYan_Bing\":false,\"defaultHuYanColor\":\"#def1ef\",\"isUserColorEnable\":false,\"isFaviconEnable\":true,\"defaultFaviconUrl\":\"https://ae01.alicdn.com/kf/HTB1dRY0X8OD3KVjSZFFq6An9pXay.jpg\",\"doDisableSug\":true,\"isRightDisplayEnable\":false,\"isCounterEnable\":false,\"isALineEnable\":false,\"isUserStyleEnable\":false,\"UserStyleText\":\"/**计数器的颜色样式*/\\ndiv .AC-CounterT{\\n  background: #FD9999;\\n}\\n/**右侧栏的样式-其实不开启更好看一些*/\\n#content_right{\\n  padding: 20px 15px 15px;\\n  border-radius: 5px;\\n  background-color: #fff;\\n  box-sizing: border-box;\\n  box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -webkit-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -moz-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n}\\nbody[baidu] {\\n  position: relative;\\n}\\nbody[baidu]:before {\\n  position: fixed;\\n  width: 100%;\\n  height: 100%;\\n  top: 0;\\n  left: 0;\\n  content: '';\\n  background-image: url('https://img.tujidu.com/image/5fdde8468423e.jpg');\\n  background-size: 100% auto;\\n  opacity: 1; /*背景图透明度=0.8，最大1*/\\n}\\n/**隐藏首页的大图标-修复可能导致外援样式异常**/\\nbody[baidu] #s_lg_img_new{\\n  display:none !important;\\n}\\nbody[baidu] .c-container{\\n  border-radius: 5px;\\n  background-color: rgba(255,255,255, 0.3) !important; /*百度搜索块体的颜色；透明度=0.1，最大1*/\\n}\\nbody[baidu] .c-container h3{\\n  background-color: rgba(248,248,248, 0.3) !important; /*百度搜索块体 - 标题的颜色；透明度=0.1，最大1*/\\n}\",\"oldVersion\":\"25.01\",\"isBlockEnable\":true,\"isBlockDisplay\":false,\"AdsStyleMode_SoGou\":\"3\",\"HuYan_SoGou\":false,\"UserBlockList\":[\"baijiahao.baidu.com\",\"www.guokr.com\",\"www.meizu.com\"],\"isBlockBtnDisplay\":true,\"isGooleInBaiduModeEnable\":false,\"Style_BaiduLite\":false,\"lastSaveTime\":1639108188379,\"isAutopage\":false,\"AdsStyleMode_Duck\":3,\"AdsStyleMode_Doge\":3,\"HuYan_Duck\":false,\"HuYan_Doge\":false,\"normalizeDuck\":true,\"isEnLang\":false,\"isBlockBtnNotDisplay\":false,\"baidu\":{\"name\":\"baidu\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"google\":{\"name\":\"google\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"bing\":{\"name\":\"bing\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"duck\":{\"name\":\"duck\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"doge\":{\"name\":\"doge\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"sogou\":{\"name\":\"sogou\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"zhihu\":{\"name\":\"zhihu\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"other\":{\"name\":\"other\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"acceptLicense\":true}","UserStyleText":"s#content_right{\n    padding: 20px 15px 15px;\n    border-radius: 5px;\n    background-color: #fff;\n    box-sizing: border-box;\n    box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\n    -webkit-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\n    -moz-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\n}","defaultFaviconUrl":"shttps://ws1.sinaimg.cn/large/6a155794ly1foijtdzhxhj200w00wjr5.jpg","doDisableSug":"btrue","isALineEnable":"bfalse","isAdsEnable":"btrue","isCounterEnable":"bfalse","isFaviconEnable":"btrue","isRedirectEnable":"btrue","isRightDisplayEnable":"btrue","isUserStyleEnable":"btrue","version":"s19.4"},"ts":1639108292009},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6-%E6%90%9C%E7%8B%97-%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E5%8E%BB%E9%99%A4-%E5%8E%BB%E5%B9%BF%E5%91%8A-favicon/code/AC-baidu%EF%BC%9A%20%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E3%80%81%E6%90%9C%E7%8B%97%E3%80%81%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E5%8E%BB%E9%99%A4+%E5%8E%BB%E5%B9%BF%E5%91%8A+favicon.user.js","uuid":"996e82ca-b578-4084-b602-8e2eeb2ab996","source":"","resources":[{"meta":{"name":"baiduCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduCommonStyle.css?t=25.01","ts":1642048881091,"mimetype":"text/css"},"source":""},{"meta":{"name":"baiduOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduOnePageStyle.css?t=25.012","ts":1642048881119,"mimetype":"text/css"},"source":"LyoqU3RvcmUgQmFpZHVPbmVQYWdlU3R5bGUqKi8NCiN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lcnsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBtYXJnaW4tbGVmdDogdW5zZXQ7DQp9DQpmb3JtLmZtew0KICAgIHBvc2l0aW9uOnJlbGF0aXZlOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHVuc2V0Ow0KfQ0KYm9keVtiYWlkdV0gLnBhZ2Vmb290Lmdqew0KICAgIG1hcmdpbi10b3A6IDEwMHB4Ow0KfQ0KLndyYXBwZXJfbmV3IC5oZWFkX3dyYXBwZXIgI3Jlc3VsdF9sb2dvew0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3NfdGFiIGIsI3NfdGFiIGF7DQogICAgcG9zaXRpb246cmVsYXRpdmU7DQp9DQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXJ7DQogICAgcG9zaXRpb246YWJzb2x1dGU7DQogICAgbGVmdDogMjAlOw0KICAgIHdpZHRoOiA2MCU7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0ew0KICAgIG1hcmdpbjogMCBhdXRvICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldCAhaW1wb3J0YW50Ow0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQsI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjcnMsICN3cmFwcGVyICNwYWdlew0KICAgIHBvc2l0aW9uOnJlbGF0aXZlOw0KICAgIHBhZGRpbmctbGVmdDogMHB4Ow0KICAgIHdpZHRoOiA0MCUgIWltcG9ydGFudDsNCiAgICBtaW4td2lkdGg6IDY3MHB4Ow0KICAgIGZsb2F0OnVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiB1bnNldDsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCg0KI3dyYXBwZXIgI3BhZ2V7DQogICAgYmFja2dyb3VuZDogdW5zZXQ7DQp9DQojd3JhcHBlciAjcnMgdGh7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KI3dyYXBwZXIgI3Jzew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBtYXJnaW46IDMwcHggYXV0byAtMjBweCBhdXRvOw0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQgLmMtY29udGFpbmVyew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICAgbWluLXdpZHRoOjY1MHB4Ow0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7DQogICAgI3dyYXBwZXIgICNjb250ZW50X2xlZnQsICN3cmFwcGVyICAjcnN7DQogICAgICAgIG1pbi13aWR0aDo4MDBweDsNCiAgICB9DQp9DQojd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7DQogICAgcGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgIGRpc3BsYXk6IGJsb2NrOw0KfQ0KI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCn0NCmJvZHkuc2hvd1JpZ2h0ICN3cmFwcGVyICNjb250YWluZXIuc2FtX25ld2dyaWQgI2NvbnRlbnRfbGVmdHsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoY2FsYyg2dncgLSAyNTFweCkpOw0KfQ0KYm9keS5zaG93UmlnaHQgI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7DQogICAgcmlnaHQ6IGNhbGMoMzcuNXZ3IC0gNDcwcHgpOw0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI4MHB4KXsNCiAgICBib2R5LnNob3dSaWdodCAjd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7DQogICAgICAgIHRyYW5zZm9ybTogdW5zZXQ7DQogICAgfQ0KICAgIGJvZHkuc2hvd1JpZ2h0ICN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgICAgICBkaXNwbGF5OiBub25lOw0KICAgIH0NCn0NCiN3cmFwcGVyICNwYWdlIGEsICN3cmFwcGVyICNwYWdlIHN0cm9uZ3sNCiAgICBtYXJnaW4tcmlnaHQ6IDIycHggIWltcG9ydGFudDsNCn0NCiN3cmFwcGVyICNwYWdlIC5wYWdlLWlubmVyew0KICAgIHBhZGRpbmctbGVmdDogMjJweDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KLnNfdGFiX2lubmVyew0KICAgIGRpc3BsYXk6YmxvY2sgIWltcG9ydGFudDsNCn0NCiNjb250YWluZXIgLmhpbnRfY29tbW9uX3Jlc3RvcHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgbGVmdDogY2FsYyg0NXZ3IC0gNTAwcHgpOw0KICAgIG1hcmdpbi10b3A6IDI1cHg7DQp9DQouQUMuc3Atc2VwYXJhdG9yew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KLypzZWFyY2ggZW5naW5lIGp1bXAqLw0KI3Nlai1jb250YWluZXJ7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgIG1hcmdpbi1sZWZ0OiAwOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCi5zX2Zvcm1fd3JhcHBlciB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiN3cmFwcGVyICNzX3RhYnsNCiAgICBwYWRkaW5nLWxlZnQ6IDA7DQogICAgbWFyZ2luLWxlZnQ6IDA7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiN3cmFwcGVyICNjb250YWluZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAjY29udGFpbmVyIC5oZWFkX251bXNfY29udF9vdXRlciAubnVtcyB7DQogICAgd2lkdGg6IDY5JTsNCiAgICBtYXJnaW4tbGVmdDogMTYlOw0KfQ0KZm9ybS5mbSAuc19pcHRfd3IuYmd7DQogICAgbWluLXdpZHRoOiBjYWxjKDM3LjV2dyAtIDE1MHB4KTsNCn0NCg0KLnJlc3VsdC1tb2xlY3VsZS5uZXctcG1kIHsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBtaW4td2lkdGg6IDgwMHB4Ow0KICAgIHdpZHRoOiA0MCUgIWltcG9ydGFudDsNCiAgICBtYXJnaW4tdG9wOiA2cHg7DQogICAgcGFkZGluZy1sZWZ0OiAyMHB4Ow0KfQ0KDQoubmV3LXBtZCAjcnNfbmV3IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCiAgICB3aWR0aDogY2FsYygxMDAlIC0gMjBweCk7DQogICAgcGFkZGluZzogMTBweCAwIDEwcHggMjBweDsNCn0NCi5yZXN1bHQtbW9sZWN1bGUgI3BhZ2UgPmRpdnsNCiAgICB3aWR0aDogdW5zZXQ7DQp9DQoNCi5uZXctcG1kICNyc19uZXcgdGFibGV7DQogICAgd2lkdGg6IDEwMCU7DQogICAgbWFyZ2luLXRvcDogMTJweDsNCn0NCg0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTkyMXB4KSB7DQogICAgI2hlYWQgLmhlYWRfd3JhcHBlcnsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxNDBweCwwLDFweCk7DQogICAgfQ0KICAgIC53cmFwcGVyX25ldyAjc190YWIuc190YWIgLnNfdGFiX2lubmVyIHsNCiAgICAgICAgd2lkdGg6IDkwMHB4Ow0KICAgICAgICBwYWRkaW5nLWxlZnQ6IDI5NnB4Ow0KICAgIH0NCiAgICBmb3JtLmZtIC5zX2lwdF93ci5iZ3sNCiAgICAgICAgbWluLXdpZHRoOiBjYWxjKDM3LjV2dyAtIDE1MHB4KTsNCiAgICB9DQogICAgLmhlYWRfd3JhcHBlciAjdSB7DQogICAgICAgIHJpZ2h0OiAyMDBweDsNCiAgICB9DQp9DQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMzY2cHgpIGFuZCAobWF4LXdpZHRoOiAxOTIwcHgpIHsNCiAgICAud3JhcHBlcl9uZXcgLmhlYWRfd3JhcHBlciAjcmVzdWx0X2xvZ297DQogICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7DQogICAgfQ0KfQ0K"},{"meta":{"name":"baiduTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduTwoPageStyle.css?t=25.012","ts":1642048881141,"mimetype":"text/css"},"source":"LyoqU3RvcmUgQmFpZHVUb3dQYWdlU3R5bGUqKi8NCiN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lciB7DQogICAgd2lkdGg6IGF1dG87DQp9DQpmb3JtLmZtew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB1bnNldDsNCn0NCiNzX3RhYiBiLCAjc190YWIgYSB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3dyYXBwZXIgI3NfdGFiew0KICAgIHBhZGRpbmctbGVmdDogMDsNCiAgICBtYXJnaW4tbGVmdDogMDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KI3dyYXBwZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXMgew0KICAgIHdpZHRoOiA4MCU7DQogICAgbWFyZ2luLWxlZnQ6IDEwJTsNCn0NCiN3cmFwcGVyICAuaGVhZF9udW1zX2NvbnRfb3V0ZXIsDQouaGludF9jb21tb25fcmVzdG9wLA0KI2hlYWRlcl90b3BfYmFyIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbGVmdDogMTAlOw0KICAgIHdpZHRoOiA4MCU7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0LCAjY29udGFpbmVyIC5yZXN1bHQtbW9sZWN1bGUgew0KICAgIG1hcmdpbjogMCBhdXRvICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldCAhaW1wb3J0YW50Ow0KfQ0KI3dyYXBwZXIgI2hlYWRlcl90b3BfYmFyew0KICAgIG1hcmdpbi1ib3R0b206IDBweDsNCn0NCmJvZHkgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjY29udGVudF9sZWZ0ew0KICAgIHdpZHRoOiA4MCU7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0ew0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlOw0KICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICJ4bWFpbiB4bWFpbiI7DQogICAgbWFyZ2luOiAwIGF1dG87DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIHBhZGRpbmctbGVmdDogNSU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIHdpZHRoOiA4MCU7DQogICAgbWFyZ2luLWxlZnQ6NyU7DQogICAgbWFyZ2luLWJvdHRvbTogMzBweDsNCn0NCmJvZHlbbmV3c10gI3dyYXBwZXIgI2NvbnRlbnRfbGVmdD5kaXY6bm90KFtjbGFzc10pOm5vdChbaWRdKXsNCiAgICBkaXNwbGF5OiBncmlkOw0KICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDUwJTsNCiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAieG1haW4geG1haW4iOw0KfQ0KI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7DQogICAgZGlzcGxheTpub25lICFpbXBvcnRhbnQ7DQp9DQojd3JhcHBlcl93cmFwcGVyICNjb250YWluZXIgI3Jzew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCiN3cmFwcGVyICNwYWdlIHsNCiAgICBtaW4td2lkdGg6IDcxMHB4Ow0KICAgIGhlaWdodDogNDBweDsNCiAgICBsaW5lLWhlaWdodDogNDBweDsNCiAgICBwYWRkaW5nOiA1cHggMTBweDsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3dyYXBwZXIgI3BhZ2UgLnBhZ2UtaW5uZXJ7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQgLnJlc3VsdCwNCiN3cmFwcGVyICAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciB7DQogICAgd2lkdGg6IHVuc2V0ICFpbXBvcnRhbnQ7DQogICAgbWF4LXdpZHRoOiAxMDAlOw0KICAgIG1hcmdpbi1sZWZ0OiA1cHg7DQogICAgbWFyZ2luLXJpZ2h0OiAxNXB4Ow0KfQ0KDQojd3JhcHBlciAgI2NvbnRlbnRfbGVmdD4qOm5vdChbY2xhc3MqPSdyZXN1bHQnXSk6bm90KFtjbGFzcyo9J2MtZ3JvdXAtd3JhcHBlciddKXsNCglncmlkLWNvbHVtbi1zdGFydDogMTsNCiAgICBncmlkLWNvbHVtbi1lbmQ6IHhtYWluLWVuZDsNCn0NCi5jLWNvbnRhaW5lciBoMyBhew0KICAgIHotaW5kZXg6MTsNCn0NCi5BQy5zcC1zZXBhcmF0b3J7DQogICAgd2lkdGg6IGF1dG87DQp9DQovKnNlYXJjaCBlbmdpbmUganVtcCovDQojc2VqLWNvbnRhaW5lcnsNCiAgICBwYWRkaW5nLWxlZnQ6IDA7DQogICAgbWFyZ2luLWxlZnQ6IDA7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLnNfZm9ybV93cmFwcGVyIHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KfQ0KDQoucmVzdWx0LW1vbGVjdWxlLm5ldy1wbWQgew0KICAgIG1hcmdpbjogMCBhdXRvOw0KICAgIG1pbi13aWR0aDogODAwcHg7DQogICAgd2lkdGg6IDQwJSAhaW1wb3J0YW50Ow0KICAgIHBhZGRpbmctbGVmdDogMjBweDsNCn0NCg0KLnJlc3VsdC1tb2xlY3VsZSAjcGFnZSA+ZGl2ew0KICAgIHdpZHRoOiB1bnNldDsNCn0NCg0KLm5ldy1wbWQgI3JzX25ldyB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIwcHgpOw0KICAgIHBhZGRpbmc6IDEwcHggMCAxMHB4IDIwcHg7DQp9DQoNCi5uZXctcG1kICNyc19uZXcgdGFibGV7DQogICAgd2lkdGg6IDEwMCU7DQogICAgbWFyZ2luLXRvcDogMTJweDsNCn0NCg0KI3dyYXBwZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXMgew0KICAgIHdpZHRoOiA4MCU7DQp9DQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNTAwcHgpIHsNCiAgICBmb3JtLmZtIC5zX2lwdF93ci5iZ3sNCiAgICAgICAgbWluLXdpZHRoOiA0NTBweA0KICAgIH0NCiAgICAud3JhcHBlcl9uZXcgLmhlYWRfd3JhcHBlciAjcmVzdWx0X2xvZ297DQogICAgICAgIG1hcmdpbi1sZWZ0OiAtMTcwcHg7DQogICAgfQ0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTkyMXB4KSB7DQogICAgI3NfdGFiLnNfdGFiIC5zX3RhYl9pbm5lciB7DQogICAgICAgIHdpZHRoOiA5MDBweDsNCiAgICB9DQogICAgZm9ybS5mbSAuc19pcHRfd3IuYmd7DQogICAgICAgIG1pbi13aWR0aDogOTAwcHgNCiAgICB9DQp9DQo="},{"meta":{"name":"baiduLiteStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduLiteStyle.css?t=25.01","ts":1642048881140,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleCommonStyle.css?t=25.01","ts":1642048881117,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleOnePageStyle.css?t=25.01","ts":1642048881091,"mimetype":"text/css"},"source":"LyoqU3RvcmUgR29vZ2xlVHdvUGFnZVN0eWxlKiovDQojc2VhcmNoICNyc28gew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBmbG9hdDogdW5zZXQ7DQogICAgd2lkdGg6IDgwMHB4Ow0KICAgIG1hcmdpbjogMCBhdXRvOw0KICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoOw0KICAgIGp1c3RpZnktaXRlbXM6IHN0cmV0Y2g7DQogICAgZ3JpZC1nYXA6IDIwcHg7DQp9DQojcnNvIC5qVW1rRmI6aG92ZXIgew0KICAgIG1hcmdpbi1ib3R0b206IDMwcHg7DQogICAgbWFyZ2luLWxlZnQ6IDIwcHg7DQp9DQojcnNvIC5new0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIHBhZGRpbmc6IDBweCAyMHB4IDE1cHg7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQp9DQojcnNvPmRpdiB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQouc2VhcmNoPiNpcmVzICNyc28+Lmd7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCiNyc28+LmcgfiBkaXY6bm90KC5nKXsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIG1hcmdpbi1ib3R0b206IDEwcHg7DQp9DQojbWFpbiAjcmNudHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KYm9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCwgYm9keSAjdG9wX25hdiwgYm9keSAjZmJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KfQ0KI3JzbyBnLXNjcm9sbGluZy1jYXJvdXNlbHsNCiAgICBtYXJnaW46IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KfQ0KLmNvbHsNCiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KfQ0KLmNvbCAjY2VudGVyX2NvbHsNCiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KICAgIG1hcmdpbi1sZWZ0OiB1bnNldCAhaW1wb3J0YW50Ow0KfQ0KLnNycCAuYmlnICN0c2Z7DQogICAgd2lkdGg6IDgzM3B4Ow0KfQ0KLyoqc2VhcmNoIGJveCBhbGlnbiBjZW50ZXIqKi8NCi5zcnAgZm9ybXsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCiN0b3BfbmF2ew0KICAgIG1pbi13aWR0aDogdW5zZXQ7DQp9DQovKip2aWRlbyBib3ggYWxpZ24gY2VudGVyKiovDQpnLXNlY3Rpb24td2l0aC1oZWFkZXJ7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KI2hkdGIgI2hkdGItbXNiew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KI2hkdGIgI2hkdGItbXNiLXZpc3sNCiAgICBtYXJnaW4tbGVmdDogLTE2OXB4Ow0KfQ0KLkFDLnNwLXNlcGFyYXRvciB7DQogICAgbWFyZ2luLXRvcDogLTIwcHg7DQogICAgd2lkdGg6IDgwMHB4Ow0KICAgIG1hcmdpbi1sZWZ0OiBhdXRvOw0KICAgIG1hcmdpbi1yaWdodDogYXV0bzsNCn0NCi5GeExEcHsNCiAgICBwYWRkaW5nOiB1bnNldDsNCn0NCiNtYWluICNjbnQsICNjbnQgI2NlbnRlcl9jb2wsICNjbnQgI2Zvb3R7DQogICAgd2lkdGg6IGNhbGMoMzYuM3Z3ICsgNTI1cHgpOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxNDQwcHgpew0KICAgIC5STk5YZ2J7DQogICAgICAgIHdpZHRoOiA4MCUgIWltcG9ydGFudDsNCiAgICB9DQp9DQo="},{"meta":{"name":"googleTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleTwoPageStyle.css?t=25.01","ts":1642048881148,"mimetype":"text/css"},"source":"LyoqU3RvcmUgR29vZ2xlVHdvUGFnZVN0eWxlKiovDQojcnNvIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KfQ0KI3JzbyAualVta0ZiOmhvdmVyIHsNCiAgICBtYXJnaW4tYm90dG9tOiAzMHB4Ow0KfQ0KI3JzbyAuZywgLnZrX2N7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgcGFkZGluZzogMTBweCAyMHB4IDE1cHg7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICB0cmFuc2l0aW9uOiBhbGwgMC4yNXMgY3ViaWMtYmV6aWVyKC4yMywxLC4zMiwxKSAwczsNCn0NCi5zZWFyY2g+I2lyZXMgI3JzbyAuZ3sNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI21haW4gI3JjbnQgI3Joc3sNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQojbWFpbiAjcmNudHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI21haW4gI2NudCwgI2NudCAjY2VudGVyX2NvbCwgI2NudCAjZm9vdHsNCiAgICB3aWR0aDogY2FsYyg1NHZ3ICsgMzYwcHgpOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KYm9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCwgYm9keSAjdG9wX25hdiwgYm9keSAjZmJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KfQ0KI3JzbyAuQ09Fb2lkew0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouY29sew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQp9DQouY29sICNjZW50ZXJfY29sew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLWxlZnQ6IHVuc2V0ICFpbXBvcnRhbnQ7DQp9DQouc3JnLCAjcnNvLCAjcnNvPmRpdnsNCglkaXNwbGF5OiBncmlkOw0KCWdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LG1pbm1heCg1MCUsMWZyKSk7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCiAgICBncmlkLWdhcDogMjBweCAhaW1wb3J0YW50Ow0KICAgIGp1c3RpZnktaXRlbXM6IHN0cmV0Y2g7DQogICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7DQogICAgd2lkdGg6IDEwMCU7DQp9DQojcnNvPi5nIH4gZGl2Om5vdCguZyl7DQogICAgbWFyZ2luLWJvdHRvbTogMTBweDsNCn0NCi5BQy5zcC1zZXBhcmF0b3Igew0KICAgIG1hcmdpbi10b3A6IDEwcHg7DQogICAgbWFyZ2luLWxlZnQ6IGF1dG87DQogICAgbWFyZ2luLXJpZ2h0OiBhdXRvOw0KfQ0KLyoqc2VhcmNoIGJveCBhbGlnbiBjZW50ZXIqKi8NCi5zcnAgZm9ybXsNCiAgICBtYXJnaW46MCBhdXRvOw0KfQ0KZy1zZWN0aW9uLXdpdGgtaGVhZGVyew0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCiNoZHRiICNoZHRiLW1zYnsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICB3aWR0aDogMTAwJTsNCn0NCiNoZHRiICNoZHRiLW1zYi12aXN7DQogICAgbWFyZ2luLWxlZnQ6IC0xNjlweDsNCn0NCg=="},{"meta":{"name":"bingCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingCommonStyle.css?t=25.01","ts":1642048881204,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nQ29tbW9uU3R5bGUqLw0KYm9keSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsNCn0NCi5zaF9mYXZpY29uew0KICAgIG1hcmdpbi1sZWZ0OiAxNnB4Ow0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3QpIHsNCiAgICB3aWR0aDogNjcwcHg7DQogICAgcGFkZGluZzogMTJweCAyMHB4ICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMSk7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGEgew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBjb2xvcjogIzM0NzZkMjsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhLCAjYl9yZXN1bHRzIGgyIHN0cm9uZ3sNCiAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICBmb250LXNpemU6IG1lZGl1bTsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cz5saTpob3ZlciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjMpOw0KICAgIGJhY2tncm91bmQ6ICNGQ0ZDRkMgIWltcG9ydGFudDsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMXB4IGdyYXk7DQp9DQojYl9jb250ZW50ID4jYl9yZXN1bHRzIGxpOm5vdCgjbWZhX3Jvb3QpIGgyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIG1hcmdpbjogLTEycHggLTIwcHggMTBweCAtMjBweDsNCiAgICBwYWRkaW5nOiA4cHggMjBweCA1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwcHggMHB4Ow0KfQ0KDQphLCBhIHN0cm9uZyB7DQogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KfQ0KDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgYSBzdHJvbmcsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYSBzdHJvbmcgew0KICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCn0NCi5iX2FsZ286Zmlyc3QtY2hpbGQ6aG92ZXIgaDIgYXsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhOmhvdmVyOmFmdGVyLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6aG92ZXI6YWZ0ZXIgew0KICAgIGxlZnQ6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIHRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGE6aG92ZXIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTpob3ZlcnsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHMgYTphZnRlciwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOmFmdGVyIHsNCiAgICBjb250ZW50OiAiIjsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzNDc2ZDI7DQogICAgYm90dG9tOiAtMnB4Ow0KICAgIGxlZnQ6IDEwMCU7DQogICAgd2lkdGg6IDA7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KICAgIHRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6dmlzaXRlZCwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQgc3Ryb25nLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZCwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBoMiBhOnZpc2l0ZWQgc3Ryb25nIHsNCiAgICBjb2xvcjogIzY2MDA5OTsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCiNiX2NvbnRlbnQ+b2wjYl9jb250ZXh0ew0KICAgIGRpc3BsYXk6bm9uZTsNCn0NCmJvZHkgI2JfaGVhZGVyew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQojYl9jb250ZW50IC5iX3VuZGVyU2VhcmNoYm94ew0KICAgIG1hcmdpbi10b3A6IDEwcHg7DQp9DQojYl9oZWFkZXIgLmJfc2NvcGViYXJ7DQogICAgbWFyZ2luOiB1bnNldDsNCn0NCi8qc2VhcmNoIGVuZ2luZSBqdW1wKi8NCi50c2YtcD4ubG9nb2NvbnQsICNzZWotY29udGFpbmVyew0KICAgIG1hcmdpbi1yaWdodDogMzUwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLnRzZi1wPi5zZmliYmJjew0KICAgIG1hcmdpbi1yaWdodDogMzUwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLmJfc2VhcmNoYm94Rm9ybSAuc2FfdG17DQogICAgdGV4dC1hbGlnbjogbGVmdDsgLyogU2VhcmNoQm94IHRleHQgQ2VudGVyICovDQp9DQpib2R5ICNiX2hlYWRlciAjZXN0X3N3aXRjaHsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBwYWRkaW5nLXJpZ2h0OiAxMCU7IC8qKlRPRE8qKiovDQp9DQpib2R5ICNlc3RfY246OmFmdGVyLCBib2R5ICNlc3RfZW46OmFmdGVyew0KICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xLDEuMykgcGVyc3BlY3RpdmUoLjVlbSkgcm90YXRlWCgwZGVnKTsNCiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4xLDEuMykgcGVyc3BlY3RpdmUoLjVlbSkgcm90YXRlWCgwZGVnKTsNCn0NCkBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpew0KICAgIGJvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMS4ycmVtKTsNCiAgICB9DQp9DQovKiBTZWFyY2hJdG1lcyBCb3R0b20gdG8gVG9wIGFuaSAqLw0KI2JfY29udGVudHsNCiAgICBhbmltYXRpb24tbmFtZTogYW5pX2JvdHRvbVRvdG9wOw0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlOw0KfQ0KDQovKiBTZWFyY2hCYXIgTGVmdCB0byBSaWdodCBhbmkgKi8NCmJvZHkgI2JfaGVhZGVyIHsNCiAgICBhbmltYXRpb24tbmFtZTogYW5pX3RvcFRvYnV0dG9tOw0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCmJvZHl7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9oaWRlVG9TaG93Ow0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCi5BQy5zcC1zZXBhcmF0b3J7DQogICAgbWFyZ2luLXRvcDogLTE1cHg7DQp9DQpAa2V5ZnJhbWVzIGFuaV9sZWZ0VG9yaWdodCB7DQogICAgMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCi8qIGFuaSAqLw0KQGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3Agew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCkAtd2Via2l0LWtleWZyYW1lcyBhbmlfdG9wVG9idXR0b20gew0KICAgIDAlIHsNCiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCkAtd2Via2l0LWtleWZyYW1lcyBhbmlfaGlkZVRvU2hvdyB7DQogICAgMCUgew0KICAgICAgICBkaXNwbGF5Om5vbmU7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIGRpc3BsYXk6bm9uZTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgZGlzcGxheTpub25lOw0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCg=="},{"meta":{"name":"bingOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingOnePageStyle.css?t=25.01","ts":1642048881177,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nT25lUGFnZVN0eWxlKi8NCiNiX2NvbnRlbnQgYXNpZGV7DQogICAgZGlzcGxheTpub25lOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzew0KICAgIHdpZHRoOiA3M3Z3Ow0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIG1heC13aWR0aDogMTAwMHB4Ow0KfQ0KYm9keSAjYl9oZWFkZXJ7DQogICAgd2lkdGg6IDcydnc7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KYm9keSAjYl9jb250ZW50ew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgbWFyZ2luLWxlZnQ6IHVuc2V0Ow0KICAgIHBhZGRpbmctbGVmdDogdW5zZXQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCkgew0KICAgIHdpZHRoOjk4JTsNCn0NCg=="},{"meta":{"name":"bingTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingTwoPageStyle.css?t=25.01","ts":1642048881172,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nVHdvUGFnZVN0eWxlKi8NCiNjb250YWluZXIgI2NvbnRlbnRfbGVmdCAuaGl0X3RvcF9uZXcsDQojYl9jb250ZW50IGFzaWRlLCAjYl9yZXN1bHRzICNtZmFfcm9vdHsNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHN7DQogICAgd2lkdGg6IDczdnc7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsbWlubWF4KDUwJSwxZnIpKTsNCiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAieG1haW4geG1haW4iOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCkgew0KICAgIHdpZHRoOjk4JTsNCiAgICBtYXJnaW4tbGVmdDogMSU7DQp9DQojYl9yZXN1bHRzIC5iX2FsZ28gLmJfZGVlcCB1bHsNCiAgICB3aWR0aDogNTAlOw0KfQ0KI2JfbXNnLCAjYl9wYWd7DQogICAgZ3JpZC1jb2x1bW4tZW5kOiB4bWFpbi1lbmQ7DQogICAgZ3JpZC1jb2x1bW4tc3RhcnQ6IDE7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsNCn0NCmJvZHkgI2JfY29udGVudHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIG1hcmdpbi1sZWZ0OiB1bnNldDsNCiAgICBwYWRkaW5nLWxlZnQ6IHVuc2V0Ow0KfQ0KYm9keSAjYl9oZWFkZXJ7DQogICAgd2lkdGg6IDcydnc7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0K"},{"meta":{"name":"duckCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckCommonStyle.css?t=25.01","ts":1642048881154,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb0NvbW1vblN0eWxlKi8NCmJvZHkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQoucmVzdWx0X19pY29uIC5yZXN1bHRfX2ljb25fX2ltZywgLnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uIGltZ3sNCiAgICBkaXNwbGF5OiBub25lOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIG1heC13aWR0aDogNjcwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCB7DQogICAgd2lkdGg6IDY3MHB4Ow0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMSk7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQp9DQouZGFyay1iZyAjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOw0KfQ0KLmRhcmstYmcgI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDU7DQp9DQouZGFyay1iZyAjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X190aXRsZSBhIHsNCiAgICBjb2xvcjogI0NDQ0NDQzsNCn0NCi5kYXJrLWJnICNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX3RpdGxlIGE6dmlzaXRlZCB7DQogICAgY29sb3I6ICNiNzY2M2U7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X190aXRsZSBhIHsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOw0KICAgIG1heC13aWR0aDogNjQwcHg7DQogICAgY29sb3I6ICMzNDc2ZDI7DQogICAgZm9udC1zaXplOiBzbWFsbGVyOw0KfQ0KDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19ib2R5ew0KICAgIHBhZGRpbmc6IDEycHggMjBweCAhaW1wb3J0YW50Ow0KfQ0KDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3ZlciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjMpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAxcHggZ3JleTsNCiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAxcHggZ3JleTsNCiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxcHggZ3JheTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIG1hcmdpbjogLTEycHggLTIwcHggMHB4IC0yMHB4Ow0KICAgIHBhZGRpbmc6IDhweCAyMHB4IDVweDsNCiAgICBib3JkZXItcmFkaXVzOiA1cHggNXB4IDBweCAwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6YWZ0ZXIgew0KICAgIGNvbnRlbnQ6ICIiOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzM0NzZkMjsNCiAgICBib3R0b206IDFweDsNCiAgICBsZWZ0OiAxMDAlOw0KICAgIHdpZHRoOiAwOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCwNCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCBzdHJvbmcgew0KICAgIGNvbG9yOiAjNjYwMDk5Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyLA0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCg0KLyogU2VhcmNoSXRtZXMgQm90dG9tIHRvIFRvcCBhbmkgKi8NCiNsaW5rc193cmFwcGVyICNsaW5rcyB7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9ib3R0b21Ub3RvcDsNCiAgICBhbmltYXRpb24tZHVyYXRpb246IC4zczsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlOw0KfQ0KDQovKiBTZWFyY2hCYXIgTGVmdCB0byBSaWdodCBhbmkgKi8NCiNoZWFkZXJfd3JhcHBlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9sZWZ0VG9yaWdodDsNCiAgICBhbmltYXRpb24tZHVyYXRpb246IC4zczsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCkBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0IHsNCiAgICAwJSB7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMzJweCk7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDMwJSB7DQogICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgfQ0KfQ0KLyogYW5pICovDQpAa2V5ZnJhbWVzIGFuaV9ib3R0b21Ub3RvcCB7DQogICAgMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMzJweCk7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDMwJSB7DQogICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgfQ0KfQ0K"},{"meta":{"name":"duckOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckOnePageStyle.css?t=25.01","ts":1642048881231,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb09uZVBhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsICNvcmdhbmljLW1vZHVsZSwgLnBpbm5lZC10by1ib3R0b217DQogICAgZGlzcGxheTogbm9uZTsNCn0NCi5qcy1yZXN1bHQtaGlkZGVuLWVsew0KICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5zaXRlLXdyYXBwZXIgI3dlYl9jb250ZW50X3dyYXBwZXIgLmN3IHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIG1heC13aWR0aDogdW5zZXQ7DQogICAgbWFyZ2luLWxlZnQ6IC0xNTBweDsNCn0NCg0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAuc2VhcmNoLWZpbHRlcnMtd3JhcCwNCiN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdlew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQp9DQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciB7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCg0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgd2lkdGg6IDUwMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXJ7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbnsNCiAgICBmbG9hdDogdW5zZXQ7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"duckTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckTwoPageStyle.css?t=25.01","ts":1642048881204,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb1R3b1BhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsDQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhciwNCiNvcmdhbmljLW1vZHVsZSwNCi5waW5uZWQtdG8tYm90dG9tew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQouanMtcmVzdWx0LWhpZGRlbi1lbHsNCiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQp9DQouc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jdyB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnNlYXJjaC1maWx0ZXJzLXdyYXAsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWVzc2FnZXsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBncmlkOw0KfQ0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIgew0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwIHsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQojbGlua3Nfd3JhcHBlcnsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW46IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzew0KICAgIHdpZHRoOiA4MHZ3Ow0KICAgIC8qIFRoaXMgbWF5IGNhdXNlIFBhZ2UgZmFpbGVkICovDQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSA1MCU7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIHdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tbW9yZSwgI2xpbmtzIC5yZXN1bHQtLXNlcHsNCiAgICBncmlkLWNvbHVtbi1zdGFydDogMTsNCiAgICBncmlkLWNvbHVtbi1lbmQ6IHhtYWluLWVuZDsNCiAgICB3aWR0aDogdW5zZXQgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwOw0KICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tc2Vwew0KICAgIG1hcmdpbi1ib3R0b206IDJlbTsNCn0NCi5ib2R5LS1zZXJwIC5mb290ZXJ7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBwYWRkaW5nLWxlZnQ6IHVuc2V0Ow0KfQ0K"},{"meta":{"name":"dogeCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeCommonStyle.css?t=25.01","ts":1642048881206,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZUNvbW1vblN0eWxlKi8NCmJvZHkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQoucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX2ljb257DQogICAgZGlzcGxheTogbm9uZTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyew0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbnsNCiAgICBtYXgtd2lkdGg6IDY3MHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgew0KICAgIHdpZHRoOiA2NzBweDsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIG1hcmdpbi10b3A6IDBweDsNCiAgICBtYXJnaW4tYm90dG9tOiAyNXB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjEpOw0KICAgIHRyYW5zaXRpb246IGFsbCAwLjI1cyBjdWJpYy1iZXppZXIoLjIzLDEsLjMyLDEpIDBzOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdGl0bGUgYSB7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICBtYXgtd2lkdGg6IDY0MHB4Ow0KICAgIGNvbG9yOiAjMzQ3NmQyOw0KICAgIGZvbnQtc2l6ZTogc21hbGxlcjsNCn0NCg0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fYm9keXsNCiAgICBwYWRkaW5nOiAxMnB4IDIwcHggIWltcG9ydGFudDsNCn0NCg0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXIgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4zKTsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMXB4IGdyYXk7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsNCiAgICBtYXJnaW46IC0xMnB4IC0yMHB4IDBweCAtMjBweDsNCiAgICBwYWRkaW5nOiA4cHggMjBweCA1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwcHggMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTpob3ZlcjphZnRlciB7DQogICAgbGVmdDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmFmdGVyIHsNCiAgICBjb250ZW50OiAiIjsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzNDc2ZDI7DQogICAgYm90dG9tOiAxcHg7DQogICAgbGVmdDogMTAwJTsNCiAgICB3aWR0aDogMDsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQsDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQgc3Ryb25nIHsNCiAgICBjb2xvcjogIzY2MDA5OTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciwNCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciB7DQogICAgbGVmdDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQp9DQoNCi8qIFNlYXJjaEl0bWVzIEJvdHRvbSB0byBUb3AgYW5pICovDQojbGlua3Nfd3JhcHBlciAjbGlua3Mgew0KICAgIGFuaW1hdGlvbi1uYW1lOiBhbmlfYm90dG9tVG90b3A7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuM3M7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTsNCn0NCg0KLyogU2VhcmNoQmFyIExlZnQgdG8gUmlnaHQgYW5pICovDQojaGVhZGVyX3dyYXBwZXIgLmhlYWRlcl9fc2VhcmNoLXdyYXAgew0KICAgIGFuaW1hdGlvbi1uYW1lOiBhbmlfbGVmdFRvcmlnaHQ7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuM3M7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7DQp9DQouQUMuc3Atc2VwYXJhdG9yew0KICAgIG1hcmdpbi10b3A6IC0xNXB4Ow0KfQ0KQGtleWZyYW1lcyBhbmlfbGVmdFRvcmlnaHQgew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0zMnB4KTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMjAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgb3BhY2l0eTogMC44Ow0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQovKiBhbmkgKi8NCkBrZXlmcmFtZXMgYW5pX2JvdHRvbVRvdG9wIHsNCiAgICAwJSB7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzMnB4KTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMjAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgb3BhY2l0eTogMC44Ow0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQo="},{"meta":{"name":"dogeOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeOnePageStyle.css?t=25.01","ts":1642048881205,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZU9uZVBhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsICNvcmdhbmljLW1vZHVsZSwgLnBpbm5lZC10by1ib3R0b217DQogICAgZGlzcGxheTogbm9uZTsNCn0NCi5qcy1yZXN1bHQtaGlkZGVuLWVsew0KICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5zaXRlLXdyYXBwZXIgI3dlYl9jb250ZW50X3dyYXBwZXIgLmN3IHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMDBweCkgew0KICAgICNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIHsNCiAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgfQ0KfQ0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciwNCiN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1lc3NhZ2V7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZ3JpZDsNCn0NCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgd2lkdGg6IDUwMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXJ7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIG1heC13aWR0aDogODYwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"dogeTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeTwoPageStyle.css?t=25.01","ts":1642048881259,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZVR3b1BhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsDQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhciwNCiNvcmdhbmljLW1vZHVsZSwNCi5waW5uZWQtdG8tYm90dG9tew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQouanMtcmVzdWx0LWhpZGRlbi1lbHsNCiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQp9DQouc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jdyB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnNlYXJjaC1maWx0ZXJzLXdyYXAsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWVzc2FnZXsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBncmlkOw0KfQ0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIgew0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwIHsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQojbGlua3Nfd3JhcHBlcnsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW46IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzew0KICAgIHdpZHRoOiA4MHZ3Ow0KICAgIC8qIFRoaXMgbWF5IGNhdXNlIFBhZ2UgZmFpbGVkICovDQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSA1MCU7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIHdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tbW9yZSwgI2xpbmtzIC5yZXN1bHQtLXNlcHsNCiAgICBncmlkLWNvbHVtbi1zdGFydDogMTsNCiAgICBncmlkLWNvbHVtbi1lbmQ6IHhtYWluLWVuZDsNCiAgICB3aWR0aDogdW5zZXQgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwOw0KICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tc2Vwew0KICAgIG1hcmdpbi1ib3R0b206IDJlbTsNCn0NCi5ib2R5LS1zZXJwIC5mb290ZXJ7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBwYWRkaW5nLWxlZnQ6IHVuc2V0Ow0KfQ0K"},{"meta":{"name":"HuYanStyle.css","url":"http://ibaidu.tujidu.com/newcss/HuYanStyle.css?t=25.01","ts":1642048881250,"mimetype":"text/css"},"source":"LyoqU3RvcmUgSHVZYW5TdHlsZSoqLw0KLyoqKioqQmFpZHUtSHVZYW5TdHlsZSoqKioqLw0KYm9keVtiYWlkdV0sDQojd3JhcHBlciAjaGVhZCwNCiN3cmFwcGVyICNzX3RhYiwNCmZvcm0uZm0gLnNfaXB0X3dyLmJnew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IGFydGljbGUsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciwNCiN3cmFwcGVyICNycywNCiN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IGRvdWJsZSAjQTJEN0Q0IDsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3A6aG92ZXIsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQ6aG92ZXIsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3A6aG92ZXIgYXJ0aWNsZXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQgaDMsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AgaDMsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciBoMywNCiN3cmFwcGVyICNycyAudHR7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQovKioqQmluZy1IdVlhblN0eWxlKioqKi8NCi5uYV9jbnQgLm53c19pdG0sDQoubndzX2l0bWIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCksDQpib2R5ICNiX2hlYWRlcnsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQUFBQUFBIDsNCiAgICBib3JkZXI6IDFweCBkb3VibGUgI0EyRDdENCA7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGxpOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHMgbGkgaDJ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQovKioqR29vZ2xlLUh1WWFuU3R5bGUqKioqLw0KYm9keVtnb29nbGVdew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmRGZEZkQ7DQp9DQojcnNvIC5nLCAuYmtXTWdkPi5nLA0KLmJrV01nZCBnLWlubmVyLWNhcmQsDQojcmhzY29sICNyaHMsDQojcmhzY29sICNyaHMgLmc+ZGl2LA0KLmMyeHpUYiAuZywNCi5ydVRjSWQgLmcsDQouZm0wNklmIC5nLA0KLmNVblFLZSAuZywNCi5IYW5RbWYgLmcsDQojcnNvIC5nLA0KI3JzbyAua3AtYmxrLA0KI3JzbyAuTUdxakssDQojcnNvPmRpdjpub3QoLmcpPip7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0FBQUFBQSA7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzljZDJjZkFBOw0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCn0NCiNyc28gLmc6aG92ZXIsDQouYmtXTWdkPi5nOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyOiAxcHggZG91YmxlICM5Y2QyY2Y7DQp9DQouYmtXTWdkIC5nIGRpdi5yLA0KI3JzbyAuZyBoM3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCIDsNCn0NCi8qKipTb2dvdS1IdVlhblN0eWxlKioqKi8NCmJvZHlbc29nb3VdLCAjcGFnZWJhcl9jb250YWluZXIgYXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZkRmRGZEOw0KfQ0KI21haW4gLnJlc3VsdHM+ZGl2ew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5Y2QyY2ZBQTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojbWFpbiAucmVzdWx0cz5kaXY6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNDQ0NDQ0MgIWltcG9ydGFudDsNCiAgICBib3JkZXI6IDFweCBkb3VibGUgIzljZDJjZjsNCn0NCiNtYWluIC5yZXN1bHRzPmRpdiBoM3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCIDsNCn0NCi8qKipEdWNrX0RvZ2UtSHVZYW5TdHlsZSoqKiovDQpib2R5W2R1Y2tdLGJvZHlbZG9nZV17DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZEZkRmRDsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5Y2QyY2ZBQTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQ0NDQyAhaW1wb3J0YW50Ow0KICAgIGJvcmRlcjogMXB4IGRvdWJsZSAjOWNkMmNmOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQo="},{"meta":{"name":"SiteConfigRules.conf","url":"http://ibaidu.tujidu.com/newcss/SiteConfigRules.conf?t=25.01","ts":1642048881233,"mimetype":"text/plain"},"source":"b25saW5lREIgPSB7DQogICBiYWlkdTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDEsDQogICAgICAgTWFpblR5cGU6ICIjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciIsDQogICAgICAgU3R5cGVfTm9ybWFsOiAiaDMudD5hLCAuYy1jb250YWluZXIgYXJ0aWNsZSBhIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5jLXNob3d1cmwiLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNjb250ZW50X2xlZnQ+I2RvdWJsZT5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dLCNjb250ZW50X2xlZnQ+ZGl2W3NyY2lkXSAqW2NsYXNzfj10XSxbY2xhc3N+PW9wX2Jlc3RfYW5zd2VyX3F1ZXN0aW9uXSIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogJy8vZGl2W0BpZD0icGFnZSJdLy9hW2NvbnRhaW5zKHRleHQoKSwiw6TCuMKLw6TCuMKAw6nCocK1IildW0BocmVmXScsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiY3NzO2RpdiNjb250ZW50X2xlZnQgPiAqIiwNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7ZGl2I2NvbnRlbnRfbGVmdCIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJjc3M7I3BhZ2UiLA0KICAgICAgICAgICBzdHlsaXNoOiAiLmF1dG9wYWdlcml6ZV9wYWdlX2luZm8sIGRpdi5zcC1zZXBhcmF0b3Ige21hcmdpbi1ib3R0b206IDEwcHggIWltcG9ydGFudDt9LmMtaW1nLWJvcmRlcntkaXNwbGF5Om5vbmV9IiwNCiAgICAgICB9DQogICB9LA0KICAgc29nb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAyLA0KICAgICAgIE1haW5UeXBlOiAiI21haW4gLnJlc3VsdHM+ZGl2IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy5wdD5hLCBoMy52clRpdGxlPmEiLA0KICAgICAgIEZhdmljb25UeXBlOiAiY2l0ZVtpZCo9J2NhY2hlcmVzdWx0X2luZm9fJ10iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIi5yZXN1bHRzPmRpdiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vZGl2W0BpZD1cInBhZ2ViYXJfY29udGFpbmVyXCJdLy9hW0BpZD1cInNvZ291X25leHRcIl0iLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogIi8vZGl2W0BjbGFzcz0ncmVzdWx0cyddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAY2xhc3M9J3Jlc3VsdHMnXSIsIDJdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKCdwYWdlYmFyX2NvbnRhaW5lcicpIg0KICAgICAgIH0NCiAgIH0sDQogICBoYW9zb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAzLA0KICAgICAgIE1haW5UeXBlOiAiLnJlcy1saXN0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICIucmVzLWxpc3QgaDM+YSIsDQogICAgICAgRmF2aWNvblR5cGU6ICJjaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIucmVzdWx0cz5kaXYiLA0KICAgICAgIEJsb2NrVHlwZTogImgzIGEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICIvL2RpdltAaWQ9J3BhZ2UnXS8vYVt0ZXh0KCk9J8OkwrjCi8OkwrjCgMOpwqHCtT4nXSB8IGlkKCdzbmV4dCcpIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICIvL2RpdltAaWQ9J2NvbnRhaW5lciddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAaWQ9J2NvbnRhaW5lciddIiwgMl0sDQogICAgICAgICAgIHJlcGxhY2VFOiAiaWQoJ3BhZ2UnKSINCiAgICAgICB9DQogICB9LA0KICAgZ29vZ2xlOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNCwNCiAgICAgICBNYWluVHlwZTogIiNyc28gLmciLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmlVaDMwIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIjcnNvIC5nIGgzLC5feUU+ZGl2W2NsYXNzfj1fa2tdIGgzIiwNCiAgICAgICBCbG9ja1R5cGU6ICIucmM+ZGl2PmEsICNycywgI3JzbyAuZyBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAnaWQoInBubmV4dCIpIHwgaWQoIm5hdmJhciBuYXZjbnQgbmF2IikvL3RkW3NwYW5dL2ZvbGxvd2luZy1zaWJsaW5nOjp0ZFsxXS9hIHwgaWQoIm5uIikvcGFyZW50OjphJywNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICcvL2RpdltAaWQ9InJlcyJdJywNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7I3JlcyIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICcvL2RpdltAaWQ9Im5hdmNudCJdIHwgLy9kaXZbQGlkPSJyY250Il0vL2RpdltAcm9sZT0ibmF2aWdhdGlvbiJdJw0KICAgICAgIH0NCiAgIH0sDQogICBiaW5nOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNSwNCiAgICAgICBNYWluVHlwZTogIiNiX3Jlc3VsdHM+bGkiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmJfYXR0cmlidXRpb24+Y2l0ZSIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDIiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbnNdPmgyLCNiX3Jlc3VsdHM+bGlbY2xhc3N+PWJfYWxnb10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDIgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vYVtjb250YWlucyhAY2xhc3MsXCJzYl9wYWdOXCIpXSIsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiaWQoXCJiX3Jlc3VsdHNcIikvbGlbbm90KGNvbnRhaW5zKEBjbGFzcyxcImJfcGFnXCIpIG9yIGNvbnRhaW5zKEBjbGFzcyxcImJfYW5zIGJfdG9wXCIpKV0iLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoXCJiX3Jlc3VsdHNcIikvbGlbQGNsYXNzPVwiYl9wYWdcIl0iLCAxXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJpZChcImJfcmVzdWx0c1wiKS8vbmF2W0Byb2xlPVwibmF2aWdhdGlvblwiXSIsDQogICAgICAgfQ0KICAgfSwNCiAgIGR1Y2s6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAxMCwNCiAgICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdXJsX19kb21haW4iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgyIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcyxcInNiX3BhZ05cIildIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZChcImJfcmVzdWx0c1wiKS9saVtub3QoY29udGFpbnMoQGNsYXNzLFwiYl9wYWdcIikgb3IgY29udGFpbnMoQGNsYXNzLFwiYl9hbnMgYl90b3BcIikpXSIsDQogICAgICAgICAgIEhUX2luc2VydDogWyJpZChcImJfcmVzdWx0c1wiKS9saVtAY2xhc3M9XCJiX3BhZ1wiXSIsIDFdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKFwiYl9yZXN1bHRzXCIpLy9uYXZbQHJvbGU9XCJuYXZpZ2F0aW9uXCJdIiwNCiAgICAgICB9DQogICB9LA0KICAgZG9nZTogew0KICAgICAgU2l0ZVR5cGVJRDogMTEsDQogICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X191cmxfX2RvbWFpbiIsDQogICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgIEJsb2NrVHlwZTogImgyIGEiLA0KICAgICAgcGFnZXI6ew0KICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcywgJ3Jlc3VsdC0tbW9yZScpXSIsDQogICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0c19saW5rc19kZWVwJyldIiwNCiAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoJ2xpbmtzX3dyYXBwZXInKS8vZGl2W0BpZD0nbGlua3MnXS9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldIiwgMV0sDQogICAgICAgICAgcmVwbGFjZUU6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldL2FbY29udGFpbnModGV4dCgpLCAnw6TCuMKLw6TCuMKAw6nCocK1JyldW0BocmVmXSIsDQogICAgICB9DQogICB9LA0KICAgbUJhaWR1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA2LA0KICAgICAgIE1haW5UeXBlOiAiI2JfcmVzdWx0cz5saSIsDQogICAgICAgRmF2aWNvblR5cGU6ICIuYl9hdHRyaWJ1dGlvbj5jaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICAgQ291bnRlclR5cGU6ICIjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2Fuc10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiwjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2FsZ29dPmgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgIH0sDQogICB6aGlodTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDcsDQogICB9LA0KICAgYmFpZHVfeHVlc2h1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA4LA0KICAgICAgIE1haW5UeXBlOiAiI2NvbnRlbnRfbGVmdCAucmVzdWx0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy50PmEsICNyZXN1bHRzIC5jLWNvbnRhaW5lcj4uYy1ibG9ja2EiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdC1vcCwgLmMtc2hvd3VybCIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDMiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2NvbnRlbnRfbGVmdD4jZG91YmxlPmRpdltzcmNpZF0gKltjbGFzc349dF0sW2NsYXNzfj1vcF9iZXN0X2Fuc3dlcl9xdWVzdGlvbl0sI2NvbnRlbnRfbGVmdD5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMyBhIiwNCiAgIH0sDQogICBvdGhlcjogew0KICAgICAgIFNpdGVUeXBlSUQ6IDksDQogICB9DQp9DQo="}],"requires":[{"meta":{"name":"vue.min.js","url":"https://cdn.staticfile.org/vue/2.6.11/vue.min.js","ts":1642048881122,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"vue.min.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js","ts":1642048881225,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"less.js","url":"https://cdn.jsdelivr.net/npm/less_browser_fix@4.1.2/dist/less.js","ts":1642048881222,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"md5-wasm.min.js","url":"https://cdn.staticfile.org/md5-wasm/1.0.2/md5-wasm.min.js","ts":1642048881115,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKCl7dmFyIEIscSxRLEMsbyxFLG0sWixILGgsayxwLFIsSyxYLG49ITEsZT0hMSx0PSExO2NvbnN0IEk9ZnVuY3Rpb24oQSxCKXtBPUQud29yZHNUb0J5dGVzKGZ1bmN0aW9uKEEpeyhuZXcgRGF0ZSkuZ2V0VGltZSgpO2Zvcih2YXIgQixRLEMsbyxFLG4sZSx0LEksZyxyLHcsaSxzLGMsZixhLGIsTSx1LEc9MTczMjU4NDE5MyxsPS0yNzE3MzM4NzksVz0tMTczMjU4NDE5NCxkPTI3MTczMzg3OCxqPTgqQS5sZW5ndGgseT1ELmJ5dGVzVG9Xb3JkcyhBKSxKPTA7Sjx5Lmxlbmd0aDtKKyspeVtKXT0xNjcxMTkzNSYoeVtKXTw8OHx5W0pdPj4+MjQpfDQyNzgyNTUzNjAmKHlbSl08PDI0fHlbSl0+Pj44KTt5W2o+Pj41XXw9MTI4PDxqJTMyLHlbMTQrKDY0K2o+Pj45PDw0KV09ajtmb3IodmFyIHY9MDt2PHkubGVuZ3RoO3YrPTE2KWE9RyxiPWwsTT1XLHU9ZCxCPXlbdiswXT4+PjAsUT15W3YrMV0+Pj4wLEM9eVt2KzJdPj4+MCxvPXlbdiszXT4+PjAsRT15W3YrNF0+Pj4wLG49eVt2KzVdPj4+MCxlPXlbdis2XT4+PjAsdD15W3YrN10+Pj4wLEk9eVt2KzhdPj4+MCxnPXlbdis5XT4+PjAscj15W3YrMTBdPj4+MCx3PXlbdisxMV0+Pj4wLGk9eVt2KzEyXT4+PjAscz15W3YrMTNdPj4+MCxjPXlbdisxNF0+Pj4wLGY9eVt2KzE1XT4+PjAsRz1GKDcsMjUsRysobCZXfH5sJmQpK0ItNjgwODc2OTM2KStsLGQ9RigxMiwyMCxkKyhHJmx8fkcmVykrUS0zODk1NjQ1ODYpK0csVz1GKDE3LDE1LFcrKGQmR3x+ZCZsKStDKzYwNjEwNTgxOSkrZCxsPUYoMjIsMTAsbCsoVyZkfH5XJkcpK28tMTA0NDUyNTMzMCkrVyxHPUYoNywyNSxHKyhsJld8fmwmZCkrRS0xNzY0MTg4OTcpK2wsZD1GKDEyLDIwLGQrKEcmbHx+RyZXKStuKzEyMDAwODA0MjYpK0csVz1GKDE3LDE1LFcrKGQmR3x+ZCZsKStlLTE0NzMyMzEzNDEpK2QsbD1GKDIyLDEwLGwrKFcmZHx+VyZHKSt0LTQ1NzA1OTgzKStXLEc9Rig3LDI1LEcrKGwmV3x+bCZkKStJKzE3NzAwMzU0MTYpK2wsZD1GKDEyLDIwLGQrKEcmbHx+RyZXKStnLTE5NTg0MTQ0MTcpK0csVz1GKDE3LDE1LFcrKGQmR3x+ZCZsKStyLTQyMDYzKStkLGw9RigyMiwxMCxsKyhXJmR8flcmRykrdy0xOTkwNDA0MTYyKStXLEc9Rig3LDI1LEcrKGwmV3x+bCZkKStpKzE4MDQ2MDM2ODIpK2wsZD1GKDEyLDIwLGQrKEcmbHx+RyZXKStzLTQwMzQxMTAxKStHLFc9RigxNywxNSxXKyhkJkd8fmQmbCkrYy0xNTAyMDAyMjkwKStkLGw9RigyMiwxMCxsKyhXJmR8flcmRykrZisxMjM2NTM1MzI5KStXLEc9Rig1LDI3LEcrKGwmZHxXJn5kKStRLTE2NTc5NjUxMCkrbCxkPUYoOSwyMyxkKyhHJld8bCZ+VykrZS0xMDY5NTAxNjMyKStHLFc9RigxNCwxOCxXKyhkJmx8RyZ+bCkrdys2NDM3MTc3MTMpK2QsbD1GKDIwLDEyLGwrKFcmR3xkJn5HKStCLTM3Mzg5NzMwMikrVyxHPUYoNSwyNyxHKyhsJmR8VyZ+ZCkrbi03MDE1NTg2OTEpK2wsZD1GKDksMjMsZCsoRyZXfGwmflcpK3IrMzgwMTYwODMpK0csVz1GKDE0LDE4LFcrKGQmbHxHJn5sKStmLTY2MDQ3ODMzNSkrZCxsPUYoMjAsMTIsbCsoVyZHfGQmfkcpK0UtNDA1NTM3ODQ4KStXLEc9Rig1LDI3LEcrKGwmZHxXJn5kKStnKzU2ODQ0NjQzOCkrbCxkPUYoOSwyMyxkKyhHJld8bCZ+VykrYy0xMDE5ODAzNjkwKStHLFc9RigxNCwxOCxXKyhkJmx8RyZ+bCkrby0xODczNjM5NjEpK2QsbD1GKDIwLDEyLGwrKFcmR3xkJn5HKStJKzExNjM1MzE1MDEpK1csRz1GKDUsMjcsRysobCZkfFcmfmQpK3MtMTQ0NDY4MTQ2NykrbCxkPUYoOSwyMyxkKyhHJld8bCZ+VykrQy01MTQwMzc4NCkrRyxXPUYoMTQsMTgsVysoZCZsfEcmfmwpK3QrMTczNTMyODQ3MykrZCxsPUYoMjAsMTIsbCsoVyZHfGQmfkcpK2ktMTkyNjYwNzczNCkrVyxHPUYoNCwyOCxHKyhsXldeZCkrbi0zNzg1NTgpK2wsZD1GKDExLDIxLGQrKEdebF5XKStJLTIwMjI1NzQ0NjMpK0csVz1GKDE2LDE2LFcrKGReR15sKSt3KzE4MzkwMzA1NjIpK2QsbD1GKDIzLDksbCsoV15kXkcpK2MtMzUzMDk1NTYpK1csRz1GKDQsMjgsRysobF5XXmQpK1EtMTUzMDk5MjA2MCkrbCxkPUYoMTEsMjEsZCsoR15sXlcpK0UrMTI3Mjg5MzM1MykrRyxXPUYoMTYsMTYsVysoZF5HXmwpK3QtMTU1NDk3NjMyKStkLGw9RigyMyw5LGwrKFdeZF5HKStyLTEwOTQ3MzA2NDApK1csRz1GKDQsMjgsRysobF5XXmQpK3MrNjgxMjc5MTc0KStsLGQ9RigxMSwyMSxkKyhHXmxeVykrQi0zNTg1MzcyMjIpK0csVz1GKDE2LDE2LFcrKGReR15sKStvLTcyMjUyMTk3OSkrZCxsPUYoMjMsOSxsKyhXXmReRykrZSs3NjAyOTE4OSkrVyxHPUYoNCwyOCxHKyhsXldeZCkrZy02NDAzNjQ0ODcpK2wsZD1GKDExLDIxLGQrKEdebF5XKStpLTQyMTgxNTgzNSkrRyxXPUYoMTYsMTYsVysoZF5HXmwpK2YrNTMwNzQyNTIwKStkLGw9RigyMyw5LGwrKFdeZF5HKStDLTk5NTMzODY1MSkrVyxHPUYoNiwyNixHKyhXXihsfH5kKSkrQi0xOTg2MzA4NDQpK2wsZD1GKDEwLDIyLGQrKGxeKEd8flcpKSt0KzExMjY4OTE0MTUpK0csVz1GKDE1LDE3LFcrKEdeKGR8fmwpKStjLTE0MTYzNTQ5MDUpK2QsbD1GKDIxLDExLGwrKGReKFd8fkcpKStuLTU3NDM0MDU1KStXLEc9Rig2LDI2LEcrKFdeKGx8fmQpKStpKzE3MDA0ODU1NzEpK2wsZD1GKDEwLDIyLGQrKGxeKEd8flcpKStvLTE4OTQ5ODY2MDYpK0csVz1GKDE1LDE3LFcrKEdeKGR8fmwpKStyLTEwNTE1MjMpK2QsbD1GKDIxLDExLGwrKGReKFd8fkcpKStRLTIwNTQ5MjI3OTkpK1csRz1GKDYsMjYsRysoV14obHx+ZCkpK0krMTg3MzMxMzM1OSkrbCxkPUYoMTAsMjIsZCsobF4oR3x+VykpK2YtMzA2MTE3NDQpK0csVz1GKDE1LDE3LFcrKEdeKGR8fmwpKStlLTE1NjAxOTgzODApK2QsbD1GKDIxLDExLGwrKGReKFd8fkcpKStzKzEzMDkxNTE2NDkpK1csRz1GKDYsMjYsRysoV14obHx+ZCkpK0UtMTQ1NTIzMDcwKStsLGQ9RigxMCwyMixkKyhsXihHfH5XKSkrdy0xMTIwMjEwMzc5KStHLFc9RigxNSwxNyxXKyhHXihkfH5sKSkrQys3MTg3ODcyNTkpK2QsbD1GKDIxLDExLGwrKGReKFd8fkcpKStnLTM0MzQ4NTU1MSkrVyxHPUcrYT4+PjAsbD1sK2I+Pj4wLFc9VytNPj4+MCxkPWQrdT4+PjA7cmV0dXJuIEQuZW5kaWFuKFtHLGwsVyxkXSk7ZnVuY3Rpb24gRihBLEIsUSl7cmV0dXJuIFE8PEF8UT4+PkJ9fShBKSk7cmV0dXJuIEImJkIuYXNCeXRlcz9BOkQuYnl0ZXNUb0hleChBKX0sZz1mdW5jdGlvbihBLEIpe0E9RC53b3Jkc1RvQnl0ZXModyhBKSk7cmV0dXJuIEImJkIuYXNCeXRlcz9BOkQuYnl0ZXNUb0hleChBKX0sRD17cm90bDpmdW5jdGlvbihBLEIpe3JldHVybiBBPDxCfEE+Pj4zMi1CfSxyb3RyOmZ1bmN0aW9uKEEsQil7cmV0dXJuIEE8PDMyLUJ8QT4+PkJ9LGVuZGlhbjpmdW5jdGlvbihBKXtpZihBLmNvbnN0cnVjdG9yPT1OdW1iZXIpcmV0dXJuIDE2NzExOTM1JkQucm90bChBLDgpfDQyNzgyNTUzNjAmRC5yb3RsKEEsMjQpO2Zvcih2YXIgQj0wO0I8QS5sZW5ndGg7QisrKUFbQl09RC5lbmRpYW4oQVtCXSk7cmV0dXJuIEF9LGJ5dGVzVG9Xb3JkczpmdW5jdGlvbihBKXtmb3IodmFyIEI9W10sUT0wLEM9MDtRPEEubGVuZ3RoO1ErKyxDKz04KUJbQz4+PjVdfD1BW1FdPDwyNC1DJTMyO3JldHVybiBCfSx3b3Jkc1RvQnl0ZXM6ZnVuY3Rpb24oQSl7Zm9yKHZhciBCPVtdLFE9MDtRPDMyKkEubGVuZ3RoO1ErPTgpQi5wdXNoKEFbUT4+PjVdPj4+MjQtUSUzMiYyNTUpO3JldHVybiBCfSxieXRlc1RvSGV4OmZ1bmN0aW9uKEEpe2Zvcih2YXIgQj1bXSxRPTA7UTxBLmxlbmd0aDtRKyspQi5wdXNoKChBW1FdPj4+NCkudG9TdHJpbmcoMTYpKSxCLnB1c2goKDE1JkFbUV0pLnRvU3RyaW5nKDE2KSk7cmV0dXJuIEIuam9pbigiIil9LGhleFRvQnl0ZXM6ZnVuY3Rpb24oQSl7Zm9yKHZhciBCPVtdLFE9MDtRPEEubGVuZ3RoO1ErPTIpQi5wdXNoKHBhcnNlSW50KEEuc3Vic3RyKFEsMiksMTYpKTtyZXR1cm4gQn19LFU9NjE0NDAsTD1NYXRoLmZsb29yKDE2KlUqMS4wNjY2NjY2NjcpLHI9e307ZnVuY3Rpb24gdyhBLEIpeyhuZXcgRGF0ZSkuZ2V0VGltZSgpO3ZhciBRLEMsbyxFLG4sZSx0LEksZyxyLHcsaSxzLGMsZixhLGIsTSx1LEcsbCxXPTE3MzI1ODQxOTMsZD0tMjcxNzMzODc5LGo9LTE3MzI1ODQxOTQseT0yNzE3MzM4NzgsSj0wLHY9OCpBLmxlbmd0aCxGPWZ1bmN0aW9uKEEsQil7dmFyIFEsQyxvLEUsbj0tMSxlPU1hdGguZmxvb3IoKEEubGVuZ3RoLTEpLzQpLHQ9MDtmb3IoO2UtOD5uKys7KXQ9bjw8MixCW25dPUFbdCswXXxBW3QrMV08PDh8QVt0KzJdPDwxNnxBW3QrM108PDI0O24tLTtmb3IoO2U+bisrOylRPXZvaWQgMD09PUFbKHQ9bjw8MikrMF0/MDpBW3QrMF0sQz12b2lkIDA9PT1BW3QrMV0/MDpBW3QrMV0sbz12b2lkIDA9PT1BW3QrMl0/MDpBW3QrMl0sRT12b2lkIDA9PT1BW3QrM10/MDpBW3QrM10sQltuXT1RfEM8PDh8bzw8MTZ8RTw8MjQ7cmV0dXJuIGUrMX0oQSxxKTtmb3IocVt2Pj4+NV18PTEyODw8diUzMixGPTE1Kyg2NCsocVsxNCsoNjQrdj4+Pjk8PDQpXT12KT4+Pjk8PDQpLGw9cTtKPEY7KUY+SitMPyhwKFcpLFIoZCksSyhqKSxYKHkpLG0oVSksSis9MTYqVSxXPVooKSxkPUgoKSxqPWgoKSx5PWsoKSwwKTooYj1XLE09ZCx1PWosRz15LFE9bFtKKzBdPj4+MCxDPWxbSisxXT4+PjAsbz1sW0orMl0+Pj4wLEU9bFtKKzNdPj4+MCxuPWxbSis0XT4+PjAsZT1sW0orNV0+Pj4wLHQ9bFtKKzZdPj4+MCxJPWxbSis3XT4+PjAsZz1sW0orOF0+Pj4wLHI9bFtKKzldPj4+MCx3PWxbSisxMF0+Pj4wLGk9bFtKKzExXT4+PjAscz1sW0orMTJdPj4+MCxjPWxbSisxM10+Pj4wLGY9bFtKKzE0XT4+PjAsYT1sW0orMTVdPj4+MCxXPXgoNywyNSxXKyhkJmp8fmQmeSkrUS02ODA4NzY5MzYpK2QseT14KDEyLDIwLHkrKFcmZHx+VyZqKStDLTM4OTU2NDU4NikrVyxqPXgoMTcsMTUsaisoeSZXfH55JmQpK28rNjA2MTA1ODE5KSt5LGQ9eCgyMiwxMCxkKyhqJnl8fmomVykrRS0xMDQ0NTI1MzMwKStqLFc9eCg3LDI1LFcrKGQmanx+ZCZ5KStuLTE3NjQxODg5NykrZCx5PXgoMTIsMjAseSsoVyZkfH5XJmopK2UrMTIwMDA4MDQyNikrVyxqPXgoMTcsMTUsaisoeSZXfH55JmQpK3QtMTQ3MzIzMTM0MSkreSxkPXgoMjIsMTAsZCsoaiZ5fH5qJlcpK0ktNDU3MDU5ODMpK2osVz14KDcsMjUsVysoZCZqfH5kJnkpK2crMTc3MDAzNTQxNikrZCx5PXgoMTIsMjAseSsoVyZkfH5XJmopK3ItMTk1ODQxNDQxNykrVyxqPXgoMTcsMTUsaisoeSZXfH55JmQpK3ctNDIwNjMpK3ksZD14KDIyLDEwLGQrKGomeXx+aiZXKStpLTE5OTA0MDQxNjIpK2osVz14KDcsMjUsVysoZCZqfH5kJnkpK3MrMTgwNDYwMzY4MikrZCx5PXgoMTIsMjAseSsoVyZkfH5XJmopK2MtNDAzNDExMDEpK1csaj14KDE3LDE1LGorKHkmV3x+eSZkKStmLTE1MDIwMDIyOTApK3ksZD14KDIyLDEwLGQrKGomeXx+aiZXKSthKzEyMzY1MzUzMjkpK2osVz14KDUsMjcsVysoZCZ5fGomfnkpK0MtMTY1Nzk2NTEwKStkLHk9eCg5LDIzLHkrKFcmanxkJn5qKSt0LTEwNjk1MDE2MzIpK1csaj14KDE0LDE4LGorKHkmZHxXJn5kKStpKzY0MzcxNzcxMykreSxkPXgoMjAsMTIsZCsoaiZXfHkmflcpK1EtMzczODk3MzAyKStqLFc9eCg1LDI3LFcrKGQmeXxqJn55KStlLTcwMTU1ODY5MSkrZCx5PXgoOSwyMyx5KyhXJmp8ZCZ+aikrdyszODAxNjA4MykrVyxqPXgoMTQsMTgsaisoeSZkfFcmfmQpK2EtNjYwNDc4MzM1KSt5LGQ9eCgyMCwxMixkKyhqJld8eSZ+Vykrbi00MDU1Mzc4NDgpK2osVz14KDUsMjcsVysoZCZ5fGomfnkpK3IrNTY4NDQ2NDM4KStkLHk9eCg5LDIzLHkrKFcmanxkJn5qKStmLTEwMTk4MDM2OTApK1csaj14KDE0LDE4LGorKHkmZHxXJn5kKStFLTE4NzM2Mzk2MSkreSxkPXgoMjAsMTIsZCsoaiZXfHkmflcpK2crMTE2MzUzMTUwMSkraixXPXgoNSwyNyxXKyhkJnl8aiZ+eSkrYy0xNDQ0NjgxNDY3KStkLHk9eCg5LDIzLHkrKFcmanxkJn5qKStvLTUxNDAzNzg0KStXLGo9eCgxNCwxOCxqKyh5JmR8VyZ+ZCkrSSsxNzM1MzI4NDczKSt5LGQ9eCgyMCwxMixkKyhqJld8eSZ+Vykrcy0xOTI2NjA3NzM0KStqLFc9eCg0LDI4LFcrKGReal55KStlLTM3ODU1OCkrZCx5PXgoMTEsMjEseSsoV15kXmopK2ctMjAyMjU3NDQ2MykrVyxqPXgoMTYsMTYsaisoeV5XXmQpK2krMTgzOTAzMDU2MikreSxkPXgoMjMsOSxkKyhqXnleVykrZi0zNTMwOTU1NikraixXPXgoNCwyOCxXKyhkXmpeeSkrQy0xNTMwOTkyMDYwKStkLHk9eCgxMSwyMSx5KyhXXmReaikrbisxMjcyODkzMzUzKStXLGo9eCgxNiwxNixqKyh5XldeZCkrSS0xNTU0OTc2MzIpK3ksZD14KDIzLDksZCsoal55XlcpK3ctMTA5NDczMDY0MCkraixXPXgoNCwyOCxXKyhkXmpeeSkrYys2ODEyNzkxNzQpK2QseT14KDExLDIxLHkrKFdeZF5qKStRLTM1ODUzNzIyMikrVyxqPXgoMTYsMTYsaisoeV5XXmQpK0UtNzIyNTIxOTc5KSt5LGQ9eCgyMyw5LGQrKGpeeV5XKSt0Kzc2MDI5MTg5KStqLFc9eCg0LDI4LFcrKGReal55KStyLTY0MDM2NDQ4NykrZCx5PXgoMTEsMjEseSsoV15kXmopK3MtNDIxODE1ODM1KStXLGo9eCgxNiwxNixqKyh5XldeZCkrYSs1MzA3NDI1MjApK3ksZD14KDIzLDksZCsoal55XlcpK28tOTk1MzM4NjUxKStqLFc9eCg2LDI2LFcrKGpeKGR8fnkpKStRLTE5ODYzMDg0NCkrZCx5PXgoMTAsMjIseSsoZF4oV3x+aikpK0krMTEyNjg5MTQxNSkrVyxqPXgoMTUsMTcsaisoV14oeXx+ZCkpK2YtMTQxNjM1NDkwNSkreSxkPXgoMjEsMTEsZCsoeV4oanx+VykpK2UtNTc0MzQwNTUpK2osVz14KDYsMjYsVysoal4oZHx+eSkpK3MrMTcwMDQ4NTU3MSkrZCx5PXgoMTAsMjIseSsoZF4oV3x+aikpK0UtMTg5NDk4NjYwNikrVyxqPXgoMTUsMTcsaisoV14oeXx+ZCkpK3ctMTA1MTUyMykreSxkPXgoMjEsMTEsZCsoeV4oanx+VykpK0MtMjA1NDkyMjc5OSkraixXPXgoNiwyNixXKyhqXihkfH55KSkrZysxODczMzEzMzU5KStkLHk9eCgxMCwyMix5KyhkXihXfH5qKSkrYS0zMDYxMTc0NCkrVyxqPXgoMTUsMTcsaisoV14oeXx+ZCkpK3QtMTU2MDE5ODM4MCkreSxkPXgoMjEsMTEsZCsoeV4oanx+VykpK2MrMTMwOTE1MTY0OSkraixXPXgoNiwyNixXKyhqXihkfH55KSkrbi0xNDU1MjMwNzApK2QseT14KDEwLDIyLHkrKGReKFd8fmopKStpLTExMjAyMTAzNzkpK1csaj14KDE1LDE3LGorKFdeKHl8fmQpKStvKzcxODc4NzI1OSkreSxkPXgoMjEsMTEsZCsoeV4oanx+VykpK3ItMzQzNDg1NTUxKStqLEorPTE2LFc9VytiPj4+MCxkPWQrTT4+PjAsaj1qK3U+Pj4wLHk9eStHPj4+MCk7cmV0dXJuIEQuZW5kaWFuKFtXLGQsaix5XSk7ZnVuY3Rpb24geChBLEIsUSl7cmV0dXJuIFE8PEF8UT4+PkJ9fWNvbnN0IGk9KCJmdW5jdGlvbiIhPXR5cGVvZiBhdG9iJiYiZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZT9yZXF1aXJlKCJhdG9iIik6YXRvYikoIkFHRnpiUUVBQUFBQkpRWmdBWDhBWUFBQVlBSi9md0JnQ0g5L2YzOS9mMzkvQVg5Z0JIOS9mMzhCZjJBQUFYOENIZ0lIYVcxd2IzSjBjd05zYjJjQUFBZHBiWEJ2Y25SekEyMWxiUUlBQVFNek1nQUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd1FGQlFVRkJRQUFBQUFBQmtnTGZ3RkJnY2FVdWdZTGZ3RkJpZGUyL240TGZ3RkIvcm5yeFhrTGZ3RkI5cWpKZ1FFTGZ3RkJBQXQvQVVFQUMzOEJRUUFMZndGQkFBdC9BVUVBQzM4QlFRQUxmd0ZCQUFzSHZBSWxCM0YxWVVaMWJHd0FKd2h2Ym1WR2RXeHNRUUFYQ0c5dVpVWjFiR3hDQUJnSWIyNWxSblZzYkVNQUdRaHZibVZHZFd4c1JBQWFCV3h2YjNCekFBRUViRzl2Y0FBQ0JXeHZiM0JCQUFNR2JHOXZjRUV4QUFRR2JHOXZjRUV5QUFVR2JHOXZjRUV6QUFZR2JHOXZjRUUwQUFjRmJHOXZjRUlBQ0Fac2IyOXdRakVBQ1Fac2IyOXdRaklBQ2dac2IyOXdRak1BQ3dac2IyOXdRalFBREFWc2IyOXdRd0FOQm14dmIzQkRNUUFPQm14dmIzQkRNZ0FQQm14dmIzQkRNd0FRQm14dmIzQkROQUFSQld4dmIzQkVBQklHYkc5dmNFUXhBQk1HYkc5dmNFUXlBQlFHYkc5dmNFUXpBQlVHYkc5dmNFUTBBQllFWjJWMFFRQXBCR2RsZEVJQUtnUm5aWFJEQUNzRVoyVjBSQUFzQkdkbGRGZ0FMUVJ6WlhSQkFDNEVjMlYwUWdBdkJITmxkRU1BTUFSelpYUkVBREVFYzJWMFdBQXlDc29QTWxzQkFYOUJBQ1FJSUFCQkJuUWhBUUpBQTBBakNDQUJSZzBCSXdBa0JDTUJKQVVqQWlRR0l3TWtCeEFDSXdRakFHb2tBQ01GSXdGcUpBRWpCaU1DYWlRQ0l3Y2pBMm9rQXlNSVFjQUFhaVFJREFBTEN5TUlJd3BxSkFvTEVRQWpDQ01LYWlRSkVBTVFDQkFORUJJTENnQVFCQkFGRUFZUUJ3dENBRUg0eUtxN2ZVRUFJd2xxS0FJQUVCZEIxdTZleG41QkJDTUphaWdDQUJBYVFkdmhnYUVDUVFnakNXb29BZ0FRR1VIdW5mZU5mRUVNSXdscUtBSUFFQmdMUVFCQnI1L3dxMzlCRUNNSmFpZ0NBQkFYUWFxTW43d0VRUlFqQ1dvb0FnQVFHa0dUak1IQmVrRVlJd2xxS0FJQUVCbEJnYXFhYWtFY0l3bHFLQUlBRUJnTFFBQkIyTEdDekFaQklDTUphaWdDQUJBWFFhL3ZrOXA0UVNRakNXb29BZ0FRR2tHeHQzMUJLQ01KYWlnQ0FCQVpRYjZ2ODhwNFFTd2pDV29vQWdBUUdBdEJBRUdpb3NEY0JrRXdJd2xxS0FJQUVCZEJrK1BoYkVFMEl3bHFLQUlBRUJwQmpvZmxzM3BCT0NNSmFpZ0NBQkFaUWFHUTBNMEVRVHdqQ1dvb0FnQVFHQXNLQUJBSkVBb1FDeEFNQzBJQVFlTEsrTEIvUVFRakNXb29BZ0FRRzBIQTVvS0NmRUVZSXdscUtBSUFFQjVCMGJUNXNnSkJMQ01KYWlnQ0FCQWRRYXFQMjgxK1FRQWpDV29vQWdBUUhBdEJBRUhkb0x5eGZVRVVJd2xxS0FJQUVCdEIwNmlRRWtFb0l3bHFLQUlBRUI1QmdjMkh4WDFCUENNSmFpZ0NBQkFkUWNqM3o3NStRUkFqQ1dvb0FnQVFIQXRDQUVIbW00ZVBBa0VrSXdscUtBSUFFQnRCMW8vY21YeEJPQ01KYWlnQ0FCQWVRWWViMUtaL1FRd2pDV29vQWdBUUhVSHRxZWlxQkVFZ0l3bHFLQUlBRUJ3TFFRQkJoZEtQejNwQk5DTUphaWdDQUJBYlFmakh2bWRCQ0NNSmFpZ0NBQkFlUWRtRnZMc0dRUndqQ1dvb0FnQVFIVUdLbWFucGVFRXdJd2xxS0FJQUVCd0xDZ0FRRGhBUEVCQVFFUXMvQUVIQzhtaEJGQ01KYWlnQ0FCQWZRWUh0eDd0NFFTQWpDV29vQWdBUUlrR2l3dlhzQmtFc0l3bHFLQUlBRUNGQmpQQ1ViMEU0SXdscUtBSUFFQ0FMUWdCQnhOVDdwWHBCQkNNSmFpZ0NBQkFmUWFtZis5NEVRUkFqQ1dvb0FnQVFJa0hnbHUyMWYwRWNJd2xxS0FJQUVDRkI4UGorOVh0QktDTUphaWdDQUJBZ0MwRUFRY2I5N2NRQ1FUUWpDV29vQWdBUUgwSDZ6NFRWZmtFQUl3bHFLQUlBRUNKQmhlRzhwMzFCRENNSmFpZ0NBQkFoUVlXNm9DUkJHQ01KYWlnQ0FCQWdDMElBUWJtZzA4NTlRU1FqQ1dvb0FnQVFIMEhscys2MmZrRXdJd2xxS0FJQUVDSkIrUG1KL1FGQlBDTUphaWdDQUJBaFFlV3NzYVY4UVFnakNXb29BZ0FRSUFzS0FCQVRFQlFRRlJBV0MwRUFRY1RFcEtGL1FRQWpDV29vQWdBUUkwR1gvNnVaQkVFY0l3bHFLQUlBRUNaQnA4ZlEzSHBCT0NNSmFpZ0NBQkFsUWJuQXptUkJGQ01KYWlnQ0FCQWtDMEVBUWNPejdhb0dRVEFqQ1dvb0FnQVFJMEdTbWJQNGVFRU1Jd2xxS0FJQUVDWkIvZWkvZjBFb0l3bHFLQUlBRUNWQjBidVJySGhCQkNNSmFpZ0NBQkFrQzBFQVFjLzhvZjBHUVNBakNXb29BZ0FRSTBIZ3piTnhRVHdqQ1dvb0FnQVFKa0dVaG9XWWVrRVlJd2xxS0FJQUVDVkJvYU9nOEFSQk5DTUphaWdDQUJBa0MwSUFRWUw5emJwL1FSQWpDV29vQWdBUUkwRzE1T3ZwZTBFc0l3bHFLQUlBRUNaQnU2WGYxZ0pCQ0NNSmFpZ0NBQkFsUVpHbm05eCtRU1FqQ1dvb0FnQVFKQXNyQVFGL1FYOGpBWE1qQTNFakFTTUNjWElqQUdvZ0FHb2dBV29pQWtFSGRDQUNRUmwyY2lNQmFpUUFDeXNCQVg5QmZ5TUNjeU1BY1NNQ0l3TnhjaU1CYWlBQWFpQUJhaUlDUVJaMElBSkJDblp5SXdKcUpBRUxLd0VCZjBGL0l3TnpJd0Z4SXdNakFIRnlJd0pxSUFCcUlBRnFJZ0pCRVhRZ0FrRVBkbklqQTJva0Fnc3JBUUYvUVg4akFITWpBbkVqQUNNQmNYSWpBMm9nQUdvZ0FXb2lBa0VNZENBQ1FSUjJjaU1BYWlRREN5c0JBWDhqQWtGL0l3TnpjU01CSXdOeGNpTUFhaUFBYWlBQmFpSUNRUVYwSUFKQkczWnlJd0ZxSkFBTEt3RUJmeU1EUVg4akFITnhJd0lqQUhGeUl3RnFJQUJxSUFGcUlnSkJGSFFnQWtFTWRuSWpBbW9rQVFzckFRRi9Jd0JCZnlNQmMzRWpBeU1CY1hJakFtb2dBR29nQVdvaUFrRU9kQ0FDUVJKMmNpTURhaVFDQ3lzQkFYOGpBVUYvSXdKemNTTUFJd0p4Y2lNRGFpQUFhaUFCYWlJQ1FRbDBJQUpCRjNaeUl3QnFKQU1MSlFFQmZ5TUJJd0p6SXdOekl3QnFJQUJxSUFGcUlnSkJCSFFnQWtFY2RuSWpBV29rQUFzbEFRRi9Jd0lqQTNNakFITWpBV29nQUdvZ0FXb2lBa0VYZENBQ1FRbDJjaU1DYWlRQkN5VUJBWDhqQXlNQWN5TUJjeU1DYWlBQWFpQUJhaUlDUVJCMElBSkJFSFp5SXdOcUpBSUxKUUVCZnlNQUl3RnpJd0p6SXdOcUlBQnFJQUZxSWdKQkMzUWdBa0VWZG5JakFHb2tBd3NvQVFGL1FYOGpBM01qQVhJakFuTWpBR29nQUdvZ0FXb2lBa0VHZENBQ1FScDJjaU1CYWlRQUN5Z0JBWDlCZnlNQWN5TUNjaU1EY3lNQmFpQUFhaUFCYWlJQ1FSVjBJQUpCQzNaeUl3SnFKQUVMS0FFQmYwRi9Jd0Z6SXdOeUl3QnpJd0pxSUFCcUlBRnFJZ0pCRDNRZ0FrRVJkbklqQTJva0Fnc29BUUYvUVg4akFuTWpBSElqQVhNakEyb2dBR29nQVdvaUFrRUtkQ0FDUVJaMmNpTUFhaVFEQ3lVQkFYOGdBQ0FBSUFFZ0FpQURFQ2hxSUFacUlBZHFJZ2dnQkhRZ0NDQUZkbklnQVdvTERRQkJmeUFEY3lBQmNpQUNjd3NFQUNNQUN3UUFJd0VMQkFBakFnc0VBQ01EQ3dRQUl3b0xCZ0FnQUNRQUN3WUFJQUFrQVFzR0FDQUFKQUlMQmdBZ0FDUURDd1lBSUFBa0Nnc0Fzd1VFYm1GdFpRR2VBek1BQTJ4dlp3RUZiRzl2Y0hNQ0JHeHZiM0FEQld4dmIzQkJCQVpzYjI5d1FURUZCbXh2YjNCQk1nWUdiRzl2Y0VFekJ3WnNiMjl3UVRRSUJXeHZiM0JDQ1Fac2IyOXdRakVLQm14dmIzQkNNZ3NHYkc5dmNFSXpEQVpzYjI5d1FqUU5CV3h2YjNCRERnWnNiMjl3UXpFUEJteHZiM0JETWhBR2JHOXZjRU16RVFac2IyOXdRelFTQld4dmIzQkVFd1pzYjI5d1JERVVCbXh2YjNCRU1oVUdiRzl2Y0VRekZnWnNiMjl3UkRRWENHOXVaVVoxYkd4QkdBaHZibVZHZFd4c1Foa0liMjVsUm5Wc2JFTWFDRzl1WlVaMWJHeEVHd2gwZDI5R2RXeHNRUndJZEhkdlJuVnNiRUlkQ0hSM2IwWjFiR3hESGdoMGQyOUdkV3hzUkI4SWRISmxSblZzYkVFZ0NIUnlaVVoxYkd4Q0lRaDBjbVZHZFd4c1F5SUlkSEpsUm5Wc2JFUWpDSEYxWVVaMWJHeEJKQWh4ZFdGR2RXeHNRaVVJY1hWaFJuVnNiRU1tQ0hGMVlVWjFiR3hFSndkeGRXRkdkV3hzS0FoeGRXRk1iMmRwWXlrRVoyVjBRU29FWjJWMFFpc0VaMlYwUXl3RVoyVjBSQzBFWjJWMFdDNEVjMlYwUVM4RWMyVjBRakFFYzJWMFF6RUVjMlYwUkRJRWMyVjBXQUtLQWpNQUFRQUFBUUlBQUFFSWJuVnRiRzl2Y0hNQ0FBTUFCQUFGQUFZQUJ3QUlBQWtBQ2dBTEFBd0FEUUFPQUE4QUVBQVJBQklBRXdBVUFCVUFGZ0FYQXdBQUFRQUNBVzRZQXdBQUFRQUNBVzRaQXdBQUFRQUNBVzRhQXdBQUFRQUNBVzRiQXdBQUFRQUNBVzRjQXdBQUFRQUNBVzRkQXdBQUFRQUNBVzRlQXdBQUFRQUNBVzRmQXdBQUFRQUNBVzRnQXdBQUFRQUNBVzRoQXdBQUFRQUNBVzRpQXdBQUFRQUNBVzRqQXdBQUFRQUNBVzRrQXdBQUFRQUNBVzRsQXdBQUFRQUNBVzRtQXdBQUFRQUNBVzRuQ1FBQUFRQUNBQU1BQkFBRkFBWUFCd0FJQVc0b0JBQUFBUUFDQUFNQUtRQXFBQ3NBTEFBdEFDNEJBQUF2QVFBQU1BRUFBREVCQUFBeUFRQUEiKTtyLnRoZW49ZnVuY3Rpb24oQSl7cmV0dXJuIEM9QSxjKCkscn0sci5jYXRjaD1mdW5jdGlvbihBKXtyZXR1cm4gbz1BLGYoKSxyfSwib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1BKSwiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoIm1kNVdBU00iLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIEF9KSwidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvdy5tZDVXQVNNPUEpLCJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsJiYoZ2xvYmFsLm1kNVdBU009QSk7ZnVuY3Rpb24gQShBKXtyZXR1cm4gRT0obmV3IERhdGUpLmdldFRpbWUoKSxBJiYib2JqZWN0Ij09dHlwZW9mIEE/ImZ1bmN0aW9uIj09dHlwZW9mIEJ1ZmZlciYmQS5jb25zdHJ1Y3Rvcj09PUJ1ZmZlcj90PUE6QS5jb25zdHJ1Y3Rvcj09PVVpbnQ4QXJyYXl8fEEuY29uc3RydWN0b3I9PT1BcnJheUJ1ZmZlcj90PUEuY29uc3RydWN0b3I9PT1BcnJheUJ1ZmZlcj9uZXcgVWludDhBcnJheShBKTpBOmYobmV3IFR5cGVFcnJvcigiRmlyc3QgcGFyYW1ldGVyIG11c3QgYmUgQnVmZmVyLCBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IikpOmYobmV3IFR5cGVFcnJvcigiRmlyc3QgcGFyYW1ldGVyIG11c3QgYmUgQnVmZmVyLCBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IikpLHQmJihBPXQubGVuZ3RoLFdlYkFzc2VtYmx5JiZBPkw/KEI9bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDozMmU2PEE/NjRlNjxBPzEyOGU2PEE/NDA5NjoyMDQ4OjEwMjQ6NTEyfSkscT1uZXcgVWludDMyQXJyYXkoQi5idWZmZXIpLChRPXtpbXBvcnRzOnt9fSkuaW1wb3J0cy5tZW09QixRLmltcG9ydHMubG9nPWNvbnNvbGUubG9nLFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGZ1bmN0aW9uKEEpe3ZhciBCLFEsQyxvPS0xO0I9QS5sZW5ndGgtMSxRPW5ldyBBcnJheUJ1ZmZlcihBLmxlbmd0aCksQz1uZXcgVWludDhBcnJheShRKTtmb3IoO0I+bysrOylDW29dPUEuY2hhckNvZGVBdChvKTtyZXR1cm4gQ30oaSkuYnVmZmVyLFEpLnRoZW4ocykpOmMoSSh0KSkpLHJ9ZnVuY3Rpb24gcyhBKXt2YXIgQj1BLmluc3RhbmNlLmV4cG9ydHM7bT1CLmxvb3BzLEIubG9vcCxaPUIuZ2V0QSxIPUIuZ2V0QixoPUIuZ2V0QyxrPUIuZ2V0RCxCLmdldFgscD1CLnNldEEsUj1CLnNldEIsSz1CLnNldEMsWD1CLnNldEQsQi5zZXRYLGMoZyh0KSl9ZnVuY3Rpb24gYyhBKXsobj1BP0E6bikmJkMmJiJmdW5jdGlvbiI9PXR5cGVvZiBDJiYoQyhuLChuZXcgRGF0ZSkuZ2V0VGltZSgpLUUpLEM9bnVsbCxuPSExKX1mdW5jdGlvbiBmKEEpeyhlPUE/QTplKSYmbyYmImZ1bmN0aW9uIj09dHlwZW9mIG8mJihvKGUpLG89bnVsbCxlPSExKX19KCk7"}]},{"name":"ClipConverter","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.youtube.com/*","*://www.clipconverter.cc/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1630066351330,"data":{}},"enabled":false,"position":4,"file_url":"https://www.clipconverter.cc/extension/clipconverter.user.js","uuid":"fa9b967a-9f18-4b97-af90-3ed41e12f755","source":""},{"name":"GitHub 汉化插件","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://*.github.com/*","https://*.github.com/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1630066351412,"data":{}},"enabled":true,"position":5,"file_url":"https://openuserjs.org/install/52cik/GitHub_%E6%B1%89%E5%8C%96%E6%8F%92%E4%BB%B6.user.js","uuid":"2abf6de8-2a2b-4491-a3bc-498ae5e7152a","source":"","requires":[{"meta":{"name":"locals.js","url":"https://52cik.github.io/github-hans/locals.js?v1.6.3","ts":1642323440547,"mimetype":"text/javascript"},"source":""}]},{"name":"Yet Another Weibo Filter","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["miaopai.com","sina.cn","sina.com.cn","sinaimg.cn","sinajs.cn","t.cn","weibo.com"],"orig_excludes":["*://weibo.com/a/bind/*","*://account.weibo.com/*","*://kefu.weibo.com/*","*://photo.weibo.com/*","*://security.weibo.com/*","*://verified.weibo.com/*","*://vip.weibo.com/*","*://open.weibo.com/*","*://passport.weibo.com/*"],"orig_includes":["*://weibo.com/*","*://*.weibo.com/*","*://t.cn/*"],"orig_matches":["*://*.weibo.com/*","*://t.cn/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"local::globalConfig":"s{\"short_url_wo_confirm\":false}","local::user3655689037Config":"s{\"script_update_whatsnew.last\":96,\"filter_follow_check\":false,\"filter_follow_check.frequency\":259200000,\"uncheck_follow_presenter\":true,\"show_article_without_follow\":true,\"filter_homepage_newest_feeds\":false,\"filter_homepage_single_group\":false,\"filter_homepage_multi_group\":false,\"filter_homepage_auto_load\":false,\"filter_homepage_desktop_notify\":false,\"filter_profile_show_all\":false,\"filter_manually_hide\":false,\"pause_filter\":false,\"filter_original_discover\":false,\"filter_original_follower\":false,\"filter_my_feed\":true,\"filter_my_original\":false,\"filter_mention_me\":false,\"filter_ad_feed\":false,\"filter_fans_top\":false,\"filter_weibo_product\":false,\"filter_tb_tm_feed\":false,\"filter_weibo_pay\":false,\"filter_user_like\":false,\"filter_fake_weibo\":false,\"filter_deleted_forward\":false,\"filter_comment_and_forward\":false,\"filter_vote\":false,\"filter_red_pack\":false,\"filter_image_tag\":false,\"filter_koi_forward\":false,\"filter_app_item\":false,\"filter_wenda\":false,\"filter_wenwo_dr\":false,\"filter_yizhibo\":false,\"filter_paid\":false,\"filter_multiple_topics_feed\":false,\"filter_fast_forward\":false,\"filter_Place\":false,\"filter_Movie\":false,\"filter_Book\":false,\"filter_Topic\":false,\"filter_Music\":false,\"filter_Stock\":false,\"flooding_author\":false,\"flooding_forward\":false,\"comment_layout_by_time\":false,\"comment_layout_hide_sub\":false,\"filter_comment_show_my\":false,\"filter_comment_face_count\":false,\"filter_comment_face_type\":false,\"filter_comment_wo_content\":false,\"filter_comment_with_forward\":false,\"clean_icons_level\":false,\"clean_icons_member\":false,\"clean_icons_approve\":false,\"clean_icons_approve_co\":false,\"clean_icons_approve_dead\":false,\"clean_icons_bigfun\":false,\"clean_icons_club\":false,\"clean_icons_v_girl\":false,\"clean_icons_supervisor\":false,\"clean_icons_taobao\":false,\"clean_icons_cheng\":false,\"clean_icons_gongyi\":false,\"clean_icons_zongyika\":false,\"clean_icons_others\":false,\"clean_follow_single\":false,\"clean_follow_at_me\":false,\"clean_follow_discover\":false,\"clean_follow_fast_forward\":false,\"clean_follow_video\":false,\"clean_follow_recommend\":false,\"clean_nav_logo_img\":false,\"clean_nav_main\":false,\"clean_nav_tv\":false,\"clean_nav_hot\":false,\"clean_nav_game\":false,\"clean_nav_hot_search\":false,\"clean_nav_notice_new\":false,\"clean_nav_new\":false,\"clean_left_level\":false,\"clean_left_home\":false,\"clean_left_fav\":false,\"clean_left_like\":false,\"clean_left_hot\":false,\"clean_left_tv\":false,\"clean_left_new_feed\":false,\"clean_left_friends\":false,\"clean_left_group_to_me\":false,\"clean_left_special\":false,\"clean_left_whisper\":false,\"clean_left_v_plus\":false,\"clean_left_new\":false,\"clean_left_news\":false,\"clean_left_count\":false,\"clean_middle_recommended_topic\":false,\"clean_middle_feed_recommend\":false,\"clean_middle_member_tip\":false,\"clean_right_info\":false,\"clean_right_v7_entry\":false,\"clean_right_ranks\":false,\"clean_right_hot_topic\":false,\"clean_right_interest\":false,\"clean_right_member\":false,\"clean_right_groups\":false,\"clean_right_recom_group_user\":false,\"clean_right_hongbao_rank\":false,\"clean_right_att_feed\":false,\"clean_right_notice\":false,\"clean_feed_recommend\":false,\"clean_feed_feed_outer_tip\":false,\"clean_feed_feed_inner_tip\":false,\"clean_feed_feed_tip\":false,\"clean_feed_group_tip\":false,\"clean_feed_vip_background\":false,\"clean_feed_last_pic\":false,\"clean_feed_pic_tag\":false,\"clean_feed_son_title\":false,\"clean_feed_card\":false,\"clean_feed_article_pay\":false,\"clean_feed_tag\":false,\"clean_feed_related_link\":false,\"clean_feed_source\":false,\"clean_feed_pop\":false,\"clean_feed_like\":false,\"clean_feed_like_comment\":false,\"clean_feed_like_attitude\":false,\"clean_feed_forward\":false,\"clean_feed_favorite\":false,\"clean_feed_promote_other\":false,\"clean_feed_report\":false,\"clean_feed_use_card_background\":false,\"clean_profile_move_things\":false,\"clean_profile_cover\":false,\"clean_profile_bg_img\":false,\"clean_profile_badge_icon\":false,\"clean_profile_verify\":false,\"clean_profile_edit_person_info\":false,\"clean_profile_stats\":false,\"clean_profile_my_data\":false,\"clean_profile_suggest_user\":false,\"clean_profile_group\":false,\"clean_profile_relation\":false,\"clean_profile_album\":false,\"clean_profile_hot_topic\":false,\"clean_profile_hot_weibo\":false,\"clean_profile_recommend_feed\":false,\"clean_profile_user_list\":false,\"clean_profile_hongbao\":false,\"clean_profile_wenwo_dr\":false,\"clean_profile_timeline\":false,\"clean_message_help\":false,\"clean_message_feedback\":false,\"clean_other_ads\":false,\"clean_other_music\":false,\"clean_other_template\":false,\"clean_other_home_tip\":false,\"clean_other_footer\":false,\"clean_other_im\":false,\"clean_other_im_news\":false,\"clean_other_back_top\":false,\"clean_other_tip\":false,\"clean_other_related_feeds\":false,\"clean_other_related_video\":false,\"clean_other_related_article\":false,\"clean_other_send_weibo\":false,\"layout_nav_auto_hide\":false,\"layout_nav_classical\":false,\"layout_nav_hide_name\":false,\"layout_left_messages\":false,\"layout_side_merge\":false,\"layout_side_position\":false,\"layout_side_show_all_groups\":false,\"layout_left_move\":true,\"layout_right_move\":true,\"layout_other_move\":true,\"chat_page_disable_unload_prompt\":false,\"font_family\":false,\"layout_avatar_shape\":false,\"layout_fast_face\":false,\"layout_locale_timezone\":false,\"feed_absolute_time\":false,\"hide_hot_topic_large_read\":false,\"layout_theme_apply\":false,\"layout_nav_dark\":false,\"layout_theme_color\":false,\"custom_css\":true,\"custom_css.css\":\"\",\"feed_no_space\":false,\"feed_source_at_bottom\":false,\"feed_author_content_nowrap\":false,\"feed_small_image\":false,\"feed_increase_width\":false,\"feed_button_order\":false,\"feed_button_order_comment\":false,\"feed_font_size\":false,\"feed_long_expand\":false,\"feed_long_expand.count\":200,\"feed_long_expand.br\":30,\"feed_content_line_break\":false,\"feed_link_use_url\":false,\"feed_unicode_emoji\":false,\"show_vote_result\":false,\"feed_no_custom_source\":false,\"view_edit_info\":false,\"view_article_inline\":false,\"link_with_face\":false,\"feed_view_original\":false,\"feed_view_original.open\":\"page\",\"feed_download_image\":false,\"feed_download_image.name\":\"index\",\"image_preview_all\":false,\"feed_no_animated_image\":false,\"feed_built_in_video_player\":false,\"feed_disable_tag_dialog\":false,\"feed_low_reading_warn\":false,\"feed_only_mode\":false,\"script_import_export\":false,\"script_update_whatsnew\":true,\"script_enable_debug\":false,\"script_debug_regex\":false,\"script_update_whatsnew.lastWeibo\":6,\"filter_weibo_product_like\":false,\"clean_right_hot_topic_top\":false,\"clean_feed_fast_repost\":false,\"layout_nav_hide_avatar\":false,\"layout_left_liked.like\":false,\"layout_left_liked\":false,\"hide_hot_topic_large_read.quota\":20,\"feed_render\":true,\"link_with_face.clean\":false,\"link_with_face.link\":false,\"feed_built_in_video_player.volume\":100,\"feed_built_in_video_player.memorize\":false,\"feed_built_in_video_player.quality\":\"auto\",\"feed_link_new_tab.author\":true,\"feed_link_new_tab.mention\":true,\"feed_link_new_tab.topic\":true,\"feed_link_new_tab.picture\":true,\"feed_link_new_tab.detail\":true,\"feed_link_new_tab.comments\":true,\"feed_link_new_tab.card\":true,\"feed_link_new_tab\":false,\"filter_content_text_show.items\":[],\"filter_content_regex_show.items\":[],\"filter_author_id_show.items\":[],\"filter_original_id_show.items\":[],\"filter_mention_name_show.items\":[],\"filter_topic_text_show.items\":[],\"filter_source_text_show.items\":[],\"filter_content_text_hide.items\":[],\"filter_content_regex_hide.items\":[],\"filter_author_id_hide.items\":[],\"filter_original_id_hide.items\":[],\"filter_mention_name_hide.items\":[],\"filter_topic_text_hide.items\":[],\"filter_source_text_hide.items\":[],\"filter_content_text_fold.items\":[],\"filter_content_regex_fold.items\":[],\"filter_author_id_fold.items\":[],\"filter_original_id_fold.items\":[],\"filter_mention_name_fold.items\":[],\"filter_topic_text_fold.items\":[],\"filter_source_text_fold.items\":[],\"filter_author_forward_id_show.items\":[],\"filter_author_forward_id_hide.items\":[],\"filter_author_forward_id_fold.items\":[]}","local::user3655689037Follow":"s{\"fetchData\":{\"weiboVersion\":6},\"lastList\":null,\"lastChange\":null}","local::user3655689037Hide":"s{\"hideList\":[]}","local::user3739099753Config":"s{\"script_update_whatsnew.last\":97,\"filter_homepage_newest_feeds\":true,\"filter_homepage_single_group\":false,\"filter_homepage_multi_group\":false,\"clean_other_ads\":true,\"clean_other_music\":true,\"clean_other_template\":true,\"clean_other_home_tip\":true,\"clean_other_footer\":true,\"clean_other_im\":true,\"clean_other_im_news\":true,\"clean_other_back_top\":true,\"clean_other_tip\":true,\"clean_other_related_feeds\":true,\"clean_other_related_video\":true,\"clean_other_related_article\":true,\"clean_other_send_weibo\":true,\"clean_message_help\":true,\"clean_message_feedback\":true,\"clean_profile_hongbao\":true,\"clean_profile_wenwo_dr\":true,\"clean_profile_stats\":true,\"clean_profile_my_data\":true,\"clean_profile_edit_person_info\":false,\"clean_feed_promote_other\":true,\"clean_right_hongbao_rank\":true,\"clean_right_member\":true,\"clean_right_notice\":true,\"clean_right_recom_group_user\":true,\"clean_right_ranks\":true,\"clean_right_interest\":true,\"clean_middle_member_tip\":true,\"clean_left_v_plus\":true,\"clean_left_whisper\":true,\"clean_icons_zongyika\":false,\"clean_icons_taobao\":false,\"clean_icons_club\":false,\"clean_icons_approve_co\":false,\"clean_icons_level\":false,\"clean_icons_member\":false,\"clean_icons_approve_dead\":false,\"clean_icons_v_girl\":false,\"clean_icons_cheng\":false,\"clean_icons_others\":false,\"clean_icons_bigfun\":false,\"clean_icons_supervisor\":false,\"clean_icons_gongyi\":false,\"clean_icons_approve\":false,\"layout_nav_auto_hide\":false,\"clean_left_friends\":true,\"clean_left_group_to_me\":true,\"clean_left_tv\":true,\"clean_left_home\":false,\"clean_left_hot\":true,\"clean_left_level\":true,\"clean_left_like\":true,\"image_preview_all\":true,\"image_preview_all.count\":\"4x0\",\"filter_follow_check\":false,\"filter_follow_check.frequency\":259200000,\"uncheck_follow_presenter\":true,\"show_article_without_follow\":true,\"filter_homepage_auto_load\":false,\"filter_homepage_desktop_notify\":false,\"filter_profile_show_all\":false,\"filter_manually_hide\":false,\"pause_filter\":false,\"filter_original_discover\":false,\"filter_original_follower\":false,\"filter_my_feed\":true,\"filter_my_original\":false,\"filter_mention_me\":false,\"filter_ad_feed\":false,\"filter_fans_top\":false,\"filter_weibo_product\":false,\"filter_tb_tm_feed\":false,\"filter_weibo_pay\":false,\"filter_user_like\":false,\"filter_fake_weibo\":false,\"filter_deleted_forward\":false,\"filter_comment_and_forward\":false,\"filter_vote\":false,\"filter_red_pack\":false,\"filter_image_tag\":false,\"filter_koi_forward\":false,\"filter_app_item\":false,\"filter_wenda\":false,\"filter_wenwo_dr\":false,\"filter_yizhibo\":false,\"filter_paid\":false,\"filter_multiple_topics_feed\":false,\"filter_Place\":false,\"filter_Movie\":false,\"filter_Book\":false,\"filter_Topic\":false,\"filter_Music\":false,\"filter_Stock\":false,\"flooding_author\":false,\"flooding_forward\":false,\"comment_layout_by_time\":false,\"comment_layout_hide_sub\":false,\"filter_comment_show_my\":false,\"filter_comment_face_count\":false,\"filter_comment_face_type\":false,\"filter_comment_wo_content\":false,\"filter_comment_with_forward\":false,\"clean_follow_single\":false,\"clean_follow_at_me\":false,\"clean_follow_discover\":false,\"clean_follow_whisper\":false,\"clean_follow_video\":false,\"clean_follow_recommend\":false,\"clean_nav_logo_img\":false,\"clean_nav_main\":false,\"clean_nav_tv\":false,\"clean_nav_hot\":false,\"clean_nav_game\":false,\"clean_nav_hot_search\":false,\"clean_nav_notice_new\":false,\"clean_nav_new\":false,\"clean_left_fav\":false,\"clean_left_new_feed\":false,\"clean_left_special\":false,\"clean_left_new\":false,\"clean_left_news\":false,\"clean_left_count\":false,\"clean_middle_recommended_topic\":false,\"clean_middle_feed_recommend\":false,\"clean_right_info\":false,\"clean_right_hot_topic\":false,\"clean_right_groups\":false,\"clean_right_att_feed\":false,\"clean_feed_recommend\":true,\"clean_feed_feed_outer_tip\":false,\"clean_feed_feed_tip\":false,\"clean_feed_group_tip\":false,\"clean_feed_vip_background\":false,\"clean_feed_last_pic\":false,\"clean_feed_pic_tag\":false,\"clean_feed_son_title\":false,\"clean_feed_card\":false,\"clean_feed_article_pay\":false,\"clean_feed_tag\":false,\"clean_feed_related_link\":false,\"clean_feed_source\":false,\"clean_feed_pop\":false,\"clean_feed_like\":false,\"clean_feed_like_comment\":false,\"clean_feed_like_attitude\":false,\"clean_feed_forward\":false,\"clean_feed_favorite\":false,\"clean_feed_report\":false,\"clean_feed_use_card_background\":false,\"clean_profile_move_things\":false,\"clean_profile_cover\":false,\"clean_profile_bg_img\":false,\"clean_profile_badge_icon\":false,\"clean_profile_verify\":false,\"clean_profile_suggest_user\":false,\"clean_profile_group\":false,\"clean_profile_relation\":false,\"clean_profile_album\":false,\"clean_profile_hot_topic\":false,\"clean_profile_hot_weibo\":false,\"clean_profile_recommend_feed\":false,\"clean_profile_user_list\":false,\"clean_profile_timeline\":false,\"layout_nav_classical\":false,\"layout_nav_hide_name\":false,\"layout_left_messages\":false,\"layout_side_merge\":false,\"layout_side_position\":false,\"layout_side_show_all_groups\":false,\"layout_left_move\":true,\"layout_right_move\":true,\"layout_other_move\":true,\"chat_page_disable_unload_prompt\":false,\"font_family\":false,\"layout_avatar_shape\":false,\"layout_fast_face\":false,\"layout_locale_timezone\":false,\"feed_absolute_time\":false,\"layout_theme_apply\":false,\"layout_nav_dark\":false,\"layout_theme_color\":false,\"custom_css\":true,\"custom_css.css\":\"\",\"feed_no_space\":false,\"feed_source_at_bottom\":false,\"feed_author_content_nowrap\":false,\"feed_small_image\":false,\"feed_increase_width\":false,\"feed_button_order\":false,\"feed_button_order_comment\":false,\"feed_font_size\":false,\"feed_long_expand\":false,\"feed_content_line_break\":false,\"feed_link_use_url\":false,\"feed_unicode_emoji\":false,\"show_vote_result\":false,\"feed_no_custom_source\":false,\"view_edit_info\":false,\"view_article_inline\":false,\"feed_view_original\":false,\"feed_view_original.open\":\"page\",\"feed_download_image\":false,\"feed_download_image.name\":\"index\",\"image_preview_all.more\":\"text\",\"feed_no_animated_image\":false,\"feed_built_in_video_player\":false,\"feed_disable_tag_dialog\":false,\"feed_low_reading_warn\":false,\"feed_only_mode\":false,\"script_import_export\":false,\"script_update_whatsnew\":true,\"feed_built_in_video_player.volume\":100,\"feed_built_in_video_player.memorize\":false,\"feed_built_in_video_player.quality\":\"auto\",\"script_enable_debug\":false,\"script_debug_regex\":false,\"filter_content_text_show.items\":[],\"filter_content_regex_show.items\":[],\"filter_author_id_show.items\":[],\"filter_original_id_show.items\":[],\"filter_mention_name_show.items\":[],\"filter_topic_text_show.items\":[],\"filter_source_text_show.items\":[],\"filter_content_text_hide.items\":[],\"filter_content_regex_hide.items\":[],\"filter_author_id_hide.items\":[],\"filter_original_id_hide.items\":[],\"filter_mention_name_hide.items\":[],\"filter_topic_text_hide.items\":[],\"filter_source_text_hide.items\":[],\"filter_content_text_fold.items\":[],\"filter_content_regex_fold.items\":[],\"filter_author_id_fold.items\":[],\"filter_original_id_fold.items\":[],\"filter_mention_name_fold.items\":[],\"filter_topic_text_fold.items\":[],\"filter_source_text_fold.items\":[],\"filter_author_forward_id_show.items\":[],\"filter_author_forward_id_hide.items\":[],\"filter_author_forward_id_fold.items\":[],\"filter_fast_forward\":false,\"clean_follow_fast_forward\":false,\"hide_hot_topic_large_read\":false,\"feed_long_expand.count\":200,\"feed_long_expand.br\":30,\"link_with_face\":false,\"script_update_whatsnew.lastWeibo\":6,\"filter_weibo_product_like\":false,\"hide_hot_topic_large_read.quota\":20,\"feed_render\":true,\"link_with_face.clean\":false,\"link_with_face.link\":false,\"filter_homepage_multi_group.count\":50,\"filter_homepage_multi_group.more\":\"clear\",\"filter_homepage_multi_group.unread\":false,\"filter_homepage_multi_group.groups\":[],\"filter_homepage_desktop_notify.whitelist\":false,\"filter_homepage_single_group.group\":\"whisper\",\"filter_original_follower.count\":10,\"filter_original_follower.account\":[],\"layout_nav_hide_name.act\":\"hidden\",\"layout_left_messages.like\":false,\"layout_left_messages.dm\":false,\"layout_left_messages.msgbox\":false,\"layout_left_messages.group\":false,\"layout_left_messages.dmsub\":false,\"layout_side_merge.side\":\"left\",\"layout_side_position.side\":\"left\",\"font_family.west\":\"Times\",\"font_family.chinese\":\"中易宋体\",\"layout_avatar_shape.shape\":\"square\",\"layout_theme_apply.skin\":\"skin058\",\"layout_theme_color.color2\":\"#ffffff\",\"layout_theme_color.transparency2\":30,\"layout_theme_color.color1\":\"#f6f6f6\",\"layout_theme_color.transparency1\":30,\"layout_theme_color.color3\":\"#ffffff\",\"layout_theme_color.transparency3\":30,\"feed_small_image.repost\":false,\"feed_increase_width.width\":750,\"feed_button_order.0\":\"pop\",\"feed_button_order.1\":\"favorite\",\"feed_button_order.2\":\"forward\",\"feed_button_order.3\":\"comment\",\"feed_button_order.4\":\"like\",\"feed_button_order_comment.0\":\"report\",\"feed_button_order_comment.1\":\"delete\",\"feed_button_order_comment.2\":\"conversition\",\"feed_button_order_comment.3\":\"reply\",\"feed_button_order_comment.4\":\"like\",\"feed_font_size.ratio\":\"120\",\"feed_content_line_break.text\":\"⏎\",\"feed_view_original.direct\":false,\"feed_download_image.direct\":false,\"feed_low_reading_warn.count\":100,\"feed_only_mode.width\":600,\"feed_only_mode.key\":119,\"feed_only_mode.button\":false,\"filter_comment_text_show.items\":[],\"filter_comment_text_hide.items\":[],\"filter_comment_regex_show.items\":[],\"filter_comment_regex_hide.items\":[],\"filter_comment_name_show.items\":[],\"filter_comment_name_hide.items\":[],\"filter_comment_face_count.count\":8,\"filter_comment_face_type.count\":4,\"clean_feed_fast_repost\":false,\"nav_use_link\":false,\"side_left_use_link\":false,\"feed_link_new_tab.author\":true,\"feed_link_new_tab.mention\":true,\"feed_link_new_tab.topic\":true,\"feed_link_new_tab.picture\":true,\"feed_link_new_tab.detail\":true,\"feed_link_new_tab.comments\":true,\"feed_link_new_tab\":false,\"clean_right_hot_topic_top\":false,\"clean_feed_feed_inner_tip\":false,\"layout_nav_hide_avatar\":false,\"layout_left_liked\":false,\"clean_right_v7_entry\":false,\"layout_left_liked.like\":false,\"feed_link_new_tab.card\":true}","local::user3739099753Follow":"s{\"fetchData\":{\"weiboVersion\":6},\"lastList\":null,\"lastChange\":null}","local::user3739099753Hide":"s{\"hideList\":[]}","local::user6487367156Config":"s{\"filter_follow_check\":false,\"filter_follow_check.frequency\":259200000,\"uncheck_follow_presenter\":true,\"show_article_without_follow\":true,\"filter_homepage_newest_feeds\":false,\"filter_homepage_single_group\":false,\"filter_homepage_multi_group\":false,\"filter_homepage_auto_load\":false,\"filter_homepage_desktop_notify\":false,\"filter_profile_show_all\":false,\"filter_manually_hide\":false,\"pause_filter\":false,\"filter_original_discover\":false,\"filter_original_follower\":false,\"filter_my_feed\":true,\"filter_my_original\":false,\"filter_mention_me\":false,\"filter_ad_feed\":false,\"filter_fans_top\":false,\"filter_weibo_product\":false,\"filter_tb_tm_feed\":false,\"filter_weibo_pay\":false,\"filter_user_like\":false,\"filter_fake_weibo\":false,\"filter_deleted_forward\":false,\"filter_comment_and_forward\":false,\"filter_vote\":false,\"filter_red_pack\":false,\"filter_image_tag\":false,\"filter_koi_forward\":false,\"filter_app_item\":false,\"filter_wenda\":false,\"filter_wenwo_dr\":false,\"filter_yizhibo\":false,\"filter_paid\":false,\"filter_multiple_topics_feed\":false,\"filter_fast_forward\":false,\"filter_Place\":false,\"filter_Movie\":false,\"filter_Book\":false,\"filter_Topic\":false,\"filter_Music\":false,\"filter_Stock\":false,\"flooding_author\":false,\"flooding_forward\":false,\"comment_layout_by_time\":false,\"comment_layout_hide_sub\":false,\"filter_comment_show_my\":false,\"filter_comment_face_count\":false,\"filter_comment_face_type\":false,\"filter_comment_wo_content\":false,\"filter_comment_with_forward\":false,\"clean_icons_level\":false,\"clean_icons_member\":false,\"clean_icons_approve\":false,\"clean_icons_approve_co\":false,\"clean_icons_approve_dead\":false,\"clean_icons_bigfun\":false,\"clean_icons_club\":false,\"clean_icons_v_girl\":false,\"clean_icons_supervisor\":false,\"clean_icons_taobao\":false,\"clean_icons_cheng\":false,\"clean_icons_gongyi\":false,\"clean_icons_zongyika\":false,\"clean_icons_others\":false,\"clean_follow_single\":false,\"clean_follow_at_me\":false,\"clean_follow_discover\":false,\"clean_follow_fast_forward\":false,\"clean_follow_video\":false,\"clean_follow_recommend\":false,\"clean_nav_logo_img\":false,\"clean_nav_main\":false,\"clean_nav_tv\":false,\"clean_nav_hot\":false,\"clean_nav_game\":false,\"clean_nav_hot_search\":false,\"clean_nav_notice_new\":false,\"clean_nav_new\":false,\"clean_left_level\":false,\"clean_left_home\":false,\"clean_left_fav\":false,\"clean_left_like\":false,\"clean_left_hot\":false,\"clean_left_tv\":false,\"clean_left_new_feed\":false,\"clean_left_friends\":false,\"clean_left_group_to_me\":false,\"clean_left_special\":false,\"clean_left_whisper\":false,\"clean_left_v_plus\":false,\"clean_left_new\":false,\"clean_left_news\":false,\"clean_left_count\":false,\"clean_middle_recommended_topic\":false,\"clean_middle_feed_recommend\":false,\"clean_middle_member_tip\":false,\"clean_right_info\":false,\"clean_right_ranks\":false,\"clean_right_hot_topic\":false,\"clean_right_interest\":false,\"clean_right_member\":false,\"clean_right_groups\":false,\"clean_right_recom_group_user\":false,\"clean_right_hongbao_rank\":false,\"clean_right_att_feed\":false,\"clean_right_notice\":false,\"clean_feed_recommend\":false,\"clean_feed_feed_outer_tip\":false,\"clean_feed_feed_tip\":false,\"clean_feed_group_tip\":false,\"clean_feed_vip_background\":false,\"clean_feed_last_pic\":false,\"clean_feed_pic_tag\":false,\"clean_feed_son_title\":false,\"clean_feed_card\":false,\"clean_feed_article_pay\":false,\"clean_feed_tag\":false,\"clean_feed_related_link\":false,\"clean_feed_source\":false,\"clean_feed_pop\":false,\"clean_feed_like\":false,\"clean_feed_like_comment\":false,\"clean_feed_like_attitude\":false,\"clean_feed_forward\":false,\"clean_feed_favorite\":false,\"clean_feed_promote_other\":false,\"clean_feed_report\":false,\"clean_feed_use_card_background\":false,\"clean_profile_move_things\":false,\"clean_profile_cover\":false,\"clean_profile_bg_img\":false,\"clean_profile_badge_icon\":false,\"clean_profile_verify\":false,\"clean_profile_edit_person_info\":false,\"clean_profile_stats\":false,\"clean_profile_my_data\":false,\"clean_profile_suggest_user\":false,\"clean_profile_group\":false,\"clean_profile_relation\":false,\"clean_profile_album\":false,\"clean_profile_hot_topic\":false,\"clean_profile_hot_weibo\":false,\"clean_profile_recommend_feed\":false,\"clean_profile_user_list\":false,\"clean_profile_hongbao\":false,\"clean_profile_wenwo_dr\":false,\"clean_profile_timeline\":false,\"clean_message_help\":false,\"clean_message_feedback\":false,\"clean_other_ads\":false,\"clean_other_music\":false,\"clean_other_template\":false,\"clean_other_home_tip\":false,\"clean_other_footer\":false,\"clean_other_im\":false,\"clean_other_im_news\":false,\"clean_other_back_top\":false,\"clean_other_tip\":false,\"clean_other_related_feeds\":false,\"clean_other_related_video\":false,\"clean_other_related_article\":false,\"clean_other_send_weibo\":false,\"layout_nav_auto_hide\":false,\"layout_nav_classical\":false,\"layout_nav_hide_name\":false,\"layout_left_messages\":false,\"layout_side_merge\":false,\"layout_side_position\":false,\"layout_side_show_all_groups\":false,\"layout_left_move\":true,\"layout_right_move\":true,\"layout_other_move\":true,\"chat_page_disable_unload_prompt\":false,\"font_family\":false,\"layout_avatar_shape\":false,\"layout_fast_face\":false,\"layout_locale_timezone\":false,\"feed_absolute_time\":false,\"hide_hot_topic_large_read\":false,\"layout_theme_apply\":false,\"layout_nav_dark\":false,\"layout_theme_color\":false,\"custom_css\":true,\"custom_css.css\":\"\",\"feed_no_space\":false,\"feed_source_at_bottom\":false,\"feed_author_content_nowrap\":false,\"feed_small_image\":false,\"feed_increase_width\":false,\"feed_button_order\":false,\"feed_button_order_comment\":false,\"feed_font_size\":false,\"feed_long_expand\":false,\"feed_long_expand.count\":200,\"feed_long_expand.br\":30,\"feed_content_line_break\":false,\"feed_link_use_url\":false,\"feed_unicode_emoji\":false,\"show_vote_result\":false,\"feed_no_custom_source\":false,\"view_edit_info\":false,\"view_article_inline\":false,\"link_with_face\":false,\"feed_view_original\":false,\"feed_view_original.open\":\"page\",\"feed_download_image\":false,\"feed_download_image.name\":\"index\",\"image_preview_all\":false,\"feed_no_animated_image\":false,\"feed_built_in_video_player\":false,\"feed_disable_tag_dialog\":false,\"feed_low_reading_warn\":false,\"feed_only_mode\":false,\"script_import_export\":false,\"script_update_whatsnew\":true,\"script_enable_debug\":false,\"script_debug_regex\":false,\"script_update_whatsnew.last\":84,\"script_update_whatsnew.lastWeibo\":6,\"filter_content_text_show.items\":[],\"filter_content_regex_show.items\":[],\"filter_author_id_show.items\":[],\"filter_original_id_show.items\":[],\"filter_mention_name_show.items\":[],\"filter_topic_text_show.items\":[],\"filter_source_text_show.items\":[],\"filter_content_text_hide.items\":[],\"filter_content_regex_hide.items\":[],\"filter_author_id_hide.items\":[],\"filter_original_id_hide.items\":[],\"filter_mention_name_hide.items\":[],\"filter_topic_text_hide.items\":[],\"filter_source_text_hide.items\":[],\"filter_content_text_fold.items\":[],\"filter_content_regex_fold.items\":[],\"filter_author_id_fold.items\":[],\"filter_original_id_fold.items\":[],\"filter_mention_name_fold.items\":[],\"filter_topic_text_fold.items\":[],\"filter_source_text_fold.items\":[]}","local::user6487367156Follow":"s{\"fetchData\":{\"weiboVersion\":6},\"lastList\":null,\"lastChange\":null}","local::user6487367156Hide":"s{\"hideList\":[]}","sync::globalConfig":"s{}","sync::user3655689037Config":"s{\"script_update_whatsnew.last\":58}","sync::user3655689037Follow":"s{}","sync::user3655689037Hide":"s{}","sync::user3739099753Config":"s{\"script_update_whatsnew.last\":63,\"filter_homepage_newest_feeds\":true,\"filter_homepage_single_group\":false,\"filter_homepage_multi_group\":false,\"clean_other_ads\":true,\"clean_other_music\":true,\"clean_other_template\":true,\"clean_other_home_tip\":true,\"clean_other_footer\":true,\"clean_other_im\":true,\"clean_other_im_news\":true,\"clean_other_back_top\":true,\"clean_other_tip\":true,\"clean_other_related_feeds\":true,\"clean_other_related_video\":true,\"clean_other_related_article\":true,\"clean_other_send_weibo\":true,\"clean_message_help\":true,\"clean_message_feedback\":true,\"clean_profile_hongbao\":true,\"clean_profile_wenwo_dr\":true,\"clean_profile_stats\":true,\"clean_profile_my_data\":true,\"clean_profile_edit_person_info\":false,\"clean_feed_promote_other\":true,\"clean_right_hongbao_rank\":true,\"clean_right_member\":true,\"clean_right_notice\":true,\"clean_right_recom_group_user\":true,\"clean_right_ranks\":true,\"clean_right_interest\":true,\"clean_middle_member_tip\":true,\"clean_left_v_plus\":true,\"clean_left_whisper\":true,\"clean_icons_zongyika\":false,\"clean_icons_taobao\":false,\"clean_icons_club\":false,\"clean_icons_approve_co\":false,\"clean_icons_level\":false,\"clean_icons_member\":false,\"clean_icons_approve_dead\":false,\"clean_icons_v_girl\":false,\"clean_icons_cheng\":false,\"clean_icons_others\":false,\"clean_icons_bigfun\":false,\"clean_icons_supervisor\":false,\"clean_icons_gongyi\":false,\"clean_icons_approve\":false,\"layout_nav_auto_hide\":false,\"clean_left_friends\":true,\"clean_left_group_to_me\":true,\"clean_left_tv\":true,\"clean_left_home\":false,\"clean_left_hot\":true,\"clean_left_level\":true,\"clean_left_like\":true,\"image_preview_all\":true,\"image_preview_all.count\":\"4x0\",\"filter_follow_check\":false,\"filter_follow_check.frequency\":259200000,\"uncheck_follow_presenter\":true,\"show_article_without_follow\":true,\"filter_homepage_auto_load\":false,\"filter_homepage_desktop_notify\":false,\"filter_profile_show_all\":false,\"filter_manually_hide\":false,\"pause_filter\":false,\"filter_original_discover\":false,\"filter_original_follower\":false,\"filter_my_feed\":true,\"filter_my_original\":false,\"filter_mention_me\":false,\"filter_ad_feed\":false,\"filter_fans_top\":false,\"filter_weibo_product\":false,\"filter_tb_tm_feed\":false,\"filter_weibo_pay\":false,\"filter_user_like\":false,\"filter_fake_weibo\":false,\"filter_deleted_forward\":false,\"filter_comment_and_forward\":false,\"filter_vote\":false,\"filter_red_pack\":false,\"filter_image_tag\":false,\"filter_koi_forward\":false,\"filter_app_item\":false,\"filter_wenda\":false,\"filter_wenwo_dr\":false,\"filter_yizhibo\":false,\"filter_paid\":false,\"filter_multiple_topics_feed\":false,\"filter_Place\":false,\"filter_Movie\":false,\"filter_Book\":false,\"filter_Topic\":false,\"filter_Music\":false,\"filter_Stock\":false,\"flooding_author\":false,\"flooding_forward\":false,\"comment_layout_by_time\":false,\"comment_layout_hide_sub\":false,\"filter_comment_show_my\":false,\"filter_comment_face_count\":false,\"filter_comment_face_type\":false,\"filter_comment_wo_content\":false,\"filter_comment_with_forward\":false,\"clean_follow_single\":false,\"clean_follow_at_me\":false,\"clean_follow_discover\":false,\"clean_follow_whisper\":false,\"clean_follow_video\":false,\"clean_follow_recommend\":false,\"clean_nav_logo_img\":false,\"clean_nav_main\":false,\"clean_nav_tv\":false,\"clean_nav_hot\":false,\"clean_nav_game\":false,\"clean_nav_hot_search\":false,\"clean_nav_notice_new\":false,\"clean_nav_new\":false,\"clean_left_fav\":false,\"clean_left_new_feed\":false,\"clean_left_special\":false,\"clean_left_new\":false,\"clean_left_news\":false,\"clean_left_count\":false,\"clean_middle_recommended_topic\":false,\"clean_middle_feed_recommend\":false,\"clean_right_info\":false,\"clean_right_hot_topic\":false,\"clean_right_groups\":false,\"clean_right_att_feed\":false,\"clean_feed_recommend\":false,\"clean_feed_feed_outer_tip\":false,\"clean_feed_feed_tip\":false,\"clean_feed_group_tip\":false,\"clean_feed_vip_background\":false,\"clean_feed_last_pic\":false,\"clean_feed_pic_tag\":false,\"clean_feed_son_title\":false,\"clean_feed_card\":false,\"clean_feed_article_pay\":false,\"clean_feed_tag\":false,\"clean_feed_related_link\":false,\"clean_feed_source\":false,\"clean_feed_pop\":false,\"clean_feed_like\":false,\"clean_feed_like_comment\":false,\"clean_feed_like_attitude\":false,\"clean_feed_forward\":false,\"clean_feed_favorite\":false,\"clean_feed_report\":false,\"clean_feed_use_card_background\":false,\"clean_profile_move_things\":false,\"clean_profile_cover\":false,\"clean_profile_bg_img\":false,\"clean_profile_badge_icon\":false,\"clean_profile_verify\":false,\"clean_profile_suggest_user\":false,\"clean_profile_group\":false,\"clean_profile_relation\":false,\"clean_profile_album\":false,\"clean_profile_hot_topic\":false,\"clean_profile_hot_weibo\":false,\"clean_profile_recommend_feed\":false,\"clean_profile_user_list\":false,\"clean_profile_timeline\":false,\"layout_nav_classical\":false,\"layout_nav_hide_name\":false,\"layout_left_messages\":false,\"layout_side_merge\":false,\"layout_side_position\":false,\"layout_side_show_all_groups\":false,\"layout_left_move\":true,\"layout_right_move\":true,\"layout_other_move\":true,\"chat_page_disable_unload_prompt\":false,\"font_family\":false,\"layout_avatar_shape\":false,\"layout_fast_face\":false,\"layout_locale_timezone\":false,\"feed_absolute_time\":false,\"layout_theme_apply\":false,\"layout_nav_dark\":false,\"layout_theme_color\":false,\"custom_css\":true,\"custom_css.css\":\"\",\"feed_no_space\":false,\"feed_source_at_bottom\":false,\"feed_author_content_nowrap\":false,\"feed_small_image\":false,\"feed_increase_width\":false,\"feed_button_order\":false,\"feed_button_order_comment\":false,\"feed_font_size\":false,\"feed_long_expand\":false,\"feed_content_line_break\":false,\"feed_link_use_url\":false,\"feed_unicode_emoji\":false,\"show_vote_result\":false,\"feed_no_custom_source\":false,\"view_edit_info\":false,\"view_article_inline\":false,\"feed_view_original\":false,\"feed_view_original.open\":\"page\",\"feed_download_image\":false,\"feed_download_image.name\":\"index\",\"image_preview_all.more\":\"text\",\"feed_no_animated_image\":false,\"feed_built_in_video_player\":false,\"feed_disable_tag_dialog\":false,\"feed_low_reading_warn\":false,\"feed_only_mode\":false,\"script_import_export\":false,\"script_update_whatsnew\":true,\"feed_built_in_video_player.volume\":100,\"feed_built_in_video_player.memorize\":false,\"feed_built_in_video_player.quality\":\"auto\",\"script_enable_debug\":false,\"script_debug_regex\":false,\"filter_content_text_show.items\":[],\"filter_content_regex_show.items\":[],\"filter_author_id_show.items\":[],\"filter_original_id_show.items\":[],\"filter_mention_name_show.items\":[],\"filter_topic_text_show.items\":[],\"filter_source_text_show.items\":[],\"filter_content_text_hide.items\":[],\"filter_content_regex_hide.items\":[],\"filter_author_id_hide.items\":[],\"filter_original_id_hide.items\":[],\"filter_mention_name_hide.items\":[],\"filter_topic_text_hide.items\":[],\"filter_source_text_hide.items\":[],\"filter_content_text_fold.items\":[],\"filter_content_regex_fold.items\":[],\"filter_author_id_fold.items\":[],\"filter_original_id_fold.items\":[],\"filter_mention_name_fold.items\":[],\"filter_topic_text_fold.items\":[],\"filter_source_text_fold.items\":[],\"filter_author_forward_id_show.items\":[],\"filter_author_forward_id_hide.items\":[],\"filter_author_forward_id_fold.items\":[]}","sync::user3739099753Follow":"s{\"fetchData\":{},\"lastList\":null,\"lastChange\":null}","sync::user3739099753Hide":"s{\"hideList\":[]}"},"ts":1641548080679},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/3249-yet-another-weibo-filter/code/Yet%20Another%20Weibo%20Filter.user.js","uuid":"a8266d90-a6a2-4069-98cc-32cac90ae263","source":""},{"name":"网页限制解除(改)","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*www.bilibili.com/video*","*www.bilibili.com/v*","*www.bilibili.com/bangumi*","*www.youtube.com/watch*","*www.panda.tv*"],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":["/(^[^:\\/#\\?]*:\\/\\/([^#\\?\\/]*\\.)?www\\.bilibili\\.com(:[0-9]{1,5})?\\/.*$)/"],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"rwl_userData":"o{\"status\":1,\"version\":0.1,\"message\":\"啦啦啦,啦啦啦,我是卖报的小行家\",\"positionTop\":0,\"positionLeft\":0,\"positionRight\":\"auto\",\"addBtn\":true,\"connectToTheServer\":false,\"waitUpload\":[\"www.luckydesigner.space\"],\"currentURL\":\"https://www.luckydesigner.space/potplayer-8000-channel-to-watch/\",\"rules\":{\"rule_def\":{\"name\":\"default\",\"hook_eventNames\":\"contextmenu|select|selectstart|copy|cut|dragstart|mousemove|beforeunload\",\"unhook_eventNames\":\"mousedown|mouseup|keydown|keyup\",\"dom0\":true,\"hook_addEventListener\":true,\"hook_preventDefault\":true,\"hook_set_returnValue\":true,\"add_css\":true},\"rule_plus\":{\"name\":\"default\",\"hook_eventNames\":\"contextmenu|select|selectstart|copy|cut|dragstart|mousedown|mouseup|mousemove|beforeunload\",\"unhook_eventNames\":\"keydown|keyup\",\"dom0\":true,\"hook_addEventListener\":true,\"hook_preventDefault\":true,\"hook_set_returnValue\":true,\"add_css\":true},\"rule_zhihu\":{\"name\":\"default\",\"hook_eventNames\":\"contextmenu|select|selectstart|copy|cut|dragstart|mousemove\",\"unhook_eventNames\":\"keydown|keyup\",\"dom0\":true,\"hook_addEventListener\":true,\"hook_preventDefault\":true,\"hook_set_returnValue\":true,\"add_css\":true}},\"data\":[\"b.faloo.com\",\"bbs.coocaa.com\",\"book.hjsm.tom.com\",\"book.zhulang.com\",\"book.zongheng.com\",\"chokstick.com\",\"chuangshi.qq.com\",\"city.udn.com\",\"cutelisa55.pixnet.net\",\"huayu.baidu.com\",\"imac.hk\",\"life.tw\",\"luxmuscles.com\",\"movie.douban.com\",\"news.missevan.com\",\"read.qidian.com\",\"vipreader.qidian.com\",\"www.15yan.com\",\"www.17k.com\",\"www.18183.com\",\"www.360doc.com\",\"www.coco01.net\",\"www.eyu.com\",\"www.hongshu.com\",\"www.hongxiu.com\",\"www.imooc.com\",\"www.jjwxc.net\",\"www.luckydesigner.space\",\"www.myhtlmebook.com\",\"www.pigai.org\",\"www.ppkao.com\",\"www.readnovel.com\",\"www.ruiwen.com\",\"www.sdifen.com\",\"www.shangc.net\",\"www.tadu.com\",\"www.xxsy.net\",\"www.z3z4.com\",\"www.zhihu.com\",\"yuedu.163.com\"],\"shortcut\":3}"},"ts":1633428465811},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/28497-remove-web-limits-modified/code/Remove%20web%20limits(modified).user.js","uuid":"9313932a-356d-48ce-b530-cf84d5243907","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgICAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vdXNlcnMvMTA2MjIyLXF4aW4taQogCi8vIEBuYW1lICAgICAgICAgICAgICDnvZHpobXpmZDliLbop6PpmaQo5pS5KQovLyBAbmFtZTplbiAgICAgICAgICAgUmVtb3ZlIHdlYiBsaW1pdHMobW9kaWZpZWQpCi8vIEBuYW1lOnpoICAgICAgICAgICDnvZHpobXpmZDliLbop6PpmaQo5pS5KQovLyBAbmFtZTpqYSAgICAgICAgICAg44Km44Kn44OW44Gu6KaP5Yi257ep5ZKMKOWkieabtCkKIAovLyBAYXV0aG9yICAgICAgICAgICAgQ2F0NzMgJiBpcXhpbijkv67mlLkpIAovLyBAY29udHJpYnV0b3IgICAgICAgaXF4aW4KIAovLyBAZGVzY3JpcHRpb24gICAgICAg6YCa5p2A5aSn6YOo5YiG572R56uZLOWPr+S7peino+mZpOemgeatouWkjeWItuOAgeWJquWIh+OAgemAieaLqeaWh+acrOOAgeWPs+mUruiPnOWNleeahOmZkOWItuOAguWOn+S9nOiAhWNhdDczLOWboOS4uuWSjOaQnOe0oui3s+i9rOiEmuacrOWGsueqgSzpgYLov5vooYzkuobmlLnliqjjgIIKLy8gQGRlc2NyaXB0aW9uOmVuICAgIFBhc3MgdG8ga2lsbCBtb3N0IG9mIHRoZSBzaXRlLCB5b3UgY2FuIGxpZnQgdGhlIHJlc3RyaWN0aW9ucyBwcm9oaWJpdGVkIHRvIGNvcHksIGN1dCwgc2VsZWN0IHRoZSB0ZXh0LCByaWdodC1jbGljayBtZW51LnJldmlzZWQgdmVyc2lvbgovLyBAZGVzY3JpcHRpb246emggICAg6YCa5p2A5aSn6YOo5YiG572R56uZLOWPr+S7peino+mZpOemgeatouWkjeWItuOAgeWJquWIh+OAgemAieaLqeaWh+acrOOAgeWPs+mUruiPnOWNleeahOmZkOWItuOAguWOn+S9nOiAhWNhdDczLOWboOS4uuWSjOaQnOe0oui3s+i9rOiEmuacrOWGsueqgSzpgYLov5vooYzkuobmlLnliqgKLy8gQGRlc2NyaXB0aW9uOnpoLVRXIOmAmuauuuWkp+mDqOWIhue2suermSzlj6/ku6Xop6PpmaTnpoHmraLlvqnliLbjgIHliarliIfjgIHpgbjmk4fmlofmnKzjgIHlj7PpjbXoj5zllq7nmoTpmZDliLbjgIIKLy8gQGRlc2NyaXB0aW9uOmphICAgIOOCteOCpOODiOOBruOBu+OBqOOCk+OBqeOCkuauuuOBmeOBn+OCgeOBq+a4oeOBl+OAgeOBguOBquOBn+OBr+OAgeOCs+ODlOODvOWIh+OCiuWPluOCiuOAgeODhuOCreOCueODiOOAgeWPs+OCr+ODquODg+OCr+ODoeODi+ODpeODvOOCkumBuOaKnuOBmeOCi+OBk+OBqOOBr+emgeatouOBruWItumZkOOCkuino+mZpOOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAggogCi8vIEBkZXNjcmlwdGlvbiAgICAgICDljp/kvZzogIVodHRwczovL3d3dy5naXRodWIuY29tL0NhdDczNzMvLOWboOS4uuWSjOaQnOe0oui3s+i9rOiEmuacrOWGsueqgSzpgYLov5vooYzkuobmlLnliqgKLy8gQGhvbWVwYWdlVVJMICAgICAgIGh0dHBzOi8vY2F0NzM3My5naXRodWIuaW8vcmVtb3ZlLXdlYi1saW1pdHMvCi8vIEBzdXBwb3J0VVJMICAgICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3NjcmlwdHMvMjg0OTcKIAovLyBAaWNvbiAgICAgICAgICAgICAgIGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQ0FBQUFBZ0NBUUFBQURaYzdKL0FBQUJwRWxFUVZSNG5PM1Z2MnVVUVJERzhjL2ViU01XcWF5MHRyQVRBeHJVU2kxUzJBaVdGb0pZcE5DZ29CalVSc0hXSktlTlJmQXZzRGdGaXhRcUtkUFoyVmlFaUNKWUJPUXU4ZjFoRVhPNTk3MTNqN01VZkxaNmQyYS9POHZNTzBPekRuaW45S3UyTWp2dWF3MDd4Z1NBWUVWWGUyaW5kTWhqOTJ6cEtKTG5CaEY4TURleWU5aG42emJONzBlUmlxQ3cwMkJyYTN1cDhCQkx1MUZFQnhzQnVjWHFXNGNzejBVTGU0am9yU0NNdVBVODlib1JFTERNSGlJNlk4VjY1YmJDVVRjY2M3MFJrYU93S0xPZzBJa3lYYTlxVGpPdTJMQXM2Tlp1RDg2aHJkVHl4Uk5Ua1VxcWRoWGxIcm5nR1JWRVpzTXBKd2V4OUR4SVpTSFljbGVzSWI2NUxDb0hnSXM2NlVKcTZidERCWkhaclBoOFY2WUJPWDY2TGJPa1RHY2tCWWltQlcyRlZUTmV1T1pOeXJGSjIzNllsNE5TeTVTYlZtMVBEdmhvZHFneU1sZWRUZFJsQXREenFmTDl0Zmt3VXR5YVJrdjlMd0ZqOUIvdzd3UHljWE9ocWxKMHlaSEtQQ2hNaTVNQ2lNNDdYaHNvcGJWSkFVSGZyWWJtTi9FVG9OKzAyZUxQZno5T1l5WmhGSnpXMUpuM2xUc3hhS1FqQ2twNTJqeTQ1cjFadlNiVGI5TTBkNFBCb3pHWkFBQUFBRWxGVGtTdVFtQ0MKIAovLyBAdmVyc2lvbiAgICAgICAgICAgNC40LjYKLy8gQGxpY2Vuc2UgICAgICAgICAgIExHUEx2MwogCi8vIEBtYXRjaCAgICAgICAgICAgICAqOi8vKi8qCi8vIEBleGNsdWRlICAgICAgICAqd3d3LmJpbGliaWxpLmNvbS92aWRlbyoKLy8gQGV4Y2x1ZGUgICAgICAgICp3d3cuYmlsaWJpbGkuY29tL3YqCi8vIEBleGNsdWRlICAgICAgICAqd3d3LmJpbGliaWxpLmNvbS9iYW5ndW1pKgovLyBAZXhjbHVkZSAgICAgICAgKnd3dy55b3V0dWJlLmNvbS93YXRjaCoKLy8gQGV4Y2x1ZGUgICAgICAgICp3d3cucGFuZGEudHYqCiAKLy8gQGNvbm5lY3QgICAgIGVlbW0ubWUKLy8gQGdyYW50ICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgR01fYWRkU3R5bGUKLy8gQGdyYW50ICAgICAgIEdNX2RlbGV0ZVZhbHVlCi8vIEBncmFudCAgICAgICBHTV94bWxodHRwUmVxdWVzdAovLyBAZ3JhbnQgICAgICAgR01fc2V0Q2xpcGJvYXJkCi8vIEBncmFudCAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kCi8vIEBydW4tYXQgICAgICBkb2N1bWVudC1zdGFydAovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogCiAgICB2YXIgc2V0dGluZ0RhdGEgPSB7CiAgICAgICAgInN0YXR1cyI6MSwKICAgICAgICAidmVyc2lvbiIgOiAwLjEsCiAgICAgICAgIm1lc3NhZ2UiIDogIuWVpuWVpuWVpizllabllabllaYs5oiR5piv5Y2W5oql55qE5bCP6KGM5a62IiwKICAgICAgICAicG9zaXRpb25Ub3AiOiIwIiwKICAgICAgICAicG9zaXRpb25MZWZ0IjoiMCIsCiAgICAgICAgInBvc2l0aW9uUmlnaHQiOiJhdXRvIiwKICAgICAgICAiYWRkQnRuIiA6IHRydWUsCiAgICAgICAgImNvbm5lY3RUb1RoZVNlcnZlciIgOiBmYWxzZSwKICAgICAgICAid2FpdFVwbG9hZCI6W10sCiAgICAgICAgImN1cnJlbnRVUkwiOiJudWxsIiwKICAgICAgICAic2hvcnRjdXQiOjMsCiAgICAgICAgLy8g5Z+f5ZCN6KeE5YiZ5YiX6KGoCiAgICAgICAgInJ1bGVzIiA6IHsKICAgICAgICAgICAgInJ1bGVfZGVmIjogewogICAgICAgICAgICAgICAgIm5hbWUiOiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAiaG9va19ldmVudE5hbWVzIjogImNvbnRleHRtZW51fHNlbGVjdHxzZWxlY3RzdGFydHxjb3B5fGN1dHxkcmFnc3RhcnR8bW91c2Vtb3ZlfGJlZm9yZXVubG9hZCIsCiAgICAgICAgICAgICAgICAidW5ob29rX2V2ZW50TmFtZXMiOiAibW91c2Vkb3dufG1vdXNldXB8a2V5ZG93bnxrZXl1cCIsCiAgICAgICAgICAgICAgICAiZG9tMCI6IHRydWUsCiAgICAgICAgICAgICAgICAiaG9va19hZGRFdmVudExpc3RlbmVyIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJob29rX3ByZXZlbnREZWZhdWx0IjogdHJ1ZSwKICAgICAgICAgICAgICAgICJob29rX3NldF9yZXR1cm5WYWx1ZSI6IHRydWUsCiAgICAgICAgICAgICAgICAiYWRkX2NzcyI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJ1bGVfcGx1cyI6IHsKICAgICAgICAgICAgICAgICJuYW1lIjogImRlZmF1bHQiLAogICAgICAgICAgICAgICAgImhvb2tfZXZlbnROYW1lcyI6ICJjb250ZXh0bWVudXxzZWxlY3R8c2VsZWN0c3RhcnR8Y29weXxjdXR8ZHJhZ3N0YXJ0fG1vdXNlZG93bnxtb3VzZXVwfG1vdXNlbW92ZXxiZWZvcmV1bmxvYWQiLAogICAgICAgICAgICAgICAgInVuaG9va19ldmVudE5hbWVzIjogImtleWRvd258a2V5dXAiLAogICAgICAgICAgICAgICAgImRvbTAiOiB0cnVlLAogICAgICAgICAgICAgICAgImhvb2tfYWRkRXZlbnRMaXN0ZW5lciI6IHRydWUsCiAgICAgICAgICAgICAgICAiaG9va19wcmV2ZW50RGVmYXVsdCI6IHRydWUsCiAgICAgICAgICAgICAgICAiaG9va19zZXRfcmV0dXJuVmFsdWUiOiB0cnVlLAogICAgICAgICAgICAgICAgImFkZF9jc3MiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJydWxlX3poaWh1IjogewogICAgICAgICAgICAgICAgIm5hbWUiOiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAiaG9va19ldmVudE5hbWVzIjogImNvbnRleHRtZW51fHNlbGVjdHxzZWxlY3RzdGFydHxjb3B5fGN1dHxkcmFnc3RhcnR8bW91c2Vtb3ZlIiwKICAgICAgICAgICAgICAgICJ1bmhvb2tfZXZlbnROYW1lcyI6ICJrZXlkb3dufGtleXVwIiwKICAgICAgICAgICAgICAgICJkb20wIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJob29rX2FkZEV2ZW50TGlzdGVuZXIiOiB0cnVlLAogICAgICAgICAgICAgICAgImhvb2tfcHJldmVudERlZmF1bHQiOiB0cnVlLAogICAgICAgICAgICAgICAgImhvb2tfc2V0X3JldHVyblZhbHVlIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJhZGRfY3NzIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiZGF0YSI6IFsKICAgICAgICAgICAgImIuZmFsb28uY29tIiwKICAgICAgICAgICAgImJicy5jb29jYWEuY29tIiwKICAgICAgICAgICAgImJvb2suaGpzbS50b20uY29tIiwKICAgICAgICAgICAgImJvb2suemh1bGFuZy5jb20iLAogICAgICAgICAgICAiYm9vay56b25naGVuZy5jb20iLAogICAgICAgICAgICAiY2hva3N0aWNrLmNvbSIsCiAgICAgICAgICAgICJjaHVhbmdzaGkucXEuY29tIiwKICAgICAgICAgICAgImNpdHkudWRuLmNvbSIsCiAgICAgICAgICAgICJjdXRlbGlzYTU1LnBpeG5ldC5uZXQiLAogICAgICAgICAgICAiaHVheXUuYmFpZHUuY29tIiwKICAgICAgICAgICAgImltYWMuaGsiLAogICAgICAgICAgICAibGlmZS50dyIsCiAgICAgICAgICAgICJsdXhtdXNjbGVzLmNvbSIsCiAgICAgICAgICAgICJuZXdzLm1pc3NldmFuLmNvbSIsCiAgICAgICAgICAgICJyZWFkLnFpZGlhbi5jb20iLAogICAgICAgICAgICAid3d3LjE1eWFuLmNvbSIsCiAgICAgICAgICAgICJ3d3cuMTdrLmNvbSIsCiAgICAgICAgICAgICJ3d3cuMTgxODMuY29tIiwKICAgICAgICAgICAgInd3dy4zNjBkb2MuY29tIiwKICAgICAgICAgICAgInd3dy5jb2NvMDEubmV0IiwKICAgICAgICAgICAgInd3dy5leXUuY29tIiwKICAgICAgICAgICAgInd3dy5ob25nc2h1LmNvbSIsCiAgICAgICAgICAgICJ3d3cuaG9uZ3hpdS5jb20iLAogICAgICAgICAgICAid3d3Lmltb29jLmNvbSIsCiAgICAgICAgICAgICJ3d3cuamp3eGMubmV0IiwKICAgICAgICAgICAgInd3dy5yZWFkbm92ZWwuY29tIiwKICAgICAgICAgICAgInd3dy50YWR1LmNvbSIsCiAgICAgICAgICAgICJ3d3cueHhzeS5uZXQiLAogICAgICAgICAgICAid3d3LnozejQuY29tIiwKICAgICAgICAgICAgInd3dy56aGlodS5jb20iLAogICAgICAgICAgICAieXVlZHUuMTYzLmNvbSIsCiAgICAgICAgICAgICJ3d3cucHBrYW8uY29tIiwKICAgICAgICAgICAgIm1vdmllLmRvdWJhbi5jb20iLAogICAgICAgICAgICAid3d3LnJ1aXdlbi5jb20iLAogICAgICAgICAgICAidmlwcmVhZGVyLnFpZGlhbi5jb20iLAogICAgICAgICAgICAid3d3LnBpZ2FpLm9yZyIsCiAgICAgICAgICAgICJ3d3cuc2hhbmdjLm5ldCIsCiAgICAgICAgICAgICJ3d3cubXlodGxtZWJvb2suY29tIiwKICAgICAgICAgICAgInd3dy55dXF1ZS5jb20iLAogICAgICAgICAgICAid3d3LmxvbmdtYWJvb2tjbi5jb20iLAogICAgICAgICAgICAid3d3LmFscGhhcG9saXMuY28uanAiLAogICAgICAgICAgICAid3d3LnNkaWZlbi5jb20iLAogICAgICAgICAgICAidm90ZXR3LmNvbSIsCiAgICAgICAgICAgICJib2tlMTEyLmNvbSIsCiAgICAgICAgICAgICJ3d3cubXlodGVib29rcy5jb20iLAogICAgICAgICAgICAid3d3LnhpZWd3LmNuIiwKICAgICAgICAgICAgImNodWFuZ3NoaS5xcS5jb20iLAogICAgICAgICAgICAid3d3LnV0YS1uZXQuY29tIiwKICAgICAgICAgICAgInd3dy5iaW1pYWNnLm5ldCIKICAgICAgICBdCiAgICB9CiAKICAgIHZhciByd2xfdXNlckRhdGEgPSBudWxsOwogICAgdmFyIGhvc3RuYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lOwogICAgdmFyIGJ0bl9ub2RlID0gbnVsbDsgICAKICAgIHZhciBydWxlID0gbnVsbDsKICAgIHZhciBsaXN0ID0gbnVsbDsKICAgIHZhciBoYXNGcmFtZSA9IGZhbHNlOwogCiAgICAvLyDlgqjlrZjlkI3np7AKICAgIHZhciBzdG9yYWdlTmFtZSA9ICJpcXhpblN0b3JhZ2VOYW1lIjsKICAgIC8vIOimgeWkhOeQhueahCBldmVudCDliJfooagKICAgIHZhciBob29rX2V2ZW50TmFtZXMsIHVuaG9va19ldmVudE5hbWVzLCBldmVudE5hbWVzOwogICAgLy8g5YKo5a2Y6KKrIEhvb2sg55qE5Ye95pWwCiAgICB2YXIgRXZlbnRUYXJnZXRfYWRkRXZlbnRMaXN0ZW5lciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyOwogICAgdmFyIGRvY3VtZW50X2FkZEV2ZW50TGlzdGVuZXIgPSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyOwogICAgdmFyIEV2ZW50X3ByZXZlbnREZWZhdWx0ID0gRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0OwogCiAgICAvLyDmn6XnnIvmnKzlnLDmmK/lkKblrZjlnKjml6fmlbDmja4KICAgIHJ3bF91c2VyRGF0YSA9IEdNX2dldFZhbHVlKCJyd2xfdXNlckRhdGEiKTsKICAgIGlmKCFyd2xfdXNlckRhdGEpewogICAgICAgIHJ3bF91c2VyRGF0YSA9IHNldHRpbmdEYXRhCiAgICAgICAgLy8gR01fc2V0VmFsdWUoInJ3bF91c2VyRGF0YSIscndsX3VzZXJEYXRhKTsKICAgIH0KICAgIC8vIOiHquWKqOabtOaWsOaVsOaNrgogICAgZm9yKGxldCB2YWx1ZSBpbiBzZXR0aW5nRGF0YSl7CiAgICAgICAgaWYoIXJ3bF91c2VyRGF0YS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpewogICAgICAgICAgICByd2xfdXNlckRhdGFbdmFsdWVdID0gc2V0dGluZ0RhdGFbdmFsdWVdOwogICAgICAgICAgICBHTV9zZXRWYWx1ZSgicndsX3VzZXJEYXRhIixyd2xfdXNlckRhdGEpOwogICAgICAgIH0KICAgIH0KIAogICAgdmVyc2lvbl91cF8zX3RvXzQoKTsKIAogICAgLy8g6I635Y+W6buR5ZCN5Y2V572R56uZCiAgICBsaXN0ID0gZ2V0X2JsYWNrX2xpc3QoKTsKIAogICAgLy8g5re75Yqg5oyJ6ZKuCiAgICAvLyBpZihyd2xfdXNlckRhdGEuYWRkQnRuKXsKICAgICAgICBhZGRCdG4oKTsgIC8vIOa3u+WKoAogICAgICAgIGJ0bl9ub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJsYWNrX25vZGUiKTsKIAogICAgICAgIHZhciB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJibGFja19ub2RlIikpewogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7CiAgICAgICAgICAgICAgICBxeGluU3RhcnQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFkZEJ0bigpOwogICAgICAgICAgICB9CiAgICAgICAgfSw1MDApCiAKICAgIC8vIH0KIAogICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgi5aSN5Yi26ZmQ5Yi26Kej6ZmkIOiuvue9riIsIHNldE1lbnUpCiAgICB2YXIgdXNlclNldHRpbmcgPSBHTV9nZXRWYWx1ZSgicndsX3VzZXJEYXRhIik7CiAKICAgIC8vIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeWHveaVsCBmdW5jCiAKICAgIGZ1bmN0aW9uIHF4aW5TdGFydCgpewogICAgICAgIGNvbnNvbGUubG9nKCLohJrmnKw6IOWkjeWItumZkOWItuino+mZpCjmlLkpIC0tLSDlvIDlp4vmiafooYwgLS0tIOWPkeW4g+iAhTogcXhpbiAtLS0gR2l0SHViOiBodHRwczovL2dpdGh1Yi5jb20vcXhpbkdpdEh1Yi9SZW1vdmUtd2ViLWxpbWl0cy0iKTsKICAgICAgICBhZGREcmFnRXZlbigpOwogICAgICAgIHNldEJ0bkNsaWNrKCk7CiAKICAgICAgICAvLyDmo4Dmn6XmmK/lkKblnKjpu5HlkI3ljZXkuK0KICAgICAgICBpZihjaGVja19ibGFja19saXN0KGxpc3QsaG9zdG5hbWUpKXsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGlmKHJ3bF91c2VyRGF0YS5hZGRCdG4pewogICAgICAgICAgICAgICAgICAgIGJ0bl9ub2RlLmNoZWNrZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCLohJrmnKxyd2wt6ZSZ6K+v77yaXG4gYnRuX25vZGUgOiAlc1xuJXNcbuiEmuacrHJ3bC3plJnor6/kvY3nva7vvJogYnRuX25vZGUuY2hlY2tlZCA9IHRydWU7IixidG5fbm9kZSxlKTsKICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIGluaXQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KIAogICAgLy/mt7vliqDmjInpkq4gZnVuYwogICAgZnVuY3Rpb24gYWRkQnRuKCl7CiAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJyZW1vdmUtd2ViLWxpbWl0cy1pcXhpbiIpOwogICAgICAgIG5vZGUuaWQgPSAicndsLWlxeGluIjsKICAgICAgICBub2RlLmNsYXNzTmFtZSA9ICJyd2wtZXhlbXB0IjsKIAogICAgICAgIC8vIOWGjeasoeaJk+W8gOeql+WPo+Wwj+S6juS5i+WJjeeql+WPo+eahOaDheWGtSzlr7zoh7TmjInpkq7lh7rnjrDlnKjlj6/op4bnqpflj6PkuYvlpJYKICAgICAgICB2YXIgc2NyZWVuQ2xpZW50SGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsKICAgICAgICB2YXIgdGVtcEhlaWdodDsKICAgICAgICBpZiAocndsX3VzZXJEYXRhLnBvc2l0aW9uVG9wPnNjcmVlbkNsaWVudEhlaWdodCl7CiAgICAgICAgICAgIHRlbXBIZWlnaHQgID0gc2NyZWVuQ2xpZW50SGVpZ2h0IC00MDsKICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgIHRlbXBIZWlnaHQgPSByd2xfdXNlckRhdGEucG9zaXRpb25Ub3A7CiAgICAgICAgfQogICAgICAgIC8vIOaUueWPmOeql+WPo+Wkp+Wwj+eahOaDheWGtQogICAgICAgIHdpbmRvdy5vbnJlc2l6ZT1mdW5jdGlvbigpeyAgCiAgICAgICAgICAgIHZhciBzY3JlZW5DbGllbnRIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OwogICAgICAgICAgICB2YXIgdGVtcEhlaWdodDsKIAogICAgICAgICAgICBpZiAocndsX3VzZXJEYXRhLnBvc2l0aW9uVG9wPnNjcmVlbkNsaWVudEhlaWdodCl7CiAgICAgICAgICAgICAgICAgICAgdGVtcEhlaWdodCAgPSBzY3JlZW5DbGllbnRIZWlnaHQgLTQwOwogICAgICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgICAgICB0ZW1wSGVpZ2h0ID0gcndsX3VzZXJEYXRhLnBvc2l0aW9uVG9wOwogICAgICAgICAgICB9CiAKICAgICAgICAgICAgbm9kZS5zdHlsZS50b3AgPSAgdGVtcEhlaWdodCArICJweCI7CiAgICAgICAgfQogCiAgICAgICAgdGVtcEhlaWdodCA9IHRlbXBIZWlnaHQ8MD8wOnRlbXBIZWlnaHQKICAgICAgICBub2RlLnN0eWxlLmNzc1RleHQgPSAicG9zaXRpb246Zml4ZWQ7dG9wOiIrdGVtcEhlaWdodCsicHg7bGVmdDoiK3J3bF91c2VyRGF0YS5wb3NpdGlvbkxlZnQrInB4O3JpZ2h0OiIrcndsX3VzZXJEYXRhLnBvc2l0aW9uUmlnaHQrInB4OyI7CiAgICAgICAgLy8gbm9kZS5pbm5lckhUTUwgPSAnPGxhYmVsPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iIiBpZD0iYmxhY2tfbm9kZSI+6buR5ZCN5Y2VPC9sYWJlbD48cXhpbmJ1dHRvbiBpZD0iZGVsZXRlIj5kZWxldGU8L2J0dG9uPic7CiAgICAgICAgLy8gbm9kZS5pbm5lckhUTUwgPSAnPGxhYmVsPumZkOWItuino+mZpCA8aW5wdXQgdHlwZT0iY2hlY2tib3giICBuYW1lPSIiIGlkPSJibGFja19ub2RlIj48L2xhYmVsPic7CiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSAnPHF4aW5idXR0b24gdHlwZT0icXhpbmJ1dHRvbiIgaWQ9InJ3bC1zZXRidG4iPiBzZXQgPC9xeGluYnV0dG9uPiA8bGFsYWxhIHN0eWxlPSJjdXJzb3I6bW92ZTsgZm9udC1zaXplOjEycHg7Ij7pmZDliLbop6PpmaQ8L2xhbGFsYT4gPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSIiIGlkPSJibGFja19ub2RlIiA+JzsKICAgICAgICBpZih3aW5kb3cuc2VsZiA9PT0gd2luZG93LnRvcCl7CiAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJib2R5IikpewogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsZnVuY3Rpb24oKXsKICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKCJyd2wtYWN0aXZlLWlxeGluIik7CiAgICAgICAgfSk7CiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIixmdW5jdGlvbigpewogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUoInJ3bC1hY3RpdmUtaXF4aW4iKTsKICAgICAgICAgICAgICAgIGJsYWNrX2NoZWNrKGJsYWNrX25vZGUuY2hlY2tlZCk7CiAgICAgICAgICAgIH0sMTAwKQogICAgICAgIH0pOwogCiAgICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKICAgICAgICBzdHlsZS50eXBlPSJ0ZXh0L2NzcyI7CiAKICAgICAgICB2YXIgc3R5bGVJbm5lciA9ICIjcndsLWlxeGlueyIgKwogICAgICAgICAgICAgICAgInBvc2l0aW9uOmZpeGVkOyIgKwogICAgICAgICAgICAgICAgInRyYW5zZm9ybTp0cmFuc2xhdGUoLTk1cHgsMCk7IiArCiAgICAgICAgICAgICAgICAid2lkdGg6ODVweDsiICsKICAgICAgICAgICAgICAgICJoZWlnaHQ6MjVweDsiICsKICAgICAgICAgICAgICAgICJmb250LXNpemU6MTJweDsiICsKICAgICAgICAgICAgICAgICJmb250LXdlaWdodDogNTAwOyIgKwogICAgICAgICAgICAgICAgImZvbnQtZmFtaWx5OlZlcmRhbmEsIEFyaWFsLCAn5a6L5L2TJzsiICsKICAgICAgICAgICAgICAgICJjb2xvcjojZmZmOyIgKwogICAgICAgICAgICAgICAgImJhY2tncm91bmQ6IzMzMzsiICsKICAgICAgICAgICAgICAgICJ6LWluZGV4OjIxNDc0ODM2NDc7IiArCiAgICAgICAgICAgICAgICAibWFyZ2luOiAwOyIgKwogICAgICAgICAgICAgICAgIm9wYWNpdHk6MC4wNTsiICsKICAgICAgICAgICAgICAgICJ0cmFuc2l0aW9uOjAuM3M7IiArCiAgICAgICAgICAgICAgICAib3ZlcmZsb3c6aGlkZGVuOyIgKwogICAgICAgICAgICAgICAgInVzZXItc2VsZWN0Om5vbmU7IiArCiAgICAgICAgICAgICAgICAidGV4dC1hbGlnbjpjZW50ZXI7IiArCiAgICAgICAgICAgICAgICAid2hpdGUtc3BhY2U6bm93cmFwOyIgKwogICAgICAgICAgICAgICAgImxpbmUtaGVpZ2h0OjI1cHg7IiArCiAgICAgICAgICAgICAgICAicGFkZGluZzowIDE2cHg7IiArCiAgICAgICAgICAgICAgICAiYm9yZGVyOjFweCBzb2xpZCAjY2NjOyIgKwogICAgICAgICAgICAgICAgImJvcmRlci13aWR0aDoxcHggMXB4IDFweCAwOyIgKwogICAgICAgICAgICAgICAgImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjVweDsiICsKICAgICAgICAgICAgICAgICJib3gtc2l6aW5nOiBjb250ZW50LWJveDsiICsKICAgICAgICAgICAgIn0iICsKICAgICAgICAgICAgIiNyd2wtaXF4aW4gaW5wdXR7IiArCiAgICAgICAgICAgICAgICAibWFyZ2luOiAwOyIgKwogICAgICAgICAgICAgICAgInBhZGRpbmc6IDA7IiArCiAgICAgICAgICAgICAgICAidmVydGljYWwtYWxpZ246bWlkZGxlOyIgKwogICAgICAgICAgICAgICAgIi13ZWJraXQtYXBwZWFyYW5jZTpjaGVja2JveDsiICsKICAgICAgICAgICAgICAgICItbW96LWFwcGVhcmFuY2U6Y2hlY2tib3g7IiArCiAgICAgICAgICAgICAgICAicG9zaXRpb246IHN0YXRpYzsiICsKICAgICAgICAgICAgICAgICJjbGlwOiBhdXRvOyIgKwogICAgICAgICAgICAgICAgIm9wYWNpdHk6IDE7IiArCiAgICAgICAgICAgICAgICAiY3Vyc29yOiBwb2ludGVyOyIgKwogICAgICAgICAgICAifSIgKwogICAgICAgICAgICAiI3J3bC1pcXhpbi5yd2wtYWN0aXZlLWlxeGlueyIgKwogICAgICAgICAgICAgICAgImxlZnQ6IDBweDsiICsKICAgICAgICAgICAgICAgICJ0cmFuc2Zvcm06dHJhbnNsYXRlKDAsMCk7IiArCiAgICAgICAgICAgICAgICAib3BhY2l0eTogMC45OyIgKwogICAgICAgICAgICAgICAgImhlaWdodDogMzJweDsiICsKICAgICAgICAgICAgICAgICJsaW5lLWhlaWdodDogMzJweCIgKwogICAgICAgICAgICAifSIgKwogICAgICAgICAgICAiI3J3bC1pcXhpbiBsYWJlbHsiICsKICAgICAgICAgICAgICAgICJtYXJnaW46MDsiICsKICAgICAgICAgICAgICAgICJwYWRkaW5nOjA7IiArCiAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQ6NTAwOyIgKwogICAgICAgICAgICAifSIgKwogICAgICAgICAgICAiI3J3bC1pcXhpbiAjcndsLXNldGJ0bnsiICsKICAgICAgICAgICAgICAgICJtYXJnaW46IDAgNHB4IDAgMDsiICsKICAgICAgICAgICAgICAgICJwYWRkaW5nOiAwIDAgMCA0cHg7IiArCiAgICAgICAgICAgICAgICAiYm9yZGVyOiBub25lOyIgKwogICAgICAgICAgICAgICAgImJvcmRlci1yYWRpdXM6IDJweDsiICsKICAgICAgICAgICAgICAgICJjdXJzb3I6IHBvaW50ZXI7IiArCiAgICAgICAgICAgICAgICAiYmFja2dyb3VuZDogI2ZmZjsiICsKICAgICAgICAgICAgICAgICJjb2xvcjogIzAwMDsiICsKICAgICAgICAgICAgIn0iICsKICAgICAgICAgICAgIiAiCiAgICAgICAgICAgIAogICAgICAgIGlmKCFyd2xfdXNlckRhdGEuYWRkQnRuKXsKICAgICAgICAgICAgdmFyIHN0eWxlVGVtcCA9ICIjcndsLWlxeGlue2Rpc3BsYXk6bm9uZX0iOwogICAgICAgICAgICBzdHlsZS5pbm5lckhUTUwgPSBzdHlsZUlubmVyICsgc3R5bGVUZW1wOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0eWxlLmlubmVySFRNTCA9IHN0eWxlSW5uZXI7CiAgICAgICAgfQogICAgICAgIGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNyd2wtaXF4aW4iKSl7CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCLpgJrov4dzdHlsZeaPkuWFpSIpOwogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjcndsLWlxeGluIikuYXBwZW5kQ2hpbGQoc3R5bGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCLpgJrov4dHTeaPkuWFpSIpOwogICAgICAgICAgICBHTV9hZGRTdHlsZShzdHlsZUlubmVyKTsKICAgICAgICB9CiAgICB9OwogCiAgICAvLyDnu5nmjInpkq7nu5Hlrprngrnlh7vkuovku7YKICAgIGZ1bmN0aW9uIHNldEJ0bkNsaWNrKCl7ICAKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjcndsLXNldGJ0biIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIixzZXRNZW51KTsKICAgIH0KIAogICAgLy8g6I+c5Y2VCiAgICAgZnVuY3Rpb24gc2V0TWVudSgpewogICAgICAgICAgICB2YXIgb2xkRWRpdEJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNyd2wtc2V0TWVudSIpOwogICAgICAgICAgICBpZihvbGRFZGl0Qm94KXsKICAgICAgICAgICAgICAgIG9sZEVkaXRCb3gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRFZGl0Qm94KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdXNlclNldHRpbmcgPSBHTV9nZXRWYWx1ZSgicndsX3VzZXJEYXRhIik7CiAgICAgICAgICAgIHZhciB1cGxvYWRfY2hlY2tlZCA9IHVzZXJTZXR0aW5nLmNvbm5lY3RUb1RoZVNlcnZlcj8iY2hlY2tlZCI6IiI7CiAgICAgICAgICAgIHZhciBidG5jaGVja2VkID0gIHVzZXJTZXR0aW5nLmFkZEJ0bj8nY2hlY2tlZCc6JycKIAogICAgICAgICAgICB2YXIgb2RvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICBvZG9tLmlkID0gInJ3bC1zZXRNZW51IjsKICAgICAgICAgICAgb2RvbS5zdHlsZS5jc3NUZXh0ID0icG9zaXRpb246IGZpeGVkOyIgKwogICAgICAgICAgICAgICAgInRvcDogMTAwcHg7IiArCiAgICAgICAgICAgICAgICAibGVmdDogNTBweDsiICsKICAgICAgICAgICAgICAgICJwYWRkaW5nOiAxMHB4OyIgKwogICAgICAgICAgICAgICAgImJhY2tncm91bmQ6ICNmZmY7IiArCiAgICAgICAgICAgICAgICAiYm9yZGVyLXJhZGl1czogNHB4OyI7CiAgICAgICAgICAgIEdNX2FkZFN0eWxlKCIjcndsLXNldE1lbnVTYXZlLCIgKwogICAgICAgICAgICAgICAgIiNyd2wtcmVzZXQsIiArCiAgICAgICAgICAgICAgICAiI3J3bC1zZXRNZW51Q2xvc2V7IiArCiAgICAgICAgICAgICAgICAgICAgIm1hcmdpbjogMDsiICsKICAgICAgICAgICAgICAgICAgICAicGFkZGluZzogMCAycHg7IiArCiAgICAgICAgICAgICAgICAgICAgImJvcmRlcjogbm9uZTsiICsKICAgICAgICAgICAgICAgICAgICAiYm9yZGVyLXJhZGl1czogMnB4OyIgKwogICAgICAgICAgICAgICAgICAgICJjdXJzb3I6IHBvaW50ZXI7IiArCiAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQ6ICNmZmY7IiArCiAgICAgICAgICAgICAgICAgICAgImNvbG9yOiAjMDAwOyIgKwogICAgICAgICAgICAgICAgIn0iICsKICAgICAgICAgICAgICAgICIjcndsLXJlc2V0eyIgKwogICAgICAgICAgICAgICAgICAgICJib3JkZXI6IDFweCBzb2xpZCAjNjY2OyIgKwogICAgICAgICAgICAgICAgIn0iICsKICAgICAgICAgICAgICAgICIjcndsLXNldE1lbnVTYXZleyIgKwogICAgICAgICAgICAgICAgICAgICJib3JkZXI6IDFweCBzb2xpZCBncmVlbjsiICsKICAgICAgICAgICAgICAgICJ9IiArCiAgICAgICAgICAgICAgICAiI3J3bC1zZXRNZW51Q2xvc2V7IiArCiAgICAgICAgICAgICAgICAgICAgImJvcmRlcjogMXB4IHNvbGlkIHJlZDsiICsKICAgICAgICAgICAgICAgICJ9IiArCiAgICAgICAgICAgICAgICAiI3J3bC1zZXRNZW51eyIgKwogICAgICAgICAgICAgICAgICAgICJ0ZXh0LWFsaWduOmxlZnQ7IiArCiAgICAgICAgICAgICAgICAgICAgImZvbnQtc2l6ZToxNHB4OyIgKwogICAgICAgICAgICAgICAgICAgICJ6LWluZGV4Ojk5OTk5OTsiICsKICAgICAgICAgICAgICAgICAgICAiYm9yZGVyOiAxcHggc29saWQgY29ybmZsb3dlcmJsdWU7IiArCiAgICAgICAgICAgICAgICAifSIgKwogICAgICAgICAgICAgICAgIiNyd2wtc2V0TWVudSBweyIgKwogICAgICAgICAgICAgICAgICAgICJtYXJnaW46NXB4IGF1dG87IiArCiAgICAgICAgICAgICAgICAifSIgKwogICAgICAgICAgICAgICAgIiAiKQogICAgICAgICAgICB2YXIgaW5uZXJIID0gIiIgKwogICAgICAgICAgICAgICAgIjxwPui3neemu+mhtumDqOi3neemu++8iOWNleS9jSDlg4/ntKDvvIkgPGlucHV0IGlkPSdwb3NpdGlvbnRvcCcgdHlwZT0ndGV4dCcgdmFsdWU9IiArIHVzZXJTZXR0aW5nLnBvc2l0aW9uVG9wICsgIj48L3A+IiArICIiICsKICAgICAgICAgICAgICAgIC8vICI8bGFiZXJsPiA8cD7lhYHorrjkuIrkvKDpu5HlkI3ljZU8aW5wdXQgaWQ9J3VwbG9hZGNoZWNrZWQnICB0eXBlPSdjaGVja2JveCcgIiArIHVwbG9hZF9jaGVja2VkICsgIj48L3A+IiArICI8L2xhYmVybD4iICsKICAgICAgICAgICAgICAgICI8cCBpZD0ncndsLXNob3J0Y3V0cycgdGl0bGU9J+W/q+aNt+mUric+5b+r5o236ZSu77yaIiArCiAgICAgICAgICAgICAgICAgICAgIjxzZWxlY3QgaWQ9J3J3bC1zaG9ydGN1dCc+IiArCiAgICAgICAgICAgICAgICAgICAgICAgICI8b3B0aW9uIHZhbHVlPSdvZmYnIiArICh1c2VyU2V0dGluZy5zaG9ydGN1dCA9PSAwPyJzZWxlY3RlZCI6IiIpICArICI+5YWz6ZetPC9vcHRpb24+IiArCiAgICAgICAgICAgICAgICAgICAgICAgICI8b3B0aW9uIHZhbHVlPSdmMSciICsgKHVzZXJTZXR0aW5nLnNob3J0Y3V0ID09IDE/InNlbGVjdGVkIjoiIikgICsgIj4gRjEgPC9vcHRpb24+IiArCiAgICAgICAgICAgICAgICAgICAgICAgICI8b3B0aW9uIHZhbHVlPSdjdHJsZjEnIiArICh1c2VyU2V0dGluZy5zaG9ydGN1dCA9PSAyPyJzZWxlY3RlZCI6IiIpICArICI+Y3RybCArIEYxPC9vcHRpb24+IiArCiAgICAgICAgICAgICAgICAgICAgICAgICI8b3B0aW9uIHZhbHVlPSdjdHJsYyciICsgKHVzZXJTZXR0aW5nLnNob3J0Y3V0ID09IDM/InNlbGVjdGVkIjoiIikgICsgIj5jdHJsICsgQzwvb3B0aW9uPiIgKwogICAgICAgICAgICAgICAgICAgICI8L3NlbGVjdD4iICsKICAgICAgICAgICAgICAgICI8L3A+ICIgKwogICAgICAgICAgICAgICAgIjxsYWJlcmw+IDxwPuaYvuekuuaMiemSrjxpbnB1dCBpZD0nYnRuY2hlY2tlZCcgIHR5cGU9J2NoZWNrYm94JyAiICsgYnRuY2hlY2tlZCArICI+IOeCueWHu+iEmuacrOeuoeeQhuaJqeWxleWPr+S7peWGjeasoeaJk+W8gOiuvue9rjwvcD4iICsgIjwvbGFiZXJsPiIgKwogICAgICAgICAgICAgICAgIjxwPumXrumimOWPjemmiOWcsOWdgDogPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9xeGluR2l0SHViL1JlbW92ZS13ZWItbGltaXRzLSc+R2l0SHViKHF4aW4pPC9hPiwgPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vc2NyaXB0cy8yODQ5Ny1yZW1vdmUtd2ViLWxpbWl0cy1tb2RpZmllZCc+R3JlYXN5Rm9yayhxeGluKTwvYT4gIDwvUD4iICsKICAgICAgICAgICAgICAgICI8cD7pobnnm67ljp/kvZzogIXkuLogPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vY2F0NzM3My5naXRodWIuaW8vcmVtb3ZlLXdlYi1saW1pdHMvJz5jYXQ3MzczPC9hPiwgPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9DYXQ3MzczL3JlbW92ZS13ZWItbGltaXRzJz7pobnnm67kuLvpobU8L2E+IDwvUD4iICsKICAgICAgICAgICAgICAgICI8cD7og73lipvmnInpmZAs5LiN6IO95q+P5Liq572R56uZ6YO96IO95a6M576OPC9QPiIgKwogICAgICAgICAgICAgICAgIjxwPuWmguiLpeWPjemmiCzliqHlv4XluKbkuIror6bnu4bnvZHlnYA8L1A+IiArCiAgICAgICAgICAgICAgICAiPHA+ICA8L1A+IiArCiAgICAgICAgICAgICAgICAvLyAiPHA+PHM+5pi+56S65oyJ6ZKu77yI5b6F5re75Yqg77yJPC9zPjwvcD4iICsKICAgICAgICAgICAgICAgIC8vICI8cD48cz7mjInpkq7pgI/mmI7luqbvvIjlvoXmt7vliqDvvIk8L3M+PC9wPiIgKwogICAgICAgICAgICAgICAgLy8gIjxwPjxzPuW/q+mAn+WkjeWItu+8iOW+hea3u+WKoO+8iTwvcz48L3A+IiArCiAgICAgICAgICAgICAgICAvLyAiPHA+PHM+5YW25LuWICjlvoXmt7vliqDvvIk8L3M+PC9wPiIgKwogICAgICAgICAgICAgICAgIjxwPuaVsOaNruWtmOWCqOaWueW8j+S4ukpTT04s5aaC6Iul5Zyo5q2k5L+u5pS5LOazqOaEj+W8leWPt+mAl+WPtzwvUD4iICsKICAgICAgICAgICAgICAgICI8dGV4dGFyZWEgd3JhcD0nb2ZmJyBjb2xzPSc0NScgcm93cz0nMjAnIHN0eWxlPSdvdmVyZmxvdzphdXRvO2JvcmRlci1yYWRpdXM6NHB4Oyc+IiArIEpTT04uc3RyaW5naWZ5KHVzZXJTZXR0aW5nLmRhdGEsZmFsc2UsNCkgKyAiPC90ZXh0YXJlYT4iICsgCiAgICAgICAgICAgICAgICAiPGJyPiIgKwogICAgICAgICAgICAgICAgIjxxeGluYnV0dG9uIGlkPSdyd2wtcmVzZXQnPua4heepuuiuvue9rjwvcXhpbmJ1dHRvbj4gJm5ic3A7Jm5ic3A7Jm5ic3A7IiArCiAgICAgICAgICAgICAgICAiPHF4aW5idXR0b24gaWQ9J3J3bC1zZXRNZW51U2F2ZSc+5L+d5a2YPC9xeGluYnV0dG9uPiAmbmJzcDsmbmJzcDsmbmJzcDsiICsKICAgICAgICAgICAgICAgICI8cXhpbmJ1dHRvbiBpZD0ncndsLXNldE1lbnVDbG9zZScgb25jbGljaz0ndGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wYXJlbnROb2RlKTsnIHRpdGxlPSflpoLmnpzml6Dms5XlhbPpl60g6K+35Yi35paw55WM6Z2iJyA+5YWz6ZetPC9xeGluYnV0dG9uPiAmbmJzcDsmbmJzcDsmbmJzcDsiICsKICAgICAgICAgICAgICAgICI8c3BhbiBzdHlsZT0nZm9udC1zaXplOjAuN2VtOyc+LS18IHF4aW4gdjQuNC42IDIwMjEtMDYtMDkgfC0tPC9zcGFuPiIgKwogICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgIiI7CiAgICAgICAgICAgIG9kb20uaW5uZXJIVE1MID0gaW5uZXJIOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG9kb20pOwogCiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNyd2wtc2V0TWVudVNhdmUiKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsc2F2ZVNldHRpbmcpOwogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjcndsLXNldE1lbnVDbG9zZSIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIixjbG9zZU1lbnUpOwogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjcndsLXJlc2V0IikuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLHJ3bFJlc2V0KTsKIAogICAgICAgIH0KIAogICAgLy8g5L+d5a2Y6YCJ6aG5CiAgICBmdW5jdGlvbiBzYXZlU2V0dGluZygpewogICAgICAgIHZhciBwb3NpdGlvblRvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNyd2wtc2V0TWVudSAjcG9zaXRpb250b3AiKS52YWx1ZTsKICAgICAgICAvLyB2YXIgdXBsb2FkQ2hlY2tlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNyd2wtc2V0TWVudSAjdXBsb2FkY2hlY2tlZCIpLmNoZWNrZWQ7CiAgICAgICAgdmFyIHNob3J0Y3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3J3bC1zZXRNZW51ICNyd2wtc2hvcnRjdXQiKS5zZWxlY3RlZEluZGV4OwogICAgICAgIHZhciBhZGRCdG5DaGVja2VkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3J3bC1zZXRNZW51ICNidG5jaGVja2VkIikuY2hlY2tlZDsKICAgICAgICB2YXIgY29kZXZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3J3bC1zZXRNZW51IHRleHRhcmVhIikudmFsdWU7CiAgICAgICAgaWYoY29kZXZhbHVlKXsKICAgICAgICAgICAgdmFyIHVzZXJTZXR0aW5nID0gR01fZ2V0VmFsdWUoInJ3bF91c2VyRGF0YSIpOwogCiAgICAgICAgICAgIHVzZXJTZXR0aW5nLmFkZEJ0biA9IGFkZEJ0bkNoZWNrZWQ7CiAgICAgICAgICAgIHVzZXJTZXR0aW5nLmRhdGEgPSBKU09OLnBhcnNlKGNvZGV2YWx1ZSk7CiAgICAgICAgICAgIHVzZXJTZXR0aW5nLnBvc2l0aW9uVG9wID0gcGFyc2VJbnQocG9zaXRpb25Ub3ApOwogICAgICAgICAgICB1c2VyU2V0dGluZy5zaG9ydGN1dCA9IHBhcnNlSW50KHNob3J0Y3V0KTsKICAgICAgICAgICAgLy8gdXNlclNldHRpbmcuY29ubmVjdFRvVGhlU2VydmVyID0gdXBsb2FkQ2hlY2tlZDsKIAogICAgICAgICAgICBHTV9zZXRWYWx1ZSgicndsX3VzZXJEYXRhIix1c2VyU2V0dGluZyk7CiAgICAgICAgICAgIC8vIOWIt+aWsOmhtemdogogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgIH0sMzAwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydCgi6L6T5YWl5Li656m6Iik7CiAgICAgICAgICAgIC8vIHRoaXMucmVzZXQoKTsKICAgICAgICB9CiAgICAgICAgY2xvc2VNZW51KCk7CiAgICB9CiAgICAvLyDlpI3ljp/oj5zljZUKICAgIGZ1bmN0aW9uIHJ3bFJlc2V0KCl7CiAgICAgICAgR01fZGVsZXRlVmFsdWUoInJ3bF91c2VyRGF0YSIpOwogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0KIAogICAgLy/lhbPpl63oj5zljZUKICAgIGZ1bmN0aW9uIGNsb3NlTWVudSgpewogICAgICAgIHZhciBvbGRFZGl0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3J3bC1zZXRNZW51Iik7CiAgICAgICAgaWYob2xkRWRpdEJveCl7CiAgICAgICAgICAgIG9sZEVkaXRCb3gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRFZGl0Qm94KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KIAogICAgLy8g5aKe5Yqg5ouW5ou95LqL5Lu2IOi/m+ihjOe7keWumgogICAgZnVuY3Rpb24gYWRkRHJhZ0V2ZW4oKXsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBkcmFnQnRuKCkKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiZHJhZ0J0buWHveaVsCDmiqXplJkiKTsKICAgICAgICAgICAgfQogICAgICAgIH0sMTAwMCkKICAgICAgICAvLyBkcmFnQnRuKCk7ICAvLyDlop7liqDmi5bliqjkuovku7YKICAgIH0KIAogICAgLy8g5aKe5Yqg5ouW5Yqo5LqL5Lu2IGZ1bmMKICAgIGZ1bmN0aW9uIGRyYWdCdG4oKXsKICAgICAgICB2YXIgcndsX25vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjcndsLWlxeGluIik7CiAgICAgICAgcndsX25vZGUuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vkb3duIixmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIHJ3bF9ub2RlLnN0eWxlLnRyYW5zaXRpb24gPSAibnVsbCI7CiAgICAgICAgICAgIHZhciBkaXNYID0gZXZlbnQuY2xpZW50WCAtIHJ3bF9ub2RlLm9mZnNldExlZnQ7CiAgICAgICAgICAgIHZhciBkaXNZID0gZXZlbnQuY2xpZW50WSAtIHJ3bF9ub2RlLm9mZnNldFRvcDsKIAogICAgICAgICAgICB2YXIgbW92ZSA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIHJ3bF9ub2RlLnN0eWxlLmxlZnQgPSBldmVudC5jbGllbnRYIC0gZGlzWCArICJweCIgOwogICAgICAgICAgICAgICAgcndsX25vZGUuc3R5bGUudG9wICA9IGV2ZW50LmNsaWVudFkgLSBkaXNZICsgInB4IiA7CiAgICAgICAgICAgIH0KIAogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW1vdmUiLG1vdmUpOwogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZXVwIixmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcndsX25vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICIwLjNzIjsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsbW92ZSk7CiAgICAgICAgICAgICAgICAvLyDmraTlh73mlbDlhoXmiYDmnInnmoTms6jph4ror63lj6Xpg73mmK/mnInnlKjnmoQKICAgICAgICAgICAgICAgICAgICAvLyDlvIDlkK/lkI4s5Y+v5ouW5Yqo5Yiw5bGP5bmV5Y+z5L6nLOS9huWwmuacqua3u+WKoGNzcwogICAgICAgICAgICAgICAgICAgIC8vIOWcqOS4iumdoua3u+WKoCByd2wtYWN0aXZlLWlxeGluIOeahOWcsOaWueWKoOS4iuWIpOaWreW3puWPsyzlnKjliqDkuIrnm7jlupTnmoRjc3PljbPlj68KICAgICAgICAgICAgICAgICAgICAvLyDmh5IgMjAxOC0wNC0xOCAyMTo1MTozMgogICAgICAgICAgICAgICAgLy8gdmFyIGJvZHlXaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7CiAgICAgICAgICAgICAgICB2YXIgcndsX25vZGVXaWR0aCA9IHJ3bF9ub2RlLm9mZnNldExlZnQgKyByd2xfbm9kZS5vZmZzZXRXaWR0aC8yOwogICAgICAgICAgICAgICAgLy8gaWYocndsX25vZGVXaWR0aCA+IGJvZHlXaWR0aC8yKXsKICAgICAgICAgICAgICAgIC8vICAgICByd2xfbm9kZS5zdHlsZS5sZWZ0ID0gImF1dG8iOwogICAgICAgICAgICAgICAgLy8gICAgIHJ3bF9ub2RlLnN0eWxlLnJpZ2h0ID0gMDsKICAgICAgICAgICAgICAgIC8vICAgICByd2xfdXNlckRhdGEucG9zaXRpb25MZWZ0ID0gImF1dG8iOwogICAgICAgICAgICAgICAgLy8gICAgIHJ3bF91c2VyRGF0YS5wb3NpdGlvblJpZ2h0ID0gIjAiOwogICAgICAgICAgICAgICAgLy8gfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByd2xfbm9kZS5zdHlsZS5yaWdodCA9IHJ3bF91c2VyRGF0YS5wb3NpdGlvblJpZ2h0ID0gImF1dG8iOwogICAgICAgICAgICAgICAgICAgIHJ3bF9ub2RlLnN0eWxlLmxlZnQgPSByd2xfdXNlckRhdGEucG9zaXRpb25MZWZ0ID0gIDA7CiAgICAgICAgICAgICAgICAvLyB9CiAgICAgICAgICAgICAgICByd2xfdXNlckRhdGEucG9zaXRpb25Ub3AgPSByd2xfbm9kZS5vZmZzZXRUb3A7CiAgICAgICAgICAgICAgICBHTV9zZXRWYWx1ZSgicndsX3VzZXJEYXRhIixyd2xfdXNlckRhdGEpOwogCiAgICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgIH0KIAogICAgLy8g5Yid5aeL5YyWIGluaXQgZnVuYyAg6L+Z6YeM5omN5piv5qC45b+DCiAgICBmdW5jdGlvbiBpbml0KCkgewogICAgICAgIC8vIOmSiOWvueS4quWIq+e9keermemHh+WPluS4jeWQjOeahOetlueVpQogICAgICAgIHJ1bGUgPSBjbGVhcigpOwogICAgICAgIC8vIOiuvue9riBldmVudCDliJfooagKICAgICAgICBob29rX2V2ZW50TmFtZXMgPSBydWxlLmhvb2tfZXZlbnROYW1lcy5zcGxpdCgifCIpOwogICAgICAgIC8vIFRPRE8gQWxsb3dlZCB0byByZXR1cm4gdmFsdWUKICAgICAgICB1bmhvb2tfZXZlbnROYW1lcyA9IHJ1bGUudW5ob29rX2V2ZW50TmFtZXMuc3BsaXQoInwiKTsKICAgICAgICBldmVudE5hbWVzID0gaG9va19ldmVudE5hbWVzLmNvbmNhdCh1bmhvb2tfZXZlbnROYW1lcyk7CiAKICAgICAgICAvLyDosIPnlKjmuIXnkIYgRE9NMCBldmVudCDmlrnms5XnmoTlvqrnjq8KICAgICAgICBpZihydWxlLmRvbTApIHsKICAgICAgICAgICAgc2V0SW50ZXJ2YWwoY2xlYXJMb29wLCAxMCAqIDEwMDApOwogICAgICAgICAgICBzZXRUaW1lb3V0KGNsZWFyTG9vcCwgMTUwMCk7CiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY2xlYXJMb29wLCB0cnVlKTsKICAgICAgICAgICAgY2xlYXJMb29wKCk7CiAgICAgICAgfQogCiAgICAgICAgLy8gaG9vayBhZGRFdmVudExpc3RlbmVyIC8v5a+86Ie05pCc57Si6Lez6L2s5aSx5pWI55qE5Y6f5ZugCiAgICAgICAgaWYocnVsZS5ob29rX2FkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgICAgICAgRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyOwogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcjsKIAogICAgICAgICAgICBpZihoYXNGcmFtZSl7CiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwO2k8aGFzRnJhbWUubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICAgICAgaGFzRnJhbWVbaV0uY29udGVudFdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogCiAgICAgICAgfQogCiAgICAgICAgLy8gaG9vayBwcmV2ZW50RGVmYXVsdAogICAgICAgIGlmKHJ1bGUuaG9va19wcmV2ZW50RGVmYXVsdCkgewogICAgICAgICAgICBFdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmKGhvb2tfZXZlbnROYW1lcy5pbmRleE9mKHRoaXMudHlwZSkgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgRXZlbnRfcHJldmVudERlZmF1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKIAogICAgICAgICAgICBpZihoYXNGcmFtZSl7CiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwO2k8aGFzRnJhbWUubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICAgICAgaGFzRnJhbWVbaV0uY29udGVudFdpbmRvdy5FdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaG9va19ldmVudE5hbWVzLmluZGV4T2YodGhpcy50eXBlKSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50X3ByZXZlbnREZWZhdWx0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogCiAgICAgICAgLy8gSG9vayBzZXQgcmV0dXJuVmFsdWUKICAgICAgICBpZihydWxlLmhvb2tfc2V0X3JldHVyblZhbHVlKSB7CiAgICAgICAgICAgIEV2ZW50LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKCdyZXR1cm5WYWx1ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYodGhpcy5yZXR1cm5WYWx1ZSAhPT0gdHJ1ZSAmJiBob29rX2V2ZW50TmFtZXMuaW5kZXhPZih0aGlzLnR5cGUpID49IDApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJldHVyblZhbHVlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogCiAgICAgICAgLy8g5re75YqgQ1NTICAgICAvLyBjb25zb2xlLmRlYnVnKCd1cmw6ICcgKyB1cmwsICdzdG9yYWdlTmFtZe+8micgKyBzdG9yYWdlTmFtZSwgJ3J1bGU6ICcgKyBydWxlLm5hbWUpOwogICAgICAgIGlmKHJ1bGUuYWRkX2NzcykgewogICAgICAgICAgICBHTV9hZGRTdHlsZSgnaHRtbCwgOm5vdChbY2xhc3MqPSJyd2wtZXhlbXB0Il0pIHstd2Via2l0LXVzZXItc2VsZWN0OnRleHQhaW1wb3J0YW50OyAtbW96LXVzZXItc2VsZWN0OnRleHQhaW1wb3J0YW50O30gOm5vdChbY2xhc3MqPSJyd2wtZXhlbXB0Il0pIDo6c2VsZWN0aW9uIHtjb2xvcjojZmZmOyBiYWNrZ3JvdW5kOiMzMzkwRkYhaW1wb3J0YW50O30nKTsKICAgICAgICB9IC8vZWxzZSB7CiAgICAgICAgICAgIC8vR01fYWRkU3R5bGUoJ2h0bWwsIDpub3QoW2NsYXNzKj0icndsLWV4ZW1wdCJdKSB7LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0IWltcG9ydGFudDsgLW1vei11c2VyLXNlbGVjdDp0ZXh0IWltcG9ydGFudDt9Jyk7CiAgICAgICAgLy99CiAgICB9CiAKICAgIC8vIEhvb2sgYWRkRXZlbnRMaXN0ZW5lciBwcm9jCiAgICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHVzZUNhcHR1cmUpIHsKICAgICAgICB2YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSB0aGlzID09PSBkb2N1bWVudCA/IGRvY3VtZW50X2FkZEV2ZW50TGlzdGVuZXIgOiBFdmVudFRhcmdldF9hZGRFdmVudExpc3RlbmVyOwogICAgICAgIGlmKGhvb2tfZXZlbnROYW1lcy5pbmRleE9mKHR5cGUpID49IDApIHsKICAgICAgICAgICAgX2FkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcywgW3R5cGUsIHJldHVyblRydWUsIHVzZUNhcHR1cmVdKTsKICAgICAgICB9IGVsc2UgaWYodW5ob29rX2V2ZW50TmFtZXMuaW5kZXhPZih0eXBlKSA+PSAwKSB7CiAgICAgICAgICAgIHZhciBmdW5jc05hbWUgPSBzdG9yYWdlTmFtZSArIHR5cGUgKyAodXNlQ2FwdHVyZSA/ICd0JyA6ICdmJyk7CiAKICAgICAgICAgICAgaWYodGhpc1tmdW5jc05hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHRoaXNbZnVuY3NOYW1lXSA9IFtdOwogICAgICAgICAgICAgICAgX2FkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcywgW3R5cGUsIHVzZUNhcHR1cmUgPyB1bmhvb2tfdCA6IHVuaG9va19mLCB1c2VDYXB0dXJlXSk7CiAgICAgICAgICAgIH0KIAogICAgICAgICAgICB0aGlzW2Z1bmNzTmFtZV0ucHVzaChmdW5jKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfYWRkRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgIH0KIAogICAgLy8g5riF55CG5b6q546vCiAgICBmdW5jdGlvbiBjbGVhckxvb3AoKSB7CiAgICAgICAgcnVsZSA9IGNsZWFyKCkgLy8g5a+55LqO5Yqo5oCB55Sf5oiQ55qE6IqC54K5LOmaj+aXtuajgOa1iwogICAgICAgIHZhciBlbGVtZW50cyA9IGdldEVsZW1lbnRzKCk7CiAKICAgICAgICBmb3IodmFyIGkgaW4gZWxlbWVudHMpIHsKICAgICAgICAgIGZvcih2YXIgaiBpbiBldmVudE5hbWVzKSB7CiAgICAgICAgICAgIHZhciBuYW1lID0gJ29uJyArIGV2ZW50TmFtZXNbal07CiAKICAgICAgICAgICAgLy8gOz/mnKrop6PlhrMKICAgICAgICAgICAgICAgIC8vIDIwMTgtMDQtMDIgZWxlbWVudHPkuK3kvJrmnInlrZfnrKbkuLLlh7rnjrAs5Y6f54mI5LiN5LyaLOmXrumimOS4jeaYjizmoLnmnKzljp/lm6DlsJrmnKrop6PlhrMKICAgICAgICAgICAgICAgIC8vIOebuOWFs+WPjemmiCAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy96aC1DTi9mb3J1bS9kaXNjdXNzaW9uLzM2MDE0CiAgICAgICAgICAgICAgICAvLyDpl67popjniYjmnKzlj7cgIHYzLjAuNwogICAgICAgICAgICAgICAgLy8g6Zeu6aKY6KGl5YWFICAg5LmL5YmN5Y+v5Lul5L2/55SoLOWFt+S9k+eJiOacrOacqua1i++8iDIwMTgtMDQtMDIgMjE6Mjc6NTPvvIks5Y6f54mI5Y+v5Lul5L2/55SoCiAgICAgICAgICAgIGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlbGVtZW50c1tpXSk9PSJbb2JqZWN0IFN0cmluZ10iKXsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZWxlbWVudHNbaV0pCiAgICAgICAgICAgIC8vIGlmKHR5cGVvZiBlbGVtZW50c1tpXVtuYW1lXSA9PT0gIm9iamVjdCIpewogICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2codHlwZW9mIGVsZW1lbnRzW2ldW25hbWVdKQogICAgICAgICAgICAvLyB9CiAgICAgICAgICAgIGlmKGVsZW1lbnRzW2ldW25hbWVdICE9PSBudWxsICYmIGVsZW1lbnRzW2ldW25hbWVdICE9PSBvbnh4eCkgewogICAgICAgICAgICAgICAgaWYodW5ob29rX2V2ZW50TmFtZXMuaW5kZXhPZihldmVudE5hbWVzW2pdKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNbaV1bc3RvcmFnZU5hbWUgKyBuYW1lXSA9IGVsZW1lbnRzW2ldW25hbWVdOwogICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2ldW25hbWVdID0gb254eHg7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50c1tpXVtuYW1lXSA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGRvY3VtZW50Lm9ubW91c2Vkb3duID0gZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9OwogICAgfQogCiAgICAvLyDov5Tlm550cnVl55qE5Ye95pWwCiAgICBmdW5jdGlvbiByZXR1cm5UcnVlKGUpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIHVuaG9va190KGUpIHsKICAgICAgICByZXR1cm4gdW5ob29rKGUsIHRoaXMsIHN0b3JhZ2VOYW1lICsgZS50eXBlICsgJ3QnKTsKICAgIH0KICAgIGZ1bmN0aW9uIHVuaG9va19mKGUpIHsKICAgICAgICByZXR1cm4gdW5ob29rKGUsIHRoaXMsIHN0b3JhZ2VOYW1lICsgZS50eXBlICsgJ2YnKTsKICAgIH0KICAgIGZ1bmN0aW9uIHVuaG9vayhlLCBzZWxmLCBmdW5jc05hbWUpIHsKICAgICAgICB2YXIgbGlzdCA9IHNlbGZbZnVuY3NOYW1lXTsKICAgICAgICBmb3IodmFyIGkgaW4gbGlzdCkgewogICAgICAgICAgICBsaXN0W2ldKGUpOwogICAgICAgIH0KIAogICAgICAgIGUucmV0dXJuVmFsdWUgPSB0cnVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVuY3Rpb24gb254eHgoZSkgewogICAgICAgIHZhciBuYW1lID0gc3RvcmFnZU5hbWUgKyAnb24nICsgZS50eXBlOwogICAgICAgIHRoaXNbbmFtZV0oZSk7CiAKICAgICAgICBlLnJldHVyblZhbHVlID0gdHJ1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KIAogICAgLy8g6I635Y+W5omA5pyJ5YWD57SgIOWMheaLrGRvY3VtZW50CiAgICBmdW5jdGlvbiBnZXRFbGVtZW50cygpIHsKICAgICAgICB2YXIgZWxlbWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKTsKICAgICAgICBlbGVtZW50cy5wdXNoKGRvY3VtZW50KTsKIAogICAgICAgIC8vIOW+queOr+aJgOaciSBmcmFtZSDnqpflj6MKICAgICAgICB2YXIgZnJhbWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiZnJhbWUiKQogICAgICAgIGlmKGZyYW1lcyl7CiAgICAgICAgICAgIGhhc0ZyYW1lID0gZnJhbWVzOwogICAgICAgICAgICB2YXIgZnJhbWVzX2VsZW1lbnQ7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwO2k8ZnJhbWVzLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgZnJhbWVzX2VsZW1lbnQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcmFtZXNbaV0uY29udGVudFdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIqIikpCiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGZyYW1lc1tpXS5jb250ZW50V2luZG93LmRvY3VtZW50KQogICAgICAgICAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQoZnJhbWVzX2VsZW1lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBlbGVtZW50czsKICAgIH07CiAKICAgIC8vIOiOt+WPlum7keWQjeWNlee9keermSBGdW5jCiAgICBmdW5jdGlvbiBnZXRfYmxhY2tfbGlzdCgpewogICAgICAgIC8vIOS5i+WJjeeJiOacrOWPr+iDveWvvOiHtOWtmOWCqOepuueahOWtl+espuS4sgogICAgICAgICAgICAvLyAyMDE4LTA2LTExIDE1OjExOjQ0IOS/neeVmSzlvZPlrrnplJnlpITnkIYKICAgICAgICB2YXIgZGF0YV90ZW1wID0gcndsX3VzZXJEYXRhLmRhdGE7CiAgICAgICAgZGF0YV90ZW1wID0gZGF0YV90ZW1wLmZpbHRlcihmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmxlbmd0aD4xOwogICAgICAgICAgICB9KQogICAgICAgIHJldHVybiBkYXRhX3RlbXA7CiAgICB9CiAgICAKICAgIC8vIOajgOafpeaYr+WQpuWtmOWcqOS6jum7keWQjeWNleS4rSDov5Tlm57kvY3nva4gZnVuYwogICAgZnVuY3Rpb24gY2hlY2tfYmxhY2tfbGlzdChsaXN0LGhvc3QpewogICAgICAgIGZvcihsZXQgaT0wO2k8bGlzdC5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgaWYofmhvc3RuYW1lLmluZGV4T2YobGlzdFtpXSkpewogICAgICAgICAgICAgICAgcmV0dXJuIGkrMTsgIC8v5LiH5LiA5Yy56YWN5Yiw56ys5LiA5LiqLOi/lOWbnjAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAKICAgIC8vIOm8oOagh+eCueWHu+WQjuaMiemSruWQjiDmo4Dmn6XmmK/lkKblnKjpu5HlkI3ljZUKICAgIGZ1bmN0aW9uIGJsYWNrX2NoZWNrKGJvb2wpewogICAgICAgIHZhciBsaXN0ID0gR01fZ2V0VmFsdWUoInJ3bF91c2VyRGF0YSIpLmRhdGEKICAgICAgICB2YXIgY2hlY2sgPSBjaGVja19ibGFja19saXN0KGxpc3QsaG9zdG5hbWUpOwogCiAgICAgICAgaWYgKGJvb2wgJiYgIWNoZWNrKSB7CiAgICAgICAgICAgIGxpc3QgPSBsaXN0LmNvbmNhdChob3N0bmFtZSk7CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCLpgInkuK0g5LiN5Zyo6buR5ZCN5Y2VLCDlop7liqAiLGhvc3RuYW1lLGxpc3QpOwogICAgICAgICAgICByd2xfdXNlckRhdGEud2FpdFVwbG9hZC5wdXNoKGhvc3RuYW1lKTsgLy/lh4blpIfkuIrkvKAKICAgICAgICAgICAgcndsX3VzZXJEYXRhLmN1cnJlbnRVUkwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coImFmdGVyOiAiLHJ3bF91c2VyRGF0YS53YWl0VXBsb2FkKQogCiAgICAgICAgICAgIHNhdmVEYXRhKGxpc3QpOwogICAgICAgICAgICBpbml0KCk7CiAKICAgICAgICB9ZWxzZSBpZighYm9vbCAmJiBjaGVjayl7CiAgICAgICAgICAgIGxpc3Quc3BsaWNlKGNoZWNrLTEsMSk7CiAgICAgICAgICAgIHNhdmVEYXRhKGxpc3QpOwogICAgICAgICAgICAvLyDliLfmlrDpobXpnaIKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCLliLfmlrDpobXpnaJsb2FkaW5nIik7CiAgICAgICAgICAgIH0sMzUwKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KIAogICAgLy8g5L+d5a2Y5pys5Zyw5pWw5o2uLOW5tuWwhuaVsOaNruS4iuS8oOiHs+acjeWKoeWZqAogICAgZnVuY3Rpb24gc2F2ZURhdGEobGlzdHMpewogICAgICAgIGxpc3RzID0gbGlzdHMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICByZXR1cm4gaXRlbS5sZW5ndGg+MTsKICAgICAgICB9KQogCiAgICAgICAgLy8g5pu05paw5pWw5o2uCiAgICAgICAgcndsX3VzZXJEYXRhLmRhdGEgPSBsaXN0cy5zb3J0KCk7CiAKICAgICAgICAvLyDlsIbmnKzlnLDpu5HlkI3ljZXkuIrkvKAKICAgICAgICAvLyBpZiAocndsX3VzZXJEYXRhLndhaXRVcGxvYWQubGVuZ3RoID4gMCAmJiByd2xfdXNlckRhdGEuY29ubmVjdFRvVGhlU2VydmVyKXsKICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coInJ3bCA6IOS4iuS8oC4uLiIscndsX3VzZXJEYXRhLndhaXRVcGxvYWQpOwogICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygicndsIDog5byA5aeL5LiK5LygLS0tLS0iKTsKICAgICAgICAvLyAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgIC8vICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgIC8vICAgICAgIC8vIHVybDogImh0dHA6Ly8xMjcuMC4wLjE6ODAwMC90b29sL3Rlc3RhamF4LyIsCiAgICAgICAgLy8gICAgICAgdXJsOiAiaHR0cDovL2VlbW0ubWUvdG9vbC9yd2xfdXBsb2FkLyIsCiAgICAgICAgLy8gICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocndsX3VzZXJEYXRhKSwKICAgICAgICAvLyAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgLy8gICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIKICAgICAgICAvLyAgICAgICB9LAogICAgICAgIC8vICAgICAgIG9ubG9hZDogZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAvLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKCJyd2wgOiDkuIrkvKDmiJDlip8tLS0tIik7CiAgICAgICAgLy8gICAgICAgfQogICAgICAgIC8vICAgICB9KTsKICAgICAgICAvLyAgICAgcndsX3VzZXJEYXRhLndhaXRVcGxvYWQgPSBbXTsKICAgICAgICAvLyB9CiAKICAgICAgICBHTV9zZXRWYWx1ZSgicndsX3VzZXJEYXRhIixyd2xfdXNlckRhdGEpOwogICAgICAgIHJldHVybiByd2xfdXNlckRhdGE7CiAgICB9CiAKICAgIC8vIOaVsOe7hOWOu+mHjQogICAgZnVuY3Rpb24gdW5pcXVlKGFycikgewogICAgICB2YXIgcmV0ID0gW10KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgaXRlbSA9IGFycltpXQogICAgICAgIGlmIChyZXQuaW5kZXhPZihpdGVtKSA9PT0gLTEpIHsKICAgICAgICAgIHJldC5wdXNoKGl0ZW0pCiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiByZXQ7CiAgICB9CiAKICAgIC8vIOWkjeWItuWIsOWJqui0tOadvwogICAgZnVuY3Rpb24gc2V0Q2xpcGJvYXJkKCl7CiAgICAgICAgdmFyIHRleHRfb2JqID0gd2luZG93LmdldFNlbGVjdGlvbigpOwogICAgICAgIHZhciB0ZXh0ID0gdGV4dF9vYmoudG9TdHJpbmcoKTsKICAgICAgICBHTV9zZXRDbGlwYm9hcmQodGV4dCk7CiAKICAgIH0KIAogICAgLy8g5b+r5o236ZSuIEYx77yIY3RybCtmMe+8iSDlpI3liLYgCiAgICBmdW5jdGlvbiBob3RrZXkoKSB7CiAgICAgICAgdmFyIGEgPSB3aW5kb3cuZXZlbnQua2V5Q29kZTsKICAgICAgICAvLyBpZiAoKGEgPT0gMTEyKSAmJiAoZXZlbnQuY3RybEtleSkpIHsKICAgICAgICBpZiAoYSA9PSAxMTIgJiYgdXNlclNldHRpbmcuc2hvcnRjdXQgPT0gMSkgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBzZXRDbGlwYm9hcmQoKTsKICAgICAgICAgICAgZXZlbnQua2V5Q29kZT0wOwogICAgICAgICAgICBldmVudC5yZXR1cm5WYWx1ZT1mYWxzZTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAKICAgICAgICB9IGVsc2UgaWYgKGEgPT0gMTEyICYmIChldmVudC5jdHJsS2V5KSAmJiB1c2VyU2V0dGluZy5zaG9ydGN1dCA9PSAyKXsKICAgICAgICAgICAgc2V0Q2xpcGJvYXJkKCk7CiAgICAgICAgfSBlbHNlIGlmKChhID09IDY3KSAmJiAoZXZlbnQuY3RybEtleSkgJiYgdXNlclNldHRpbmcuc2hvcnRjdXQgPT0gMyl7CiAgICAgICAgICAgIHNldENsaXBib2FyZCgpOwogICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIuWFs+mXreS6huW/q+aNt+mUriIpOwogICAgICAgIH0KICAgIH0gCiAgICBkb2N1bWVudC5vbmtleWRvd24gPSBob3RrZXk7IC8v5b2Tb25rZXlkb3duIOS6i+S7tuWPkeeUn+aXtuiwg+eUqGhvdGtleeWHveaVsCAgCiAKICAgIC8vIOmDqOWIhue9keermemHh+eUqOS6huWFtuS7lueahOmYsuWkjeWItuaJi+autQogICAgZnVuY3Rpb24gY2xlYXIoKXsKICAgICAgICAvLyBjb25zb2xlLmxvZygi6L+b5YWlY2xlYXIiLGhvc3RuYW1lLHJ3bF91c2VyRGF0YS5ydWxlcyk7CiAgICAgICAgc3dpdGNoIChob3N0bmFtZSl7CiAgICAgICAgICAgIGNhc2UgImNodWFuZ3NoaS5xcS5jb20iOiBjbGVhcl9jaHVhbmdzaGkoKTticmVhazsKICAgICAgICAgICAgY2FzZSAidm90ZXR3LmNvbSI6IGNsZWFyX3ZvdGV0dygpO2JyZWFrOwogICAgICAgICAgICBjYXNlICJ3d3cubXlodGVib29rcy5jb20iOiBjbGVhcl9jb3ZlcnMoIi5mdWxsaW1nIik7YnJlYWs7CiAgICAgICAgICAgIGNhc2UgInd3dy56M3o0LmNvbSI6IGNsZWFyX2NvdmVycygiLm1vdmllZG93bmFkZGl2Iik7IGJyZWFrOwogICAgICAgICAgICBjYXNlICJodWF5dS5iYWlkdS5jb20iOiBjbGVhcl9jb3ZlcnMoIiNqcUNvbnRleHRNZW51Iik7IGJyZWFrOwogICAgICAgICAgICBjYXNlICJ3d3cubXlodGxtZWJvb2suY29tIjogY2xlYXJfY292ZXJzKCJpbWcuZnVsbGltZyIpOyBicmVhazsKICAgICAgICAgICAgY2FzZSAiemhpaHUuY29tIjoKICAgICAgICAgICAgY2FzZSAid3d3LnpoaWh1LmNvbSI6IHJldHVybiByd2xfdXNlckRhdGEucnVsZXMucnVsZV96aGlodTsgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgInQuYmlsaWJpbGkuY29tIjogY2xlYXJfbGlua19iaWxpYmlsaSgpOyBicmVhazsKICAgICAgICAgICAgY2FzZSAid3d3LnVzbHNvZnR3YXJlLmNvbSI6IGNsZWFyX2NvdmVycygiLnByb3RlY3RfY29udGVudHMtb3ZlcmxheSIpO2NsZWFyX2NvdmVycygiLnByb3RlY3RfYWxlcnQiKTsgcmV0dXJuIHJ3bF91c2VyRGF0YS5ydWxlcy5ydWxlX3BsdXM7IGJyZWFrOwogICAgICAgICAgICBjYXNlICJ3d3cubG9uZ21hYm9va2NuLmNvbSI6IGNsZWFyX2NvdmVycygiLmZ1bGxpbWciKTsgcmV0dXJuIHJ3bF91c2VyRGF0YS5ydWxlcy5ydWxlX3BsdXM7IGJyZWFrOwogICAgICAgICAgICBjYXNlICJib2tlMTEyLmNvbSI6IHJldHVybiByd2xfdXNlckRhdGEucnVsZXMucnVsZV9wbHVzOyBicmVhazsKICAgICAgICAgICAgY2FzZSAid3d3LnNoYW5nYy5uZXQiOiByZXR1cm4gcndsX3VzZXJEYXRhLnJ1bGVzLnJ1bGVfcGx1czsgYnJlYWs7CiAgICAgICAgfQogICAgICAgIHJldHVybiByd2xfdXNlckRhdGEucnVsZXMucnVsZV9kZWY7CiAgICB9CiAgICAvLyDljrvpmaTopobnm5blsYIKICAgIGZ1bmN0aW9uIGNsZWFyX2NvdmVycyhlbGUpewogICAgICAgIHZhciBvZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGUpOwogICAgICAgIGlmKG9kaXYpewogICAgICAgICAgICBvZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2Rpdik7CiAgICAgICAgfQogICAgfQogICAgLy8gYuermeWwhuaWh+Wtl+W1jOWll+WcqOmTvuaOpeS4rQogICAgZnVuY3Rpb24gY2xlYXJfbGlua19iaWxpYmlsaSgpewogICAgICAgIHZhciBvZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmRlc2NyaXB0aW9uIik7CiAgICAgICAgaWYob2Rpdil7CiAgICAgICAgICAgIHZhciB0RGl2ID0gb2Rpdi5xdWVyeVNlbGVjdG9yKCIuY29udGVudC1lbGxpcHNpcyIpOwogICAgICAgICAgICB2YXIgYURpdiA9IG9kaXYucXVlcnlTZWxlY3RvcigiYSIpOwogICAgICAgICAgICAgb2Rpdi5hcHBlbmRDaGlsZCh0RGl2KTsKICAgICAgICB9CiAgICB9CiAgICAvLyBodHRwczovL3ZvdGV0dy5jb20vd2lraS8lRTYlOUUlOTclRTYlOTklQkElRTUlQTAlODUKICAgIC8vIOS8muWIm+W7uuWkmuS4quaXoGlkLOaXoGNsYXNz55qEZGl2LOimhuebluWcqOaWh+Wtl+S4iuWxggogICAgZnVuY3Rpb24gY2xlYXJfdm90ZXR3KCl7CiAgICAgICAgdmFyIG9kaXZzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLm13LXBhcnNlci1vdXRwdXQ+ZGl2IikKICAgICAgICBvZGl2cy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgdmFsdWUuc2V0QXR0cmlidXRlKCJzdHlsZSIsIiIpOwogICAgICAgIH0pCiAgICB9CiAKICAgIC8vIOWIm+S4luS4reaWh+e9kQogICAgZnVuY3Rpb24gY2xlYXJfY2h1YW5nc2hpKCl7CiAgICAgICAgY29uc29sZS5sb2coIuWIm+S4luS4reaWh+e9kSDlvIDlp4vmiafooYwiKTsKCiAgICAgICAgLy8gSlMg5rGJ5a2X5LiOVW5pY29kZeeggeeahOebuOS6kui9rOWMlgogICAgICAgICAgICAvLyBodHRwczovL3d3dy5jbmJsb2dzLmNvbS93d2xob21lL3AvNTY1MDc0NC5odG1sCiAgICAgICAgZnVuY3Rpb24gdG91bmljb2RlKGRhdGEpCiAgICAgICAgewogICAgICAgICAgICBpZihkYXRhID09ICcnKSByZXR1cm4gJ+ivt+i+k+WFpeaxieWtlyc7CiAgICAgICAgICAgIHZhciBzdHIgPScnOyAKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxkYXRhLmxlbmd0aDtpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0cis9IlxcdSIrcGFyc2VJbnQoZGF0YVtpXS5jaGFyQ29kZUF0KDApLDEwKS50b1N0cmluZygxNik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdG9oYW56aShkYXRhKQogICAgICAgIHsKICAgICAgICAgICAgaWYoZGF0YSA9PSAnJykgcmV0dXJuICfor7fovpPlhaXljYHlha3ov5vliLZ1bmljb2RlJzsKICAgICAgICAgICAgZGF0YSA9IGRhdGEuc3BsaXQoIlxcdSIpOwogICAgICAgICAgICB2YXIgc3RyID0nJzsKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxkYXRhLmxlbmd0aDtpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0cis9U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChkYXRhW2ldLDE2KS50b1N0cmluZygxMCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgfQogICAgICAgIC8vIGphdmFzY3JpcHTkuK3nmoRyZXBsYWNl5Ye95pWw5ZCM5pe25pu/5o2i5aSa5Liq5a2X56ym5LiyCiAgICAgICAgICAgIC8vIGh0dHBzOi8vYmJzLmNzZG4ubmV0L3RvcGljcy8zMjAwOTcyNDYKICAgICAgICBBcnJheS5wcm90b3R5cGUuZWFjaMKgPcKgZnVuY3Rpb24odHJhbnMpwqB7CiAgICAgICAgICAgIMKgwqDCoMKgZm9ywqAodmFywqBpPTA7wqBpPHRoaXMubGVuZ3RoO8KgaSsrKQogICAgICAgICAgICDCoMKgwqDCoMKgwqDCoMKgdGhpc1tpXcKgPcKgdHJhbnModGhpc1tpXSzCoGkswqB0aGlzKTsKICAgICAgICAgICAgwqDCoMKgwqByZXR1cm7CoHRoaXM7CiAgICAgICAgICAgIH07CiAgICAgICAgQXJyYXkucHJvdG90eXBlLm1hcMKgPcKgZnVuY3Rpb24odHJhbnMpwqB7CiAgICAgICAgwqDCoMKgwqByZXR1cm7CoFtdLmNvbmNhdCh0aGlzKS5lYWNoKHRyYW5zKTsKICAgICAgICB9OwogICAgICAgIFJlZ0V4cC5lc2NhcGXCoD3CoGZ1bmN0aW9uKHN0cinCoHsKICAgICAgICDCoMKgwqDCoHJldHVybsKgbmV3wqBTdHJpbmcoc3RyKS5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xdXC9cXF0pL2cswqAnXFwkMScpOwogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb27CoHByb3BlcnRpZXMob2JqKcKgewogICAgICAgIMKgwqDCoMKgdmFywqBwcm9wc8KgPcKgW107CiAgICAgICAgwqDCoMKgwqBmb3LCoCh2YXLCoHDCoGluwqBvYmopwqBwcm9wcy5wdXNoKHApOwogICAgICAgIMKgwqDCoMKgcmV0dXJuwqBwcm9wczsKICAgICAgICB9CiAgICAgICAgLy/CoC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIHZhciBib29rcmVhZGVyY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5ib29rcmVhZGVyY29udGVudCIpOwogICAgICAgIGlmKGJvb2tyZWFkZXJjb250ZW50KXsKICAgICAgICAgICAgdmFyIHN0ciA9IGJvb2tyZWFkZXJjb250ZW50LmlubmVyVGV4dDsKICAgICAgICAgICAgdmFyIHN0clVuaWNvZGUgPSB0b3VuaWNvZGUoc3RyKTsKICAgICAgICAgICAgdmFywqByZXBsYWNlbWVudHPCoD3CoHsiZTJhZiI6IjRlMDkiLCJlMmFmIjoiNGUwYiIsImUyYzkiOiI0ZTNiIiwiZTJkNiI6IjRlNDgiLCJlMmIyIjoiNGU0YiIsImUyYTYiOiI0ZTVmIiwiZTI5NCI6IjRlOGIiLCJlMmU5IjoiNGU4YyIsImUzMGEiOiI0ZThlIiwiZTI5MiI6IjRlOTQiLCJlMjk4IjoiNGU5YiIsImUyYTIiOiI0ZWUzIiwiZTJmMCI6IjRmNDYiLCJlMzBlIjoiNGY0ZCIsImUzMDUiOiI0ZjUzIiwiZTI5NiI6IjRmNWMiLCJlMmQzIjoiNGY2MCIsImUyZGIiOiI0ZjdmIiwiZTI5YiI6IjUxNmMiLCJlMmIwIjoiNTE3NiIsImUyZWQiOiI1MWZhIiwiZTJlYiI6IjUyMDYiLCJlMmYxIjoiNTIyOSIsImUzMDciOiI1MjMwIiwiZTJjZSI6IjUyMzYiLCJlMmU2IjoiNTI0ZCIsImUyZWEiOiI1MjliIiwiZTJhOCI6IjUyYTAiLCJlMmE1IjoiNTMxNiIsImUyYmQiOiI1MzQxIiwiZTMwMiI6IjUzOWYiLCJlMmRmIjoiNTNiYiIsImUyYzciOiI1M2M4IiwiZTMwMyI6IjUzY2QiLCJlMmFjIjoiNTNkMSIsImUyZjgiOiI1M2VhIiwiZTMwYiI6IjU0MDQiLCJlMjljIjoiNTQwOCIsImUyZDciOiI1NDBjIiwiZTJkOCI6IjU0MGUiLCJlMzA2IjoiNTQxMSIsImUyYzUiOiI1NDdkIiwiZTJiNCI6IjU2ZGIiLCJlMmY5IjoiNTZlMCIsImUyY2EiOiI1NzMwIiwiZTJlZiI6IjU5MTYiLCJlMmJjIjoiNTkxYSIsImUzMDEiOiI1OTI5IiwiZTI5YSI6IjU5N2QiLCJlMmI3IjoiNWI1MCIsImUyY2MiOiI1YjgzIiwiZTJlZSI6IjViOWEiLCJlMmZmIjoiNWJiNiIsImUyZTgiOiI1YzBmIiwiZTJkNCI6IjVjMzEiLCJlMmQ1IjoiNWM1NSIsImUyYTEiOiI1ZGU1IiwiZTJhMCI6IjVlNzMiLCJlMmZlIjoiNWU3NCIsImUyYzQiOiI1ZTc2IiwiZTJjOCI6IjVlYTYiLCJlMmFlIjoiNWVmYSIsImUzMDQiOiI1ZjYyIiwiZTI5MSI6IjVmODgiLCJlMmUyIjoiNWY5NyIsImUyZjIiOiI1ZmMzIiwiZTI5NSI6IjYwMjciLCJlMmQ5IjoiNjBjNSIsImUyYmUiOiI2MGYzIiwiZTJjMyI6IjYxMGYiLCJlMzBkIjoiNjIxMCIsImUyYmEiOiI2MjE2IiwiZTJmYSI6IjYyNDAiLCJlMjllIjoiNjI4YSIsImUyYTciOiI2M2QwIiwiZTJkMiI6IjY1M2YiLCJlMmFkIjoiNjU5OSIsImUyY2QiOiI2NWIwIiwiZTJmMyI6IjY1YjkifTsKICAgICAgICAgICAgdmFywqByZWdleMKgPcKgbmV3wqBSZWdFeHAocHJvcGVydGllcyhyZXBsYWNlbWVudHMpLm1hcChSZWdFeHAuZXNjYXBlKS5qb2luKCJ8IikswqAiZyIpOwogICAgICAgICAgICBzdHJVbmljb2RlID0gc3RyVW5pY29kZS5yZXBsYWNlKHJlZ2V4LMKgZnVuY3Rpb24oJDApwqB7wqByZXR1cm7CoHJlcGxhY2VtZW50c1skMF07wqB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0clVuaWNvZGUpCiAgICAgICAgICAgIHN0clVuaWNvZGUgPSBzdHJVbmljb2RlLnJlcGxhY2UoInUwIiwiIik7CiAgICAgICAgICAgIHN0ciA9IHRvaGFuemkoc3RyVW5pY29kZSk7CiAgICAKICAgICAgICAgICAgYm9va3JlYWRlcmNvbnRlbnQuaW5uZXJUZXh0ID0gc3RyOwogICAgICAgIH0KCgogICAgfQogCiAgICAvLyAzLngueCDov4fmuKEgNC54Lngg54mI5pysCiAgICBmdW5jdGlvbiB2ZXJzaW9uX3VwXzNfdG9fNCgpewogICAgICAgIHZhciBvbGRfdmVyc2lvbiA9IEdNX2dldFZhbHVlKCJibGFja19saXN0Iik7CiAgICAgICAgaWYoIW9sZF92ZXJzaW9uKXtyZXR1cm59OwogICAgICAgIHJ3bF91c2VyRGF0YS5kYXRhID0gdW5pcXVlKHJ3bF91c2VyRGF0YS5kYXRhLmNvbmNhdChvbGRfdmVyc2lvbi5kYXRhKSk7CiAgICAgICAgR01fc2V0VmFsdWUoInJ3bF91c2VyRGF0YSIscndsX3VzZXJEYXRhKTsKIAogICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJibGFja19saXN0Iik7CiAgICAgICAgR01fZGVsZXRlVmFsdWUoInJ3bF91c2VyZGF0YSIpOwogICAgfQp9KSgpOyA="},{"name":"Youtube Subtitle Downloader v32","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://*youtube.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["google.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1630066351439,"data":{}},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/5368-youtube-subtitle-downloader-v20/code/Youtube%20Subtitle%20Downloader%20v20.user.js","uuid":"82ccafb4-79ad-40e2-a9e0-d9749cad4db9","source":"","requires":[{"meta":{"name":"jquery-1.12.4.min.js","url":"https://code.jquery.com/jquery-1.12.4.min.js","ts":1641973545174,"mimetype":"text/javascript"},"source":""}]},{"name":"网盘助手","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/*","*://yun.baidu.com/*","*://*.weiyun.com/*","*://*.lanzous.com/*","*://*.lanzoux.com/*","*://cloud.189.cn/*","*://*.newday.me/*","*://*.likestyle.cn/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"$config":"o{\"uid\":\"0aactzr56y5fj6oztoa86yt04afap4dj\",\"share_log_list\":{\"lanzous#b0162itre\":{\"share_id\":\"b0162itre\",\"share_pwd\":\"bpco\",\"share_link\":\"https://wwa.lanzous.com/b0162itre\",\"share_source\":\"lanzous\",\"share_time\":1610721953903},\"baidu#h347t3R3kbXkfmADFIGOMg\":{\"share_id\":\"h347t3R3kbXkfmADFIGOMg\",\"share_pwd\":\"bcqc\",\"share_link\":\"https://pan.baidu.com/share/init?surl=h347t3R3kbXkfmADFIGOMg\",\"share_source\":\"baidu\",\"share_time\":1618025189903},\"lanzous#b01hweblc\":{\"share_id\":\"b01hweblc\",\"share_pwd\":\"0\",\"share_link\":\"https://sabrinathings.lanzous.com/b01hweblc\",\"share_source\":\"lanzous\",\"share_time\":1620400604834},\"baidu#7w54DzbugtGF_3m7Adz4Ag\":{\"share_id\":\"7w54DzbugtGF_3m7Adz4Ag\",\"share_pwd\":\"1234\",\"share_link\":\"https://pan.baidu.com/share/init?surl=7w54DzbugtGF_3m7Adz4Ag\",\"share_source\":\"baidu\",\"share_time\":1630076806412},\"baidu#qBPLZ8TdYuD3OYmTdIAjTQ\":{\"share_id\":\"qBPLZ8TdYuD3OYmTdIAjTQ\",\"share_pwd\":\"akuq\",\"share_link\":\"https://pan.baidu.com/share/init?surl=qBPLZ8TdYuD3OYmTdIAjTQ\",\"share_source\":\"baidu\",\"share_time\":1631957156681},\"baidu#PuJJPbtlcts0lwSKpeA1Pw\":{\"share_id\":\"PuJJPbtlcts0lwSKpeA1Pw\",\"share_pwd\":\"bmxv\",\"share_link\":\"https://pan.baidu.com/share/init?surl=PuJJPbtlcts0lwSKpeA1Pw\",\"share_source\":\"baidu\",\"share_time\":1631957408991},\"baidu#vA2uLMvAKmJQABLIO12SUA\":{\"share_id\":\"vA2uLMvAKmJQABLIO12SUA\",\"share_pwd\":\"kudm\",\"share_link\":\"https://pan.baidu.com/share/init?surl=vA2uLMvAKmJQABLIO12SUA\",\"share_source\":\"baidu\",\"share_time\":1633420146824},\"baidu#mZs5S9yX96IUS5yjewGV4w\":{\"share_id\":\"mZs5S9yX96IUS5yjewGV4w\",\"share_pwd\":\"m3dz\",\"share_link\":\"https://pan.baidu.com/share/init?surl=mZs5S9yX96IUS5yjewGV4w\",\"share_source\":\"baidu\",\"share_time\":1634896237841},\"baidu#iP8vAFo-DSiaGrjqSMDcrw\":{\"share_id\":\"iP8vAFo-DSiaGrjqSMDcrw\",\"share_pwd\":\"0s5b\",\"share_link\":\"https://pan.baidu.com/share/init?surl=iP8vAFo-DSiaGrjqSMDcrw\",\"share_source\":\"baidu\",\"share_time\":1640075809972},\"baidu#Cu4B5800eDV2slkh7dGrBw\":{\"share_id\":\"Cu4B5800eDV2slkh7dGrBw\",\"share_pwd\":\"t3t1\",\"share_link\":\"https://pan.baidu.com/share/init?surl=Cu4B5800eDV2slkh7dGrBw&pwd=t3t1\",\"share_source\":\"baidu\",\"share_time\":1641535193730}}}","$storage":"o{\"version_date\":\"20220107\",\"version_payload\":{\"version\":\"0.4.7\"},\"version_latest\":\"0.4.7\"}","config_json":"s{\"wpzs_version_date\":\"20200507\",\"wpzs_version_latest\":\"0.2.2\",\"wpzs_app_id\":\"778750\"}","uid":"schj8hjgqezi5h888ay84eym9ixyhes4l"},"ts":1641535193730},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/378301-%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B/code/%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B.user.js","uuid":"7b8b80c7-e653-435b-8d6f-583865cad3e1","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnvZHnm5jliqnmiYsKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vZ28ubmV3ZGF5Lm1lL3MvcGFuLWhvbWUKLy8gQHZlcnNpb24gICAgICAwLjQuOAovLyBAaWNvbiAgICAgICAgIGh0dHA6Ly9jZG4ubmV3ZGF5Lm1lL2FkZG9uL3Bhbi9mYXZpY29uLmljbwovLyBAYXV0aG9yICAgICAgIOWTqeWRtQovLyBAZGVzY3JpcHRpb24gIOS4gOS4quS8mOmbheWlveeUqOeahOe9keebmOWKqeaJi++8m+aPkuS7tuS4u+imgeWKn+iDveacie+8mlsxXeiusOS9j+WQhOWkp+e9keebmOWIhuS6q+eahOiuv+mXruWvhumSpSBbMl3nmb7luqbnvZHnm5jnlJ/miJDlubblsZXnpLrkuIvovb3pk77mjqUgWzNd55m+5bqm572R55uY5YiG5Lqr5pe26Ieq5a6a5LmJ5o+Q5Y+W56CBCi8vIEBtYXRjaCAgICAgICAgKjovL3Bhbi5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly95dW4uYmFpZHUuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi53ZWl5dW4uY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5sYW56b3VzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubGFuem91eC5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly9jbG91ZC4xODkuY24vKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLm5ld2RheS5tZS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubGlrZXN0eWxlLmNuLyoKLy8gQGNvbm5lY3QgICAgICBuZXdkYXkubWUKLy8gQGNvbm5lY3QgICAgICBsaWtlc3R5bGUuY24KLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5zdGF0aWNmaWxlLm9yZy9qcXVlcnkvMy41LjAvanF1ZXJ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2RvbXB1cmlmeS8yLjAuMTAvcHVyaWZ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3NuYXAuc3ZnLzAuNS4xL3NuYXAuc3ZnLW1pbi5qcwovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBncmFudCAgICAgICAgR01fZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX2RlbGV0ZVZhbHVlCi8vIEBncmFudCAgICAgICAgR01fbGlzdFZhbHVlcwovLyBAZ3JhbnQgICAgICAgIEdNX29wZW5JblRhYgovLyBAZ3JhbnQgICAgICAgIEdNX25vdGlmaWNhdGlvbgovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICB2YXIgbWFuaWZlc3QgPSB7CiAgICAgICAgIm5hbWUiOiAid3B6cyIsCiAgICAgICAgInRpdGxlIjogIue9keebmOWKqeaJiyIsCiAgICAgICAgInVybHMiOiB7fSwKICAgICAgICAiYXBpcyI6IHsKICAgICAgICAgICAgInZlcnNpb24iOiAiaHR0cHM6Ly9hcGkubmV3ZGF5Lm1lL3NoYXJlL2Rpc2svdmVyc2lvbiIsCiAgICAgICAgICAgICJvcmlnaW4iOiAiaHR0cHM6Ly9hcGkubmV3ZGF5Lm1lL3NoYXJlL2Rpc2svb3JpZ2luIgogICAgICAgIH0sCiAgICAgICAgImxvZ2dlcl9sZXZlbCI6IDMsCiAgICAgICAgIm9wdGlvbnNfcGFnZSI6ICJodHRwOi8vZ28ubmV3ZGF5Lm1lL3MvcGFuLW9wdGlvbiIKICAgIH07CgogICAgdmFyIGNvbnRhaW5lciA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgZGVmaW5lczoge30sCiAgICAgICAgICAgIG1vZHVsZXM6IHt9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmRlZmluZSA9IGZ1bmN0aW9uIChuYW1lLCByZXF1aXJlcywgY2FsbGJhY2spIHsKICAgICAgICAgICAgbmFtZSA9IG9iai5wcm9jZXNzTmFtZShuYW1lKTsKICAgICAgICAgICAgb2JqLmRlZmluZXNbbmFtZV0gPSB7CiAgICAgICAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsCiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2sKICAgICAgICAgICAgfTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVxdWlyZSA9IGZ1bmN0aW9uIChuYW1lLCBjYWNoZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNhY2hlID09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICBjYWNoZSA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5hbWUgPSBvYmoucHJvY2Vzc05hbWUobmFtZSk7CiAgICAgICAgICAgIGlmIChjYWNoZSAmJiBvYmoubW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5tb2R1bGVzW25hbWVdOwogICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5kZWZpbmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZXMgPSBvYmouZGVmaW5lc1tuYW1lXS5yZXF1aXJlczsKICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IG9iai5kZWZpbmVzW25hbWVdLmNhbGxiYWNrOwoKICAgICAgICAgICAgICAgIHZhciBtb2R1bGUgPSBvYmoudXNlKHJlcXVpcmVzLCBjYWxsYmFjayk7CiAgICAgICAgICAgICAgICBjYWNoZSAmJiBvYmoucmVnaXN0ZXIobmFtZSwgbW9kdWxlKTsKICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoudXNlID0gZnVuY3Rpb24gKHJlcXVpcmVzLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgbW9kdWxlID0gewogICAgICAgICAgICAgICAgZXhwb3J0czogdW5kZWZpbmVkCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBvYmouYnVpbGRQYXJhbXMocmVxdWlyZXMsIG1vZHVsZSk7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjay5hcHBseSh0aGlzLCBwYXJhbXMpOwogICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0czsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlciA9IGZ1bmN0aW9uIChuYW1lLCBtb2R1bGUpIHsKICAgICAgICAgICAgbmFtZSA9IG9iai5wcm9jZXNzTmFtZShuYW1lKTsKICAgICAgICAgICAgb2JqLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmJ1aWxkUGFyYW1zID0gZnVuY3Rpb24gKHJlcXVpcmVzLCBtb2R1bGUpIHsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdOwogICAgICAgICAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChvYmoucmVxdWlyZShuYW1lKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwYXJhbXMucHVzaChvYmoucmVxdWlyZSk7CiAgICAgICAgICAgIHBhcmFtcy5wdXNoKG1vZHVsZS5leHBvcnRzKTsKICAgICAgICAgICAgcGFyYW1zLnB1c2gobW9kdWxlKTsKICAgICAgICAgICAgcmV0dXJuIHBhcmFtczsKICAgICAgICB9OwoKICAgICAgICBvYmoucHJvY2Vzc05hbWUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGRlZmluZTogb2JqLmRlZmluZSwKICAgICAgICAgICAgdXNlOiBvYmoudXNlLAogICAgICAgICAgICByZWdpc3Rlcjogb2JqLnJlZ2lzdGVyLAogICAgICAgICAgICBtb2R1bGVzOiBvYmoubW9kdWxlcwogICAgICAgIH07CiAgICB9KSgpOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImdtIiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5yZWFkeSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICAgICAgICBpZiAodHlwZW9mIEdNX2dldFZhbHVlICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnJlYWR5KGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgLyoqIGNvbW1vbiAqKi8KICAgIGNvbnRhaW5lci5kZWZpbmUoImdtRGFvIiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICBpdGVtczoge30KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIEdNX2dldFZhbHVlKG5hbWUpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRCYXRjaCA9IGZ1bmN0aW9uIChuYW1lcykgewogICAgICAgICAgICB2YXIgaXRlbXMgPSB7fTsKICAgICAgICAgICAgbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgaXRlbXNbbmFtZV0gPSBvYmouZ2V0KG5hbWUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmouZ2V0QmF0Y2goR01fbGlzdFZhbHVlcygpKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2V0ID0gZnVuY3Rpb24gKG5hbWUsIGl0ZW0pIHsKICAgICAgICAgICAgR01fc2V0VmFsdWUobmFtZSwgaXRlbSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldEJhdGNoID0gZnVuY3Rpb24gKGl0ZW1zKSB7CiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gaXRlbXMpIHsKICAgICAgICAgICAgICAgIG9iai5zZXQobmFtZSwgaXRlbXNbbmFtZV0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldEFsbCA9IGZ1bmN0aW9uIChpdGVtcykgewogICAgICAgICAgICB2YXIgbmFtZXMgPSBHTV9saXN0VmFsdWVzKCk7CiAgICAgICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmICghaXRlbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBvYmoucmVtb3ZlKG5hbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgb2JqLnNldEJhdGNoKGl0ZW1zKTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVtb3ZlID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUobmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlbW92ZUJhdGNoID0gZnVuY3Rpb24gKG5hbWVzKSB7CiAgICAgICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIG9iai5yZW1vdmUobmFtZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5yZW1vdmVCYXRjaChHTV9saXN0VmFsdWVzKCkpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJTY29wZURhbyIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYW8sIHNjb3BlKSB7CiAgICAgICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgICAgICBpdGVtczoge30KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5nZXQgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5pdGVtc1tuYW1lXTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5nZXRCYXRjaCA9IGZ1bmN0aW9uIChuYW1lcykgewogICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0ge307CiAgICAgICAgICAgICAgICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5pdGVtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tuYW1lXSA9IG9iai5pdGVtc1tuYW1lXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBpdGVtczsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLml0ZW1zOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLnNldCA9IGZ1bmN0aW9uIChuYW1lLCBpdGVtKSB7CiAgICAgICAgICAgICAgICBvYmouaXRlbXNbbmFtZV0gPSBpdGVtOwoKICAgICAgICAgICAgICAgIG9iai5zeW5jKCk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBvYmouc2V0QmF0Y2ggPSBmdW5jdGlvbiAoaXRlbXMpIHsKICAgICAgICAgICAgICAgIG9iai5pdGVtcyA9IE9iamVjdC5hc3NpZ24ob2JqLml0ZW1zLCBpdGVtcyk7CgogICAgICAgICAgICAgICAgb2JqLnN5bmMoKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5zZXRBbGwgPSBmdW5jdGlvbiAoaXRlbXMpIHsKICAgICAgICAgICAgICAgIG9iai5pdGVtcyA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW1zKTsKCiAgICAgICAgICAgICAgICBvYmouc3luYygpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLnJlbW92ZSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgb2JqLml0ZW1zW25hbWVdOwoKICAgICAgICAgICAgICAgIG9iai5zeW5jKCk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBvYmoucmVtb3ZlQmF0Y2ggPSBmdW5jdGlvbiAobmFtZXMpIHsKICAgICAgICAgICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqLml0ZW1zW25hbWVdOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgb2JqLnN5bmMoKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBvYmouaXRlbXMgPSB7fTsKCiAgICAgICAgICAgICAgICBvYmouZ2V0RGFvKCkucmVtb3ZlKG9iai5nZXRTY29wZSgpKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gb2JqLmdldERhbygpLmdldChvYmouZ2V0U2NvcGUoKSk7CiAgICAgICAgICAgICAgICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBPYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXMgPSBpdGVtczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5zeW5jID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgb2JqLmdldERhbygpLnNldChvYmouZ2V0U2NvcGUoKSwgb2JqLml0ZW1zKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5nZXREYW8gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZGFvOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLmdldFNjb3BlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgcmV0dXJuIG9iai5pbml0KCksIG9iajsKICAgICAgICB9OwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiY29uZmlnIiwgWyJmYWN0b3J5Il0sIGZ1bmN0aW9uIChmYWN0b3J5KSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouZ2V0Q29uZmlnID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5nZXREYW8oKS5nZXQobmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldENvbmZpZyA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICBvYmouZ2V0RGFvKCkuc2V0KG5hbWUsIHZhbHVlKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZGVsQ29uZmlnID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgb2JqLmdldERhbygpLnJlbW92ZShuYW1lKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QWxsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldERhbygpLmdldEFsbCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXREYW8gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5LmdldENvbmZpZ0RhbygpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJzdG9yYWdlIiwgWyJmYWN0b3J5Il0sIGZ1bmN0aW9uIChmYWN0b3J5KSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouZ2V0VmFsdWUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldERhbygpLmdldChuYW1lKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2V0VmFsdWUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHsKICAgICAgICAgICAgb2JqLmdldERhbygpLnNldChuYW1lLCB2YWx1ZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5nZXREYW8oKS5nZXRBbGwoKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RGFvID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZmFjdG9yeS5nZXRTdG9yYWdlRGFvKCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoIm9wdGlvbiIsIFsiY29uZmlnIiwgImNvbnN0YW50Il0sIGZ1bmN0aW9uIChjb25maWcsIGNvbnN0YW50KSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgbmFtZTogIm9wdGlvbiIsCiAgICAgICAgICAgIGNvbnN0YW50OiBjb25zdGFudC5vcHRpb24KICAgICAgICB9OwoKICAgICAgICBvYmouaXNPcHRpb25BY3RpdmUgPSBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICB2YXIgbmFtZSA9IGl0ZW0ubmFtZTsKICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG9iai5nZXRPcHRpb24oKTsKICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5pbmRleE9mKG5hbWUpID49IDAgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldE9wdGlvbkFjdGl2ZSA9IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5uYW1lOwogICAgICAgICAgICB2YXIgb3B0aW9uID0gb2JqLmdldE9wdGlvbigpOwogICAgICAgICAgICBpZiAob3B0aW9uLmluZGV4T2YobmFtZSkgPCAwKSB7CiAgICAgICAgICAgICAgICBvcHRpb24ucHVzaChuYW1lKTsKICAgICAgICAgICAgICAgIG9iai5zZXRPcHRpb24ob3B0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zZXRPcHRpb25VbkFjdGl2ZSA9IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5uYW1lOwogICAgICAgICAgICB2YXIgb3B0aW9uID0gb2JqLmdldE9wdGlvbigpOwogICAgICAgICAgICB2YXIgaW5kZXggPSBvcHRpb24uaW5kZXhPZihuYW1lKTsKICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25baW5kZXhdOwogICAgICAgICAgICAgICAgb2JqLnNldE9wdGlvbihvcHRpb24pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE9wdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG9wdGlvbiA9IFtdOwogICAgICAgICAgICB2YXIgb3B0aW9uTGlzdCA9IG9iai5nZXRPcHRpb25MaXN0KCk7CiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMob2JqLmNvbnN0YW50KS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGl0ZW0ubmFtZTsKICAgICAgICAgICAgICAgIGlmIChvcHRpb25MaXN0Lmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbkxpc3RbbmFtZV0gIT0gIm5vIikgewogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24ucHVzaChuYW1lKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLnZhbHVlICE9ICJubyIpIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb24ucHVzaChuYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBvcHRpb247CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb24pIHsKICAgICAgICAgICAgdmFyIG9wdGlvbkxpc3QgPSB7fTsKICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhvYmouY29uc3RhbnQpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5uYW1lOwogICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pbmRleE9mKG5hbWUpID49IDApIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25MaXN0W25hbWVdID0gInllcyI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbkxpc3RbbmFtZV0gPSAibm8iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgb2JqLnNldE9wdGlvbkxpc3Qob3B0aW9uTGlzdCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE9wdGlvbkxpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25MaXN0ID0gY29uZmlnLmdldENvbmZpZyhvYmoubmFtZSk7CiAgICAgICAgICAgIHJldHVybiBvcHRpb25MaXN0ID8gb3B0aW9uTGlzdCA6IHt9OwogICAgICAgIH07CgogICAgICAgIG9iai5zZXRPcHRpb25MaXN0ID0gZnVuY3Rpb24gKG9wdGlvbkxpc3QpIHsKICAgICAgICAgICAgY29uZmlnLnNldENvbmZpZyhvYmoubmFtZSwgb3B0aW9uTGlzdCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoIm1hbmlmZXN0IiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICBtYW5pZmVzdDogbWFuaWZlc3QKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0SXRlbSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoubWFuaWZlc3RbbmFtZV07CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE1hbmlmZXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hbmlmZXN0OwogICAgICAgIH07CgogICAgICAgIG9iai5nZXROYW1lID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldEl0ZW0oIm5hbWUiKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0VGl0bGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmouZ2V0SXRlbSgidGl0bGUiKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0VXJsID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgdmFyIHVybHMgPSBvYmouZ2V0SXRlbSgidXJscyIpOwogICAgICAgICAgICAodXJscyBpbnN0YW5jZW9mIE9iamVjdCkgfHwgKHVybHMgPSB7fSk7CiAgICAgICAgICAgIHJldHVybiB1cmxzW25hbWVdOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRBcGkgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICB2YXIgYXBpcyA9IG9iai5nZXRJdGVtKCJhcGlzIik7CiAgICAgICAgICAgIChhcGlzIGluc3RhbmNlb2YgT2JqZWN0KSB8fCAoYXBpcyA9IHt9KTsKICAgICAgICAgICAgcmV0dXJuIGFwaXNbbmFtZV07CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE9wdGlvbnNQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoR01faW5mby5zY3JpcHQub3B0aW9uVXJsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gR01faW5mby5zY3JpcHQub3B0aW9uVXJsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5nZXRJdGVtKCJvcHRpb25zX3BhZ2UiKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJlbnYiLCBbImNvbmZpZyIsICJtYW5pZmVzdCJdLCBmdW5jdGlvbiAoY29uZmlnLCBtYW5pZmVzdCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIG1vZGVzOiB7CiAgICAgICAgICAgICAgICBBRERPTjogImFkZG9uIiwKICAgICAgICAgICAgICAgIFNDUklQVDogInNjcmlwdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYnJvd3NlcnM6IHsKICAgICAgICAgICAgICAgIEZJUkVGT1g6ICJmaXJlZm94IiwKICAgICAgICAgICAgICAgIEVERzogImVkZyIsCiAgICAgICAgICAgICAgICBFREdFOiAiZWRnZSIsCiAgICAgICAgICAgICAgICBCQUlEVTogImJhaWR1IiwKICAgICAgICAgICAgICAgIExJRUJBTzogImxpZWJhbyIsCiAgICAgICAgICAgICAgICBVQzogInVjIiwKICAgICAgICAgICAgICAgIFFROiAicXEiLAogICAgICAgICAgICAgICAgU09HT1U6ICJzb2dvdSIsCiAgICAgICAgICAgICAgICBPUEVSQTogIm9wZXJhIiwKICAgICAgICAgICAgICAgIE1BWFRIT046ICJtYXh0aG9uIiwKICAgICAgICAgICAgICAgIElFMjM0NTogIjIzNDUiLAogICAgICAgICAgICAgICAgU0UzNjA6ICIzNjAiLAogICAgICAgICAgICAgICAgQ0hST01FOiAiY2hyb21lIiwKICAgICAgICAgICAgICAgIFNBRklSSTogInNhZmFyaSIsCiAgICAgICAgICAgICAgICBPVEhFUjogIm90aGVyIgogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBtYW5pZmVzdC5nZXROYW1lKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE1vZGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChHTV9pbmZvLm1vZGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBHTV9pbmZvLm1vZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLm1vZGVzLlNDUklQVDsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXRBaWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChHTV9pbmZvLnNjcmlwdEhhbmRsZXIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBHTV9pbmZvLnNjcmlwdEhhbmRsZXIudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAidW5rbm93biI7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0VWlkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdWlkID0gY29uZmlnLmdldENvbmZpZygidWlkIik7CiAgICAgICAgICAgIGlmICghdWlkKSB7CiAgICAgICAgICAgICAgICB1aWQgPSBvYmoucmFuZFN0cmluZygzMik7CiAgICAgICAgICAgICAgICBjb25maWcuc2V0Q29uZmlnKCJ1aWQiLCB1aWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB1aWQ7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICghb2JqLl9icm93c2VyKSB7CiAgICAgICAgICAgICAgICBvYmouX2Jyb3dzZXIgPSBvYmoubWF0Y2hCcm93c2VyVHlwZShuYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gb2JqLl9icm93c2VyOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRWZXJzaW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gR01faW5mby5zY3JpcHQudmVyc2lvbjsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RWRpdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIEdNX2luZm8udmVyc2lvbjsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0SW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIG1vZGU6IG9iai5nZXRNb2RlKCksCiAgICAgICAgICAgICAgICBhaWQ6IG9iai5nZXRBaWQoKSwKICAgICAgICAgICAgICAgIHVpZDogb2JqLmdldFVpZCgpLAogICAgICAgICAgICAgICAgYnJvd3Nlcjogb2JqLmdldEJyb3dzZXIoKSwKICAgICAgICAgICAgICAgIHZlcnNpb246IG9iai5nZXRWZXJzaW9uKCksCiAgICAgICAgICAgICAgICBlZGl0aW9uOiBvYmouZ2V0RWRpdGlvbigpCiAgICAgICAgICAgIH07CiAgICAgICAgfTsKCiAgICAgICAgb2JqLm1hdGNoQnJvd3NlclR5cGUgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7CiAgICAgICAgICAgIHZhciBicm93c2VyID0gb2JqLmJyb3dzZXJzLk9USEVSOwogICAgICAgICAgICB1c2VyQWdlbnQgPSB1c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgaWYgKHVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveC8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuRklSRUZPWDsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL2VkZ2UvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLkVER0U7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9lZGcvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLkVERzsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL2JpZHVicm93c2VyLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5CQUlEVTsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL2xiYnJvd3Nlci8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuTElFQkFPOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvdWJyb3dzZXIvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLlVDOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvcXFicm93c2UvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLlFROwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvbWV0YXNyLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5TT0dPVTsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL29wci8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuT1BFUkE7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9tYXh0aG9uLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5NQVhUSE9OOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvMjM0NWV4cGxvcmVyLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5JRTIzNDU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9jaHJvbWUvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAobmF2aWdhdG9yLm1pbWVUeXBlcy5sZW5ndGggPiAxMCkgewogICAgICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuU0UzNjA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuQ0hST01FOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvc2FmYXJpLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5TQUZJUkk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXI7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJhbmRTdHJpbmcgPSBmdW5jdGlvbiAobGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBwb3NzaWJsZSA9ICJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkiOwogICAgICAgICAgICB2YXIgdGV4dCA9ICIiOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGV4dDsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiaHR0cCIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouYWpheCA9IGZ1bmN0aW9uIChvcHRpb24pIHsKICAgICAgICAgICAgdmFyIGRldGFpbHMgPSB7CiAgICAgICAgICAgICAgICBtZXRob2Q6IG9wdGlvbi50eXBlLAogICAgICAgICAgICAgICAgdXJsOiBvcHRpb24udXJsLAogICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb24uZGF0YVR5cGUsCiAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5zdGF0dXMgfHwgcGFyc2VJbnQocmVzdWx0LnN0YXR1cyAvIDEwMCkgPT0gMikgewogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uc3VjY2VzcyAmJiBvcHRpb24uc3VjY2VzcyhyZXN1bHQucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLmVycm9yICYmIG9wdGlvbi5lcnJvcigiIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG9uZXJyb3I6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb24uZXJyb3IgJiYgb3B0aW9uLmVycm9yKHJlc3VsdC5lcnJvcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyDmj5DkuqTmlbDmja4KICAgICAgICAgICAgaWYgKG9wdGlvbi5kYXRhIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmRhdGEgaW5zdGFuY2VvZiBGb3JtRGF0YSkgewogICAgICAgICAgICAgICAgICAgIGRldGFpbHMuZGF0YSA9IG9wdGlvbi5kYXRhOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBvcHRpb24uZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoaSwgb3B0aW9uLmRhdGFbaV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmRhdGEgPSBmb3JtRGF0YTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8g6Ieq5a6a5LmJ5aS0CiAgICAgICAgICAgIGlmIChvcHRpb24uaGVhZGVycykgewogICAgICAgICAgICAgICAgZGV0YWlscy5oZWFkZXJzID0gb3B0aW9uLmhlYWRlcnM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIOi2heaXtgogICAgICAgICAgICBpZiAob3B0aW9uLnRpbWVvdXQpIHsKICAgICAgICAgICAgICAgIGRldGFpbHMudGltZW91dCA9IG9wdGlvbi50aW1lb3V0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdChkZXRhaWxzKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgicm91dGVyIiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5nZXRVcmwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5ocmVmOwogICAgICAgIH07CgogICAgICAgIG9iai5nb1VybCA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDsKICAgICAgICB9OwoKICAgICAgICBvYmoub3BlblVybCA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTsKICAgICAgICB9OwoKICAgICAgICBvYmoub3BlblRhYiA9IGZ1bmN0aW9uICh1cmwsIGFjdGl2ZSkgewogICAgICAgICAgICBHTV9vcGVuSW5UYWIodXJsLCAhYWN0aXZlKTsKICAgICAgICB9OwoKICAgICAgICBvYmouanVtcExpbmsgPSBmdW5jdGlvbiAoanVtcFVybCwganVtcE1vZGUpIHsKICAgICAgICAgICAgc3dpdGNoIChqdW1wTW9kZSkgewogICAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgICAgIC8vIHNlbGYKICAgICAgICAgICAgICAgICAgICBvYmouZ29VcmwoanVtcFVybCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgICAgLy8gbmV3CiAgICAgICAgICAgICAgICAgICAgb2JqLm9wZW5VcmwoanVtcFVybCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgLy8gbmV3ICYgbm90IGFjdGl2ZQogICAgICAgICAgICAgICAgICAgIG9iai5vcGVuVGFiKGp1bXBVcmwsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAvLyBuZXcgJiBhY3RpdmUKICAgICAgICAgICAgICAgICAgICBvYmoub3BlblRhYihqdW1wVXJsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXRVcmxQYXJhbSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHZhciBwYXJhbSA9IG9iai5wYXJzZVVybFBhcmFtKG9iai5nZXRVcmwoKSk7CiAgICAgICAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0uaGFzT3duUHJvcGVydHkobmFtZSkgPyBwYXJhbVtuYW1lXSA6IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW07CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoucGFyc2VVcmxQYXJhbSA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCI/IikpIHsKICAgICAgICAgICAgICAgIHVybCA9IHVybC5zcGxpdCgiPyIpWzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZWcgPSAvKFtePSZcc10rKVs9XHNdKihbXj0mXHNdKikvZzsKICAgICAgICAgICAgdmFyIG9iaiA9IHt9OwogICAgICAgICAgICB3aGlsZSAocmVnLmV4ZWModXJsKSkgewogICAgICAgICAgICAgICAgb2JqW1JlZ0V4cC4kMV0gPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgibG9nZ2VyIiwgWyJlbnYiLCAibWFuaWZlc3QiXSwgZnVuY3Rpb24gKGVudiwgbWFuaWZlc3QpIHsKICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICBjb25zdGFudDogewogICAgICAgICAgICAgICAgREVCVUc6IDAsCiAgICAgICAgICAgICAgICBJTkZPOiAxLAogICAgICAgICAgICAgICAgV0FSTjogMiwKICAgICAgICAgICAgICAgIEVSUk9SOiAzLAogICAgICAgICAgICAgICAgTk9ORTogNAogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmRlYnVnID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgb2JqLmxvZyhtZXNzYWdlLCBvYmouY29uc3RhbnQuREVCVUcpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbmZvID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgb2JqLmxvZyhtZXNzYWdlLCBvYmouY29uc3RhbnQuSU5GTyk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLndhcm4gPSBmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICBvYmoubG9nKG1lc3NhZ2UsIG9iai5jb25zdGFudC5XQVJOKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICBvYmoubG9nKG1lc3NhZ2UsIG9iai5jb25zdGFudC5FUlJPUik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmxvZyA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCkgewogICAgICAgICAgICBpZiAobGV2ZWwgPCBtYW5pZmVzdC5nZXRJdGVtKCJsb2dnZXJfbGV2ZWwiKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zb2xlLmdyb3VwKCJbIiArIGVudi5nZXROYW1lKCkgKyAiXSIgKyBlbnYuZ2V0TW9kZSgpKTsKICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7CiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgibWV0YSIsIFsiZW52IiwgIiQiXSwgZnVuY3Rpb24gKGVudiwgJCkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLmV4aXN0TWV0YSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIG5hbWUgPSBvYmoucHJvY2Vzc05hbWUobmFtZSk7CiAgICAgICAgICAgIGlmICgkKCJtZXRhW25hbWU9JyIgKyBuYW1lICsgIiddIikubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5hcHBlbmRNZXRhID0gZnVuY3Rpb24gKG5hbWUsIGNvbnRlbnQpIHsKICAgICAgICAgICAgbmFtZSA9IG9iai5wcm9jZXNzTmFtZShuYW1lKTsKICAgICAgICAgICAgY29udGVudCB8fCAoY29udGVudCA9ICJvbiIpOwogICAgICAgICAgICAkKCc8bWV0YSBuYW1lPSInICsgbmFtZSArICciIGNvbnRlbnQ9Im9uIj4nKS5hcHBlbmRUbygkKCJoZWFkIikpOwogICAgICAgIH07CgogICAgICAgIG9iai5wcm9jZXNzTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBlbnYuZ2V0TmFtZSgpICsgIjo6IiArIG5hbWU7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoInVuc2FmZVdpbmRvdyIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHR5cGVvZiB1bnNhZmVXaW5kb3cgPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdzsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB1bnNhZmVXaW5kb3c7CiAgICAgICAgfQogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgic3ZnQ3J5cHQiLCBbIlNuYXAiXSwgZnVuY3Rpb24gKFNuYXApIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5nZXRSZXFEYXRhID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcmVxVGltZSA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTsKICAgICAgICAgICAgdmFyIHJlcVBvaW50ID0gb2JqLmdldFN0clBvaW50KCJ0aW1lc3RhbXA6IiArIHJlcVRpbWUpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcmVxX3RpbWU6IHJlcVRpbWUsCiAgICAgICAgICAgICAgICByZXFfcG9pbnQ6IHJlcVBvaW50CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFN0clBvaW50ID0gZnVuY3Rpb24gKHN0cikgewogICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiMDowIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHBhdGggPSAiIjsKICAgICAgICAgICAgdmFyIGN1cnJlbnQsIGxhc3QgPSBzdHJbMF0uY2hhckNvZGVBdCgpOwogICAgICAgICAgICB2YXIgc3VtID0gbGFzdDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzdHJbaV0uY2hhckNvZGVBdCgpOwogICAgICAgICAgICAgICAgaWYgKGkgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoICsgIk0iOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aCArICIgTCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXRoID0gcGF0aCArIGN1cnJlbnQgKyAiICIgKyBsYXN0OwogICAgICAgICAgICAgICAgbGFzdCA9IGN1cnJlbnQ7CiAgICAgICAgICAgICAgICBzdW0gPSBzdW0gKyBjdXJyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhdGggPSBwYXRoICsgIiBaIjsKICAgICAgICAgICAgdmFyIGluZGV4ID0gc3VtICUgc3RyLmxlbmd0aDsKICAgICAgICAgICAgdmFyIGRhdGEgPSBTbmFwLnBhdGguZ2V0UG9pbnRBdExlbmd0aChwYXRoLCBzdHJbaW5kZXhdLmNoYXJDb2RlQXQoKSk7CiAgICAgICAgICAgIHJldHVybiBkYXRhLm0ueCArICI6IiArIGRhdGEubi55OwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJjYWxlbmRhciIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouZ2V0VGltZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmZvcm1hdFRpbWUgPSBmdW5jdGlvbiAoZm9ybWF0LCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgZm9ybWF0IHx8IChmb3JtYXQgPSAiWS1tLWQgSDppOnMiKTsKICAgICAgICAgICAgdGltZXN0YW1wIHx8ICh0aW1lc3RhbXAgPSBvYmouZ2V0VGltZSgpKTsKICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApOwogICAgICAgICAgICB2YXIgeWVhciA9IDE5MDAgKyBkYXRlLmdldFllYXIoKTsKICAgICAgICAgICAgdmFyIG1vbnRoID0gIjAiICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpOwogICAgICAgICAgICB2YXIgZGF5ID0gIjAiICsgZGF0ZS5nZXREYXRlKCk7CiAgICAgICAgICAgIHZhciBob3VyID0gIjAiICsgZGF0ZS5nZXRIb3VycygpOwogICAgICAgICAgICB2YXIgbWludXRlID0gIjAiICsgZGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgICAgICAgIHZhciBzZWNvbmQgPSAiMCIgKyBkYXRlLmdldFNlY29uZHMoKTsKICAgICAgICAgICAgdmFyIHZhcnMgPSB7CiAgICAgICAgICAgICAgICAiWSI6IHllYXIsCiAgICAgICAgICAgICAgICAibSI6IG1vbnRoLnN1YnN0cmluZyhtb250aC5sZW5ndGggLSAyLCBtb250aC5sZW5ndGgpLAogICAgICAgICAgICAgICAgImQiOiBkYXkuc3Vic3RyaW5nKGRheS5sZW5ndGggLSAyLCBkYXkubGVuZ3RoKSwKICAgICAgICAgICAgICAgICJIIjogaG91ci5zdWJzdHJpbmcoaG91ci5sZW5ndGggLSAyLCBob3VyLmxlbmd0aCksCiAgICAgICAgICAgICAgICAiaSI6IG1pbnV0ZS5zdWJzdHJpbmcobWludXRlLmxlbmd0aCAtIDIsIG1pbnV0ZS5sZW5ndGgpLAogICAgICAgICAgICAgICAgInMiOiBzZWNvbmQuc3Vic3RyaW5nKHNlY29uZC5sZW5ndGggLSAyLCBzZWNvbmQubGVuZ3RoKQogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gb2JqLnJlcGxhY2VWYXJzKHZhcnMsIGZvcm1hdCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlcGxhY2VWYXJzID0gZnVuY3Rpb24gKHZhcnMsIHZhbHVlKSB7CiAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKGtleSwgdmFyc1trZXldKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgib25lRGF0YSIsIFsiZW52IiwgImh0dHAiLCAic2V0dGluZyJdLCBmdW5jdGlvbiAoZW52LCBodHRwLCBzZXR0aW5nKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmoucmVxdWVzdE9uZUFwaSA9IGZ1bmN0aW9uICh1cmwsIGRhdGEsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGh0dHAuYWpheCh7CiAgICAgICAgICAgICAgICB0eXBlOiAicG9zdCIsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICBkYXRhOiBPYmplY3QuYXNzaWduKGVudi5nZXRJbmZvKCksIGRhdGEsIHsgYWNjZXNzX3Rva2VuOiBzZXR0aW5nLmdldEFjY2Vzc1Rva2VuKCkgfSksCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCIkZXh0ZW5kIiwgWyIkIiwgIkRPTVB1cmlmeSIsICJsb2dnZXIiXSwgZnVuY3Rpb24gKCQsIERPTVB1cmlmeSwgbG9nZ2VyKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKERPTVB1cmlmeSAmJiBET01QdXJpZnkgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgICAgICAgdmFyIGRvbVB1cmlmeSA9IERPTVB1cmlmeSh3aW5kb3cpOwogICAgICAgICAgICAgICAgJC5mbi5zYWZlSHRtbCA9IGZ1bmN0aW9uIChodG1sKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5odG1sKGRvbVB1cmlmeS5zYW5pdGl6ZShodG1sKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICQuZm4uc2FmZUh0bWwgPSBmdW5jdGlvbiAoaHRtbCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaHRtbChodG1sKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqLmluaXQoKSwgb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwUnVubmVyIiwgWyJyb3V0ZXIiLCAibG9nZ2VyIiwgIm1ldGEiLCAiJCJdLCBmdW5jdGlvbiAocm91dGVyLCBsb2dnZXIsIG1ldGEsICQsIHJlcXVpcmUpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoYXBwTGlzdCkgewogICAgICAgICAgICB2YXIgbWV0YU5hbWUgPSAic3RhdHVzIjsKICAgICAgICAgICAgaWYgKG1ldGEuZXhpc3RNZXRhKG1ldGFOYW1lKSkgewogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oInNldHVwIGFscmVhZHkiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIOa3u+WKoG1ldGEKICAgICAgICAgICAgICAgIG1ldGEuYXBwZW5kTWV0YShtZXRhTmFtZSk7CgogICAgICAgICAgICAgICAgLy8g6L+Q6KGM5bqU55SoCiAgICAgICAgICAgICAgICAkKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvYmoucnVuQXBwTGlzdChhcHBMaXN0KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJ1bkFwcExpc3QgPSBmdW5jdGlvbiAoYXBwTGlzdCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICBmb3IgKHZhciBpIGluIGFwcExpc3QpIHsKICAgICAgICAgICAgICAgIHZhciBhcHAgPSBhcHBMaXN0W2ldOwoKICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG9iai5tYXRjaEFwcCh1cmwsIGFwcCk7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZShhcHAubmFtZSkucnVuKCkgPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLm1hdGNoQXBwID0gZnVuY3Rpb24gKHVybCwgYXBwKSB7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IGZhbHNlOwogICAgICAgICAgICBhcHAubWF0Y2hzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihpdGVtKSA+IDAgfHwgaXRlbSA9PSAiKiIpIHsKICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIC8qKiBjdXN0b20gKiovCiAgICBjb250YWluZXIuZGVmaW5lKCJmYWN0b3J5IiwgWyJnbURhbyIsICJTY29wZURhbyJdLCBmdW5jdGlvbiAoZ21EYW8sIFNjb3BlRGFvKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgZGFvczoge30KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0Q29uZmlnRGFvID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldERhbygiY29uZmlnIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFNjb3BlRGFvKGdtRGFvLCAiJGNvbmZpZyIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U3RvcmFnZURhbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5nZXREYW8oInN0b3JhZ2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gU2NvcGVEYW8oZ21EYW8sICIkc3RvcmFnZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RGFvID0gZnVuY3Rpb24gKGtleSwgY3JlYXRlRnVuYykgewogICAgICAgICAgICBpZiAoIW9iai5kYW9zLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgIG9iai5kYW9zW2tleV0gPSBjcmVhdGVGdW5jKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iai5kYW9zW2tleV07CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImNvbnN0YW50IiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzb3VyY2U6IHsKICAgICAgICAgICAgICAgIGJhaWR1OiAiYmFpZHUiLAogICAgICAgICAgICAgICAgd2VpeXVuOiAid2VpeXVuIiwKICAgICAgICAgICAgICAgIGxhbnpvdXM6ICJsYW56b3VzIiwKICAgICAgICAgICAgICAgIHR5MTg5OiAidHkxODkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wdGlvbjogewogICAgICAgICAgICAgICAgYmFpZHVfcGFnZV9ob21lOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImJhaWR1X3BhZ2VfaG9tZSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmFpZHVfcGFnZV9zaGFyZTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiYWlkdV9wYWdlX3NoYXJlIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInllcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBiYWlkdV9wYWdlX3ZlcmlmeTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiYWlkdV9wYWdlX3ZlcmlmeSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmFpZHVfY3VzdG9tX3Bhc3N3b3JkOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImJhaWR1X2N1c3RvbV9wYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmFpZHVfc2hvd19vcmlnaW46IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYmFpZHVfc2hvd19vcmlnaW4iLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJhaWR1X2F1dG9fanVtcDogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiYWlkdV9hdXRvX2p1bXAiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAibm8iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgd2VpeXVuX3BhZ2VfaG9tZTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ3ZWl5dW5fcGFnZV9ob21lIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInllcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB3ZWl5dW5fcGFnZV9zaGFyZTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ3ZWl5dW5fcGFnZV9zaGFyZSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgd2VpeXVuX3BhZ2VfdmVyaWZ5OiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIndlaXl1bl9wYWdlX3ZlcmlmeSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgd2VpeXVuX2F1dG9fanVtcDogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ3ZWl5dW5fYXV0b19qdW1wIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIm5vIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxhbnpvdXNfcGFnZV92ZXJpZnk6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibGFuem91c19wYWdlX3ZlcmlmeSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbGFuem91c19hdXRvX2p1bXA6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibGFuem91c19hdXRvX2p1bXAiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAibm8iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdHkxODlfcGFnZV9ob21lOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIjE4OV9wYWdlX2hvbWUiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHR5MTg5X3BhZ2Vfc2hhcmU6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiMTg5X3BhZ2Vfc2hhcmUiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHR5MTg5X3BhZ2VfdmVyaWZ5OiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIjE4OV9wYWdlX3ZlcmlmeSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdHkxODlfYXV0b19qdW1wOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIjE4OV9hdXRvX2p1bXAiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAibm8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgic2V0dGluZyIsIFsiY29uZmlnIl0sIGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5nZXRBY2Nlc3NUb2tlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gY29uZmlnLmdldENvbmZpZygiYWNjZXNzX3Rva2VuIik7CiAgICAgICAgICAgIHJldHVybiBhY2Nlc3NUb2tlbiA/IGFjY2Vzc1Rva2VuIDogIiI7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldEFjY2Vzc1Rva2VuID0gZnVuY3Rpb24gKGFjY2Vzc1Rva2VuKSB7CiAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcoImFjY2Vzc190b2tlbiIsIGFjY2Vzc1Rva2VuKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0Tm90aWZ5U3RhdHVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbm90aWZ5U3RhdHVzID0gY29uZmlnLmdldENvbmZpZygibm90aWZ5X3N0YXR1cyIpOwogICAgICAgICAgICBpZiAoIW5vdGlmeVN0YXR1cykgewogICAgICAgICAgICAgICAgbm90aWZ5U3RhdHVzID0gInN1Y2Nlc3MiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBub3RpZnlTdGF0dXM7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldE5vdGlmeVN0YXR1cyA9IGZ1bmN0aW9uIChub3RpZnlTdGF0dXMpIHsKICAgICAgICAgICAgY29uZmlnLnNldENvbmZpZygibm90aWZ5X3N0YXR1cyIsIG5vdGlmeVN0YXR1cyk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dOb3RpZnlTdWNjZXNzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAob2JqLmdldE5vdGlmeVN0YXR1cygpID09ICJhbGwiIHx8IG9iai5nZXROb3RpZnlTdGF0dXMoKSA9PSAic3VjY2VzcyIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dOb3RpZnlGYWlsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAob2JqLmdldE5vdGlmeVN0YXR1cygpID09ICJhbGwiIHx8IG9iai5nZXROb3RpZnlTdGF0dXMoKSA9PSAiZmFpbCIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImFwaSIsIFsibWFuaWZlc3QiLCAic3ZnQ3J5cHQiLCAib25lRGF0YSJdLCBmdW5jdGlvbiAobWFuaWZlc3QsIHN2Z0NyeXB0LCBvbmVEYXRhKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmoudmVyc2lvblF1ZXJ5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIG9uZURhdGEucmVxdWVzdE9uZUFwaShtYW5pZmVzdC5nZXRBcGkoInZlcnNpb24iKSwge30sIGNhbGxiYWNrKTsKICAgICAgICB9OwoKICAgICAgICBvYmoucXVlcnlTaGFyZU9yaWdpbiA9IGZ1bmN0aW9uIChzaGFyZVNvdXJjZSwgc2hhcmVJZCwgc2hhcmVMaW5rLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHNoYXJlX2lkOiBzaGFyZUlkLAogICAgICAgICAgICAgICAgc2hhcmVfc291cmNlOiBzaGFyZVNvdXJjZSwKICAgICAgICAgICAgICAgIHNoYXJlX3BvaW50OiBzdmdDcnlwdC5nZXRTdHJQb2ludChzaGFyZUlkKSwKICAgICAgICAgICAgICAgIHNoYXJlX2xpbms6IHNoYXJlTGluawogICAgICAgICAgICB9OwogICAgICAgICAgICBvbmVEYXRhLnJlcXVlc3RPbmVBcGkobWFuaWZlc3QuZ2V0QXBpKCJvcmlnaW4iKSwgZGF0YSwgY2FsbGJhY2spOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJzaGFyZUxvZyIsIFsiY29uZmlnIiwgImNhbGVuZGFyIiwgImNvbnN0YW50Il0sIGZ1bmN0aW9uIChjb25maWcsIGNhbGVuZGFyLCBjb25zdGFudCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIG5hbWU6ICJzaGFyZV9sb2dfbGlzdCIsCiAgICAgICAgICAgIG5hbWVfb2xkOiAic2hhcmVfbGlzdCIKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2hhcmVMb2dMaXN0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIG9iai5taWdyYXRlU2hhcmVMb2coKTsKCiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG9iai5nZXRMb2NhbFNoYXJlTG9nTGlzdCgpKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0TG9jYWxTaGFyZUxvZ0xpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUxpc3QgPSBjb25maWcuZ2V0Q29uZmlnKG9iai5uYW1lKTsKICAgICAgICAgICAgcmV0dXJuIHNoYXJlTGlzdCA/IHNoYXJlTGlzdCA6IHt9OwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUxvZyA9IGZ1bmN0aW9uIChzaGFyZVNvdXJjZSwgc2hhcmVJZCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIHNoYXJlTGlzdCA9IG9iai5nZXRTaGFyZUxvZ0xpc3QoKTsKICAgICAgICAgICAgdmFyIHNoYXJlTm8gPSBvYmouYnVpbGRTaGFyZU5vKHNoYXJlU291cmNlLCBzaGFyZUlkKTsKICAgICAgICAgICAgaWYgKHNoYXJlTGlzdC5oYXNPd25Qcm9wZXJ0eShzaGFyZU5vKSkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soc2hhcmVMaXN0W3NoYXJlTm9dKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLm1pZ3JhdGVTaGFyZUxvZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBzaGFyZUxpc3RPbGQgPSBjb25maWcuZ2V0Q29uZmlnKG9iai5uYW1lX29sZCk7CiAgICAgICAgICAgICAgICBpZiAoc2hhcmVMaXN0T2xkIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlTGlzdCA9IG9iai5nZXRMb2NhbFNoYXJlTG9nTGlzdCgpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gc2hhcmVMaXN0T2xkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gc2hhcmVMaXN0T2xkW2ldOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uc2hhcmVfc291cmNlID09ICIxODkiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNoYXJlX3NvdXJjZSA9IGNvbnN0YW50LnNvdXJjZS50eTE4OTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVMaXN0W29iai5idWlsZFNoYXJlTm8oaXRlbS5zaGFyZV9zb3VyY2UsIGl0ZW0uc2hhcmVfaWQpXSA9IGl0ZW07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcob2JqLm5hbWUsIHNoYXJlTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmRlbENvbmZpZyhvYmoubmFtZV9vbGQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5kZWxDb25maWcob2JqLm5hbWVfb2xkKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5hZGRTaGFyZUxvZyA9IGZ1bmN0aW9uIChzaGFyZVNvdXJjZSwgc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlTGluaywgY2FsbGJhY2spIHsKICAgICAgICAgICAgb2JqLmdldFNoYXJlTG9nTGlzdChmdW5jdGlvbiAoc2hhcmVMaXN0KSB7CiAgICAgICAgICAgICAgICB2YXIgc2hhcmVObyA9IG9iai5idWlsZFNoYXJlTm8oc2hhcmVTb3VyY2UsIHNoYXJlSWQpOwogICAgICAgICAgICAgICAgc2hhcmVMaXN0W3NoYXJlTm9dID0gewogICAgICAgICAgICAgICAgICAgIHNoYXJlX2lkOiBzaGFyZUlkLAogICAgICAgICAgICAgICAgICAgIHNoYXJlX3B3ZDogc2hhcmVQd2QsCiAgICAgICAgICAgICAgICAgICAgc2hhcmVfbGluazogc2hhcmVMaW5rLAogICAgICAgICAgICAgICAgICAgIHNoYXJlX3NvdXJjZTogc2hhcmVTb3VyY2UsCiAgICAgICAgICAgICAgICAgICAgc2hhcmVfdGltZTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcob2JqLm5hbWUsIHNoYXJlTGlzdCk7CiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVtb3ZlU2hhcmVMb2cgPSBmdW5jdGlvbiAoc2hhcmVTb3VyY2UsIHNoYXJlSWQsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIG9iai5nZXRTaGFyZUxvZ0xpc3QoZnVuY3Rpb24gKHNoYXJlTGlzdCkgewogICAgICAgICAgICAgICAgdmFyIHNoYXJlTm8gPSBvYmouYnVpbGRTaGFyZU5vKHNoYXJlU291cmNlLCBzaGFyZUlkKTsKICAgICAgICAgICAgICAgIGlmIChzaGFyZUxpc3QuaGFzT3duUHJvcGVydHkoc2hhcmVObykpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2hhcmVMaXN0W3NoYXJlTm9dOwogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcob2JqLm5hbWUsIHNoYXJlTGlzdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouYnVpbGRTaGFyZU5vID0gZnVuY3Rpb24gKHNoYXJlU291cmNlLCBzaGFyZUlkKSB7CiAgICAgICAgICAgIHJldHVybiBzaGFyZVNvdXJjZSArICIjIiArIHNoYXJlSWQ7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmJ1aWxkU2hhcmVUaW1lID0gZnVuY3Rpb24gKHNoYXJlVGltZSkgewogICAgICAgICAgICByZXR1cm4gY2FsZW5kYXIuZm9ybWF0VGltZSgiWS1tLWQgSDppOnMiLCBzaGFyZVRpbWUpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJydW50aW1lIiwgWyJyb3V0ZXIiLCAibWFuaWZlc3QiLCAiY2FsZW5kYXIiLCAic3RvcmFnZSIsICJhcGkiXSwgZnVuY3Rpb24gKHJvdXRlciwgbWFuaWZlc3QsIGNhbGVuZGFyLCBzdG9yYWdlLCBhcGkpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5vcGVuT3B0aW9uc1BhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJvdXRlci5vcGVuVGFiKG1hbmlmZXN0LmdldE9wdGlvbnNQYWdlKCksIHRydWUpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VmVyc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHZlcnNpb25EYXRlID0gcGFyc2VJbnQoc3RvcmFnZS5nZXRWYWx1ZSgidmVyc2lvbl9kYXRlIikpOwogICAgICAgICAgICB2YXIgY3VycmVudERhdGUgPSBjYWxlbmRhci5mb3JtYXRUaW1lKCJZbWQiKTsKICAgICAgICAgICAgaWYgKCF2ZXJzaW9uRGF0ZSB8fCB2ZXJzaW9uRGF0ZSA8IGN1cnJlbnREYXRlKSB7CiAgICAgICAgICAgICAgICBhcGkudmVyc2lvblF1ZXJ5KGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoInZlcnNpb25fZGF0ZSIsIGN1cnJlbnREYXRlKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmNvZGUgPT0gMSAmJiByZXNwb25zZS5kYXRhIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZXJzaW9uUGF5bG9hZCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoInZlcnNpb25fcGF5bG9hZCIsIHZlcnNpb25QYXlsb2FkKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZSgidmVyc2lvbl9sYXRlc3QiLCB2ZXJzaW9uUGF5bG9hZC52ZXJzaW9uKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0UnVudGltZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLmluaXRWZXJzaW9uKCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImNvcmUiLCBbInJ1bnRpbWUiLCAiJGV4dGVuZCJdLCBmdW5jdGlvbiAocnVudGltZSkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLnJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHJ1bnRpbWUuaW5pdFJ1bnRpbWUoKTsKCiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIC8qKiBhcHAgKiovCiAgICBjb250YWluZXIuZGVmaW5lKCJhcHBfYmFpZHUiLCBbIm1hbmlmZXN0IiwgImNvbmZpZyIsICJvcHRpb24iLCAicm91dGVyIiwgImxvZ2dlciIsICJ1bnNhZmVXaW5kb3ciLCAiY29uc3RhbnQiLCAic2V0dGluZyIsICJydW50aW1lIiwgImFwaSIsICJzaGFyZUxvZyIsICIkIl0sIGZ1bmN0aW9uIChtYW5pZmVzdCwgY29uZmlnLCBvcHRpb24sIHJvdXRlciwgbG9nZ2VyLCB1bnNhZmVXaW5kb3csIGNvbnN0YW50LCBzZXR0aW5nLCBydW50aW1lLCBhcGksIHNoYXJlTG9nLCAkKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgYXBwX2lkOiAyNTA1MjgsCiAgICAgICAgICAgIHRlbXBfcGF0aDogIi9vbmV0bXAiLAogICAgICAgICAgICB5dW5fZGF0YTogbnVsbCwKICAgICAgICAgICAgdmVyaWZ5X3BhZ2U6IHsKICAgICAgICAgICAgICAgIHNoYXJlX3B3ZDogbnVsbCwKICAgICAgICAgICAgICAgIHNldFB3ZDogbnVsbCwKICAgICAgICAgICAgICAgIGJhY2t1cFB3ZDogbnVsbCwKICAgICAgICAgICAgICAgIHJlc3RvcmVQd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBzdWJtaXRfcHdkOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoucnVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoIi5iYWlkdS5jb20vcy8iKSA+IDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfcGFnZV9zaGFyZSkgJiYgb2JqLmluaXRTaGFyZVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHVybC5pbmRleE9mKCIuYmFpZHUuY29tL2Rpc2svaG9tZSIpID4gMCkgewogICAgICAgICAgICAgICAgb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5iYWlkdV9wYWdlX2hvbWUpICYmIG9iai5pbml0SG9tZVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pbmRleE9mKCIuYmFpZHUuY29tL2Rpc2svdGltZWxpbmUiKSA+IDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfcGFnZV9ob21lKSAmJiBvYmouaW5pdFRpbWVMaW5lUGFnZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmluZGV4T2YoIi5iYWlkdS5jb20vc2hhcmUvaW5pdCIpID4gMCkgewogICAgICAgICAgICAgICAgb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5iYWlkdV9wYWdlX3ZlcmlmeSkgJiYgb2JqLmluaXRWZXJpZnlQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0U2hhcmVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmouZ2V0SnF1ZXJ5KCkoZG9jdW1lbnQpLmFqYXhTZW5kKGZ1bmN0aW9uIChldmVudCwgeGhyLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB2YXIgY2xpZW50VHlwZSA9IGNvbmZpZy5nZXRDb25maWcoImNsaWVudF90eXBlIik7CiAgICAgICAgICAgICAgICBpZiAoY2xpZW50VHlwZSkgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9ucy51cmwucmVwbGFjZSgiJmNsaWVudHR5cGU9MCIsICImY2xpZW50dHlwZT0iICsgY2xpZW50VHlwZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgb2JqLnJlbW92ZVZpZGVvTGltaXQoKTsKCiAgICAgICAgICAgIG9iai5wcmV0dHlTaW5nbGVTaGFyZVBhZ2UoKTsKCiAgICAgICAgICAgIG9iai5pbml0QnV0dG9uU2hhcmUoKTsKCiAgICAgICAgICAgIG9iai5pbml0QnV0dG9uRXZlbnQoKTsKCiAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LmJhaWR1X3Nob3dfb3JpZ2luKSkgewogICAgICAgICAgICAgICAgb2JqLnNob3dTaGFyZU9yaWdpbigpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRIb21lUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlZ2lzdGVyQ3VzdG9tU2hhcmVQd2QoKTsKCiAgICAgICAgICAgIG9iai5pbml0QnV0dG9uSG9tZSgpOwoKICAgICAgICAgICAgb2JqLmluaXRCdXR0b25FdmVudCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VGltZUxpbmVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmoucmVnaXN0ZXJDdXN0b21TaGFyZVB3ZCgpOwoKICAgICAgICAgICAgb2JqLmluaXRCdXR0b25UaW1lTGluZSgpOwoKICAgICAgICAgICAgb2JqLmluaXRCdXR0b25FdmVudCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlZ2lzdGVyU3RvcmVTaGFyZVB3ZCgpOwoKICAgICAgICAgICAgaWYgKG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQoKSkgewogICAgICAgICAgICAgICAgb2JqLmF1dG9QYWRkaW5nU2hhcmVQd2QoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgdmFyICRwd2QgPSAkKCIuaW5wdXQtYXJlYSBpbnB1dCIpOwogICAgICAgICAgICBpZiAoc2hhcmVJZCAmJiAkcHdkLmxlbmd0aCkgewogICAgICAgICAgICAgICAgLy8g6K6+572u5o+Q5Y+W56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2V0UHdkID0gZnVuY3Rpb24gKHB3ZCkgewogICAgICAgICAgICAgICAgICAgICRwd2QudmFsKHB3ZCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vIOWkh+S7veaPkOWPlueggQogICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLmJhY2t1cFB3ZCA9IGZ1bmN0aW9uIChwd2QpIHsKICAgICAgICAgICAgICAgICAgICAkcHdkLmF0dHIoImRhdGEtcHdkIiwgcHdkKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLy8g6L+Y5Y6f5o+Q5Y+W56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2UucmVzdG9yZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkcHdkLnZhbCgkcHdkLmF0dHIoImRhdGEtcHdkIikpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyDmj5DkuqTmj5Dlj5bnoIEKICAgICAgICAgICAgICAgIHZhciAkYnV0dG9uID0gJCgiLmlucHV0LWFyZWEgLmctYnV0dG9uLXJpZ2h0Iik7CiAgICAgICAgICAgICAgICBpZiAoJGJ1dHRvbi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc3VibWl0X3B3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGJ1dHRvbi5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouYXV0b1BhZGRpbmdTaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHNoYXJlSWQgPSBvYmouZ2V0U2hhcmVJZCgpOwogICAgICAgICAgICBzaGFyZUxvZy5nZXRTaGFyZUxvZyhjb25zdGFudC5zb3VyY2UuYmFpZHUsIHNoYXJlSWQsIGZ1bmN0aW9uIChyZWNvcmQpIHsKICAgICAgICAgICAgICAgIGlmIChyZWNvcmQgaW5zdGFuY2VvZiBPYmplY3QgJiYgcmVjb3JkLnNoYXJlX3B3ZCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IHJlY29yZC5zaGFyZV9wd2Q7CiAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnNoYXJlX3B3ZCA9IHNoYXJlUHdkOwogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zZXRQd2Qoc2hhcmVQd2QpOwogICAgICAgICAgICAgICAgICAgIHNldHRpbmcuc2hvd05vdGlmeVN1Y2Nlc3MoKSAmJiBvYmouc2hvd1RpcFN1Y2Nlc3MoIlsiICsgbWFuaWZlc3QuZ2V0VGl0bGUoKSArICJdIOWbnuWhq+aPkOWPlueggeaIkOWKnyIpOwoKICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5iYWlkdV9hdXRvX2p1bXApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zdWJtaXRfcHdkICYmIG9iai52ZXJpZnlfcGFnZS5zdWJtaXRfcHdkKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZy5zaG93Tm90aWZ5RmFpbCgpICYmIG9iai5zaG93VGlwRXJyb3IoIlsiICsgbWFuaWZlc3QuZ2V0VGl0bGUoKSArICJdIOayoeacieaPkOWPlueggeiusOW9lSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVnaXN0ZXJTdG9yZVNoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmouZ2V0SnF1ZXJ5KCkoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZShmdW5jdGlvbiAoZXZlbnQsIHhociwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBvcHRpb25zLnVybDsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0VXJsLmluZGV4T2YoIi9zaGFyZS92ZXJpZnkiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gb3B0aW9ucy5kYXRhLm1hdGNoKC9wd2Q9KFthLXowLTldKykvaSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBub3QgbWF0Y2giKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIOaLkue7nSrlj7cKICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnZlcmlmeV9wYWdlLmJhY2t1cFB3ZCkgewogICAgICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2UuYmFja3VwUHdkKG1hdGNoWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChvYmoudmVyaWZ5X3BhZ2UucmVzdG9yZVB3ZCwgNTAwKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHhoci5yZXNwb25zZUpTT047CiAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2UgJiYgcmVzcG9uc2UuZXJybm8gPT0gMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgZXJyb3IiKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IG1hdGNoWzFdOwogICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZVB3ZCA9PSBvYmoudmVyaWZ5X3BhZ2Uuc2hhcmVfcHdkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBjaGFuZ2UiKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVMaW5rID0gb2JqLmdldFNoYXJlTGluaygpOwogICAgICAgICAgICAgICAgICAgIHNoYXJlTG9nLmFkZFNoYXJlTG9nKGNvbnN0YW50LnNvdXJjZS5iYWlkdSwgc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlTGluayk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlckN1c3RvbVNoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyDlip/og73lvIDlhbMKICAgICAgICAgICAgaWYgKCFvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LmJhaWR1X2N1c3RvbV9wYXNzd29yZCkpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb2JqLmxvYWRQbHVnaW4oIue9keebmOWIhuS6qyIsICJjb20uYmFpZHUucGFuIik7CgogICAgICAgICAgICBvYmoub25Nb2R1bGVSZWFkeSgiZnVuY3Rpb24td2lkZ2V0LTE6c2hhcmUvdXRpbC9zaGFyZURpYWxvZy5qcyIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIOWIhuS6q+S6i+S7tgogICAgICAgICAgICAgICAgb2JqLmFzeW5jKCJmdW5jdGlvbi13aWRnZXQtMTpzaGFyZS91dGlsL3NoYXJlRGlhbG9nLmpzIiwgZnVuY3Rpb24gKHNoYXJlRGlhbG9nKSB7CiAgICAgICAgICAgICAgICAgICAgc2hhcmVEaWFsb2cucHJvdG90eXBlLm9uVmlzaWJpbGl0eUNoYW5nZU9yaWdpbiA9IHNoYXJlRGlhbG9nLnByb3RvdHlwZS5vblZpc2liaWxpdHlDaGFuZ2U7CiAgICAgICAgICAgICAgICAgICAgc2hhcmVEaWFsb2cucHJvdG90eXBlLm9uVmlzaWJpbGl0eUNoYW5nZSA9IGZ1bmN0aW9uIChzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoIi5uZC1pbnB1dC1zaGFyZS1wd2QiKS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlUHdkID0gY29uZmlnLmdldENvbmZpZygic2hhcmVfcHdkIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8dHI+PHRkIGNsYXNzPSJmaXJzdC1jaGlsZCI+PGxhYmVsPuaPkOWPlueggTwvbGFiZWw+PC90ZD48dGQ+PGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJuZC1pbnB1dC1zaGFyZS1wd2QiIHZhbHVlPSInICsgKHNoYXJlUHdkID8gc2hhcmVQd2QgOiAiIikgKyAnIiBwbGFjZWhvbGRlcj0i5Li656m65YiZ6ZqP5py65Zub5L2NIiBzdHlsZT0icGFkZGluZzogNnB4OyB3aWR0aDogMTAwcHg7Ym9yZGVyOiAxcHggc29saWQgI2U5ZTllOTsiPjwvdGQ+PC90cj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3NoYXJlIC5kaWFsb2ctYm9keSB0YWJsZSIpLmFwcGVuZChodG1sKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZU9yaWdpbihzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyDnlJ/miJDmj5Dlj5bnoIEKICAgICAgICAgICAgICAgIG9iai5hc3luYygiZnVuY3Rpb24td2lkZ2V0LTE6c2hhcmUvdXRpbC9zaGFyZUZyaWVuZC9jcmVhdGVMaW5rU2hhcmUuanMiLCBmdW5jdGlvbiAoc2hhcmVMaW5rKSB7CiAgICAgICAgICAgICAgICAgICAgc2hhcmVMaW5rLnByb3RvdHlwZS5tYWtlUHJpdmF0ZVBhc3N3b3JkT3JpZ2luID0gc2hhcmVMaW5rLnByb3RvdHlwZS5tYWtlUHJpdmF0ZVBhc3N3b3JkOwogICAgICAgICAgICAgICAgICAgIHNoYXJlTGluay5wcm90b3R5cGUubWFrZVByaXZhdGVQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlUHdkID0gY29uZmlnLmdldENvbmZpZygic2hhcmVfcHdkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFyZVB3ZCA/IHNoYXJlUHdkIDogdGhpcy5tYWtlUHJpdmF0ZVBhc3N3b3JkT3JpZ2luKCk7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIOaPkOWPlueggeabtOaUueS6i+S7tgogICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNoYW5nZSIsICIubmQtaW5wdXQtc2hhcmUtcHdkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICF2YWx1ZS5tYXRjaCgvXlswLTlhLXpdezR9JC9pKSkgewogICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd1RpcEVycm9yKCLmj5Dlj5bnoIHlj6rog73mmK/lm5vkvY3mlbDlrZfmiJblrZfmr40iKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnNldENvbmZpZygic2hhcmVfcHdkIiwgdmFsdWUpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5sb2FkUGx1Z2luID0gZnVuY3Rpb24gKG5hbWUsIGdyb3VwKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luID0gb2JqLnJlcXVpcmUoInN5c3RlbS1jb3JlOnBsdWdpbkh1Yi9kYXRhL1JlZ2lzdHJ5LmpzIikuZ2V0UGx1Z2luQnlOYW1lQW5kR3JvdXAobmFtZSwgZ3JvdXApOwogICAgICAgICAgICAgICAgb2JqLnJlcXVpcmUoInN5c3RlbS1jb3JlOnBsdWdpbkh1Yi9pbnZva2VyL2xvYWRQbHVnaW5Bc3NldHMuanMiKShwbHVnaW4pOwogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsgfQogICAgICAgIH07CgogICAgICAgIG9iai5vbk1vZHVsZVJlYWR5ID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBvYmoucmVxdWlyZShuYW1lKTsKICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLm9uTW9kdWxlUmVhZHkobmFtZSwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5yZW1vdmVWaWRlb0xpbWl0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG9iai5nZXRTeXN0ZW1Db250ZXh0KCkubWVzc2FnZTsKICAgICAgICAgICAgaWYgKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FsbFN5c3RlbSgic2hhcmUtdmlkZW8tYWZ0ZXItdHJhbnNmZXIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCJ3YWl0IHJlbW92ZVZpZGVvTGltaXQuLi4iKTsKICAgICAgICAgICAgICAgIG9iai5zZXRUaW1lb3V0KG9iai5yZW1vdmVWaWRlb0xpbWl0LCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnByZXR0eVNpbmdsZVNoYXJlUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCFvYmouaXNTaGFyZVBhZ2VNdWx0aSgpKSB7CiAgICAgICAgICAgICAgICAkKCIjbGF5b3V0TWFpbiIpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgIndpZHRoIjogImF1dG8iLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiAiMTE4MHB4IiwKICAgICAgICAgICAgICAgICAgICAibWFyZ2luIjogIjg4cHggMzBweCIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dTaGFyZU9yaWdpbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgYXBpLnF1ZXJ5U2hhcmVPcmlnaW4oY29uc3RhbnQuc291cmNlLmJhaWR1LCBvYmouZ2V0U2hhcmVJZCgpLCBvYmouZ2V0U2hhcmVMaW5rKCksIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmNvZGUgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5saXN0ICYmIGRhdGEubGlzdC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogMTBweCA1cHg7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjZmNmY2OyBsaW5lLWhlaWdodDogMzBweDsiPic7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZGF0YS5saXN0WzBdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5saXN0Lmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxwPuWIhuS6q+adpea6kO+8mjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSInICsgaXRlbS51cmwgKyAnIj4nICsgaXRlbS50aXRsZSArICc8L2E+IFs8YSBjbGFzcz0ic2hvdy1vcmlnaW4tZGlhbG9nIiBocmVmPSJqYXZhc2NyaXB0OjsiIHN0eWxlPSJjb2xvcjojZmYwMDAwOyI+IOafpeeci+abtOWkmiA8L2E+XTwvcD4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPHA+5YiG5Lqr5p2l5rqQ77yaPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9IicgKyBpdGVtLnVybCArICciPicgKyBpdGVtLnRpdGxlICsgJzwvYT48L3A+JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICAgICAkKCIubW9kdWxlLXNoYXJlLWhlYWRlciIpLmFmdGVyKGh0bWwpOwoKICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5zaG93LW9yaWdpbi1kaWFsb2ciLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSAi5YiG5Lqr5p2l5rqQIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDIwcHggMjBweDttaW4taGVpZ2h0OiAxMjBweDsgbWF4LWhlaWdodDogMzAwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxwPicgKyAoKytpbmRleCkgKyAn77yaPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9IicgKyBpdGVtLnVybCArICciPicgKyBpdGVtLnRpdGxlICsgJzwvYT48L3A+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9vdGVyID0gb2JqLnJlbmRlckZvb3RlckFwcElkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0RpYWxvZyh0aXRsZSwgYm9keSwgZm9vdGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBvYmouc2hvd1RpcEVycm9yKCLmmoLmnKrmn6Xor6LliLDliIbkuqvnmoTmnaXmupAiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0QnV0dG9uU2hhcmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICgkKCIueC1idXR0b24tYm94IikubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8YSBjbGFzcz0iZy1idXR0b24gbmQtYnV0dG9uLWJ1aWxkIj48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRpc2siIHRpdGxlPSLkuIvovb0iPjwvZW0+PHNwYW4gY2xhc3M9InRleHQiPueUn+aIkOmTvuaOpTwvc3Bhbj48L3NwYW4+PC9hPic7CiAgICAgICAgICAgICAgICAkKCIueC1idXR0b24tYm94IikuYXBwZW5kKGh0bWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oIndhaXQgaW5pdEJ1dHRvblNoYXJlLi4uIik7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG9iai5pbml0QnV0dG9uU2hhcmUsIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdEJ1dHRvbkhvbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBsaXN0VG9vbHMgPSBvYmouZ2V0U3lzdGVtQ29udGV4dCgpLkJyb2tlci5nZXRCdXR0b25Ccm9rZXIoImxpc3RUb29scyIpOwogICAgICAgICAgICBpZiAobGlzdFRvb2xzICYmIGxpc3RUb29scy4kYm94KSB7CiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8YSBjbGFzcz0iZy1idXR0b24gbmQtYnV0dG9uLWJ1aWxkIj48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRpc2siIHRpdGxlPSLkuIvovb0iPjwvZW0+PHNwYW4gY2xhc3M9InRleHQiPueUn+aIkOmTvuaOpTwvc3Bhbj48L3NwYW4+PC9hPic7CiAgICAgICAgICAgICAgICAkKGxpc3RUb29scy4kYm94KS5wcmVwZW5kKGh0bWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oIndhaXQgaW5pdEJ1dHRvbkhvbWUuLi4iKTsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQob2JqLmluaXRCdXR0b25Ib21lLCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRCdXR0b25UaW1lTGluZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCQoIi5tb2R1bGUtb3BlcmF0ZUJ0biAuZ3JvdXAtYnV0dG9uIikubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8c3BhbiBjbGFzcz0iYnV0dG9uIj48YSBjbGFzcz0iZy12LWJ1dHRvbiBnLXYtYnV0dG9uLW1pZGRsZSBuZC1idXR0b24tYnVpbGQiPjxzcGFuIGNsYXNzPSJnLXYtYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1kaXNrIj48L2VtPjxzcGFuIGNsYXNzPSJ0ZXh0Ij7nlJ/miJDpk77mjqU8L3NwYW4+PC9zcGFuPjwvYT48L3NwYW4+JzsKICAgICAgICAgICAgICAgICQoIi5tb2R1bGUtb3BlcmF0ZUJ0biAuZ3JvdXAtYnV0dG9uIikucHJlcGVuZChodG1sKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCJ3YWl0IGluaXRCdXR0b25UaW1lTGluZS4uLiIpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChvYmouaW5pdEJ1dHRvblRpbWVMaW5lLCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRCdXR0b25FdmVudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLy8g55Sf5oiQ6ZO+5o6lCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIubmQtYnV0dG9uLWJ1aWxkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHl1bkRhdGEgPSBvYmouZ2V0WXVuRGF0YSgpOwogICAgICAgICAgICAgICAgaWYgKHl1bkRhdGEuTVlVSyB8fCBvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVMaXN0ID0gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVN0YXQgPSBvYmouZ2V0RmlsZUxpc3RTdGF0KGZpbGVMaXN0KTsKICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlTGlzdC5sZW5ndGggPiAxICYmIGZpbGVTdGF0LmZpbGVfbnVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkU2VsZWN0KGZpbGVMaXN0LCBmaWxlU3RhdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmlsZVN0YXQuZmlsZV9udW0gPT0gMSAmJiAhb2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZFNpbmdsZShmaWxlTGlzdCwgZmlsZVN0YXQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhY2sgPSBmaWxlU3RhdC5maWxlX251bSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9Ib21lKGZpbGVMaXN0LCBwYWNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvU2hhcmVPZmZpY2FsKGZpbGVMaXN0LCBwYWNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dUaXBFcnJvcigi6K+36Iez5bCR6YCJ5oup5LiA5Liq5paH5Lu25oiW5paH5Lu25aS5Iik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dMb2dpbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIOWOi+e8qeWMhQogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLm5kLWJ1dHRvbi1wYWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGZpbGVMaXN0ID0gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QoKTsKICAgICAgICAgICAgICAgIGlmIChvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9Ib21lKGZpbGVMaXN0LCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvU2hhcmVPZmZpY2FsKGZpbGVMaXN0LCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyDlpJrmlofku7YKICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5uZC1idXR0b24tbXVsdGkiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZmlsZUxpc3QgPSBvYmouZ2V0U2VsZWN0ZWRGaWxlTGlzdCgpOwoKICAgICAgICAgICAgICAgIC8vIOi/h+a7pOaWh+S7tuWkuQogICAgICAgICAgICAgICAgZmlsZUxpc3QgPSBvYmouZmlsdGVyRmlsZUxpc3REaXIoZmlsZUxpc3QpOwoKICAgICAgICAgICAgICAgIGlmIChvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9Ib21lKGZpbGVMaXN0LCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb1NoYXJlT2ZmaWNhbChmaWxlTGlzdCwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIOi9rOWtmOWkmuaWh+S7tgogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLm5kLWJ1dHRvbi1kaXNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGZpbGVMaXN0ID0gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QoKTsKCiAgICAgICAgICAgICAgICAvLyDov4fmu6Tmlofku7blpLkKICAgICAgICAgICAgICAgIGZpbGVMaXN0ID0gb2JqLmZpbHRlckZpbGVMaXN0RGlyKGZpbGVMaXN0KTsKCiAgICAgICAgICAgICAgICBpZiAob2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvSG9tZShmaWxlTGlzdCwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9TaGFyZVRyYW5zZmVyKGZpbGVMaXN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyDlupTnlKhJRAogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLm5kLWNoYW5nZS1hcHAtaWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBvYmouc2hvd0FwcElkQ2hhbmdlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2hhbmdlIiwgIi5uZC1pbnB1dC1hcHAtaWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBvYmouc2V0QXBwSWQodGhpcy52YWx1ZSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5omT5byA6YWN572u6aG1CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIubmQtb3Blbi1wYWdlLW9wdGlvbiIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJ1bnRpbWUub3Blbk9wdGlvbnNQYWdlKCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5omT5byA5Li05pe26aG16Z2iCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIubmQtb3Blbi1wYWdlLXRlbXAiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByb3V0ZXIub3BlblRhYigiaHR0cHM6Ly9wYW4uYmFpZHUuY29tL2Rpc2svaG9tZSMvYWxsP3Ztb2RlPWxpc3QmcGF0aD0iICsgZW5jb2RlVVJJQ29tcG9uZW50KG9iai5nZXRUZW1wUGF0aCgpKSwgdHJ1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93TG9naW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5nZXRKcXVlcnkoKSgiW25vZGUtdHlwZT0naGVhZGVyLWxvZ2luLWJ0biddIikuY2xpY2soKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb1NoYXJlVHJhbnNmZXIgPSBmdW5jdGlvbiAoZmlsZUxpc3QpIHsKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZmlsZUxpc3QpOwogICAgICAgICAgICBvYmouYXBwbHlUcmFuc2ZlckZpbGUoZmlsZUxpc3QsIG9iai5nZXRUZW1wUGF0aCgpLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5leHRyYSAmJiByZXNwb25zZS5leHRyYS5saXN0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RNYXAgPSB7fTsKICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5leHRyYS5saXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdE1hcFtpdGVtLmZyb21fZnNfaWRdID0gaXRlbTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGRvd25MaXN0ID0gW107CiAgICAgICAgICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlzdE1hcC5oYXNPd25Qcm9wZXJ0eShpdGVtLmZzX2lkKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kbGluayA9IG9iai5idWlsZERvd25sb2FkVXJsKGxpc3RNYXBbaXRlbS5mc19pZF0udG8sIGl0ZW0uc2VydmVyX2ZpbGVuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25MaXN0LnB1c2goaXRlbSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkTGlua0ZpbGUoZG93bkxpc3QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb1NoYXJlT2ZmaWNhbCA9IGZ1bmN0aW9uIChmaWxlTGlzdCwgcGFjaykgewogICAgICAgICAgICBvYmouZ2V0RG93bmxvYWRTaGFyZShmaWxlTGlzdCwgcGFjaywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBvYmouaGlkZVRpcCgpOwogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8ocmVzcG9uc2UpOwoKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5saXN0ICYmIHJlc3BvbnNlLmxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgLy8g5paH5Lu2CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZExpbmtGaWxlKHJlc3BvbnNlLmxpc3QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UuZGxpbmspIHsKICAgICAgICAgICAgICAgICAgICAvLyDljovnvKnljIUKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkTGlua1BhY2soZmlsZUxpc3QsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGxpbms6IHJlc3BvbnNlLmRsaW5rCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyDlhbbku5YKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0RpYWxvZ1VuS25vd25SZXNwb25zZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvSG9tZSA9IGZ1bmN0aW9uIChmaWxlTGlzdCwgcGFjaykgewogICAgICAgICAgICBsb2dnZXIuaW5mbyhmaWxlTGlzdCk7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBvYmouZ2V0RG93bmxvYWRIb21lKGZpbGVMaXN0LCBwYWNrLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBvYmouaGlkZVRpcCgpOwogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKHJlc3BvbnNlKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRsaW5rICYmIHR5cGVvZiByZXNwb25zZS5kbGluayA9PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Y6L57yp5YyFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkTGlua1BhY2soZmlsZUxpc3QsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbGluazogcmVzcG9uc2UuZGxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5YW25LuWCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0RpYWxvZ1VuS25vd25SZXNwb25zZShyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kbGluayBpbnN0YW5jZW9mIEFycmF5ICYmIHJlc3BvbnNlLmRsaW5rLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRsaW5rTWFwcGluZyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGxpbmsuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRsaW5rTWFwcGluZ1tpdGVtLmZzX2lkXSA9IGl0ZW0uZGxpbms7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRsaW5rID0gZGxpbmtNYXBwaW5nW2l0ZW0uZnNfaWRdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGxpbmtBcGkgPSBvYmouYnVpbGREb3dubG9hZFVybChpdGVtLnBhdGgsIGl0ZW0uc2VydmVyX2ZpbGVuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGxpbmsgPSBvYmouYnVpbGREb3dubG9hZFVybChpdGVtLnBhdGgsIGl0ZW0uc2VydmVyX2ZpbGVuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRMaW5rRmlsZShmaWxlTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgIGl0ZW0uZGxpbmsgPSBvYmouYnVpbGREb3dubG9hZFVybChpdGVtLnBhdGgsIGl0ZW0uc2VydmVyX2ZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZExpbmtGaWxlKGZpbGVMaXN0KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWRMaW5rRmlsZSA9IGZ1bmN0aW9uIChmaWxlTGlzdCkgewogICAgICAgICAgICB2YXIgdGl0bGUgPSAi5paH5Lu25LiL6L29IjsKICAgICAgICAgICAgdmFyIGJvZHkgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogMjBweCAyMHB4O21pbi1oZWlnaHQ6IDEyMHB4OyBtYXgtaGVpZ2h0OiAzMDBweDsgb3ZlcmZsb3cteTogYXV0bzsgIj4nOwoKICAgICAgICAgICAgdmFyIHJvd1N0eWxlID0gImRpc3BsYXk6YmxvY2s7IG92ZXJmbG93OmhpZGRlbjsgd2hpdGUtc3BhY2U6bm93cmFwOyB0ZXh0LW92ZXJmbG93OmVsbGlwc2lzOyI7CiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICBib2R5ICs9ICc8ZGl2IHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+JzsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxkaXY+JyArIChpbmRleCArIDEpICsgJ++8micgKyBpdGVtLnNlcnZlcl9maWxlbmFtZSArICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGxpbmtBcGkpIHsKICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICc8ZGl2PjxhIGhyZWY9IicgKyBpdGVtLmRsaW5rICsgJyZmaWxlbmFtZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0uc2VydmVyX2ZpbGVuYW1lKSArICciIHRpdGxlPSInICsgaXRlbS5kbGluayArICciIHN0eWxlPSInICsgcm93U3R5bGUgKyAnIj7lrpjmlrnvvJonICsgaXRlbS5kbGluayArICc8L2E+PC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICc8ZGl2PjxhIGhyZWY9IicgKyBpdGVtLmRsaW5rQXBpICsgJyZmaWxlbmFtZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0uc2VydmVyX2ZpbGVuYW1lKSArICciIHRpdGxlPSInICsgaXRlbS5kbGlua0FwaSArICciIHN0eWxlPSInICsgcm93U3R5bGUgKyAnIj7nm7Tpk77vvJonICsgaXRlbS5kbGlua0FwaSArICc8L2E+PC9kaXY+JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxkaXY+PGEgaHJlZj0iJyArIGl0ZW0uZGxpbmsgKyAnJmZpbGVuYW1lPScgKyBlbmNvZGVVUklDb21wb25lbnQoaXRlbS5zZXJ2ZXJfZmlsZW5hbWUpICsgJyIgdGl0bGU9IicgKyBpdGVtLmRsaW5rICsgJyIgc3R5bGU9IicgKyByb3dTdHlsZSArICciPicgKyBpdGVtLmRsaW5rICsgJzwvYT48L2Rpdj4nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYm9keSArPSAnPC9kaXY+JzsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwogICAgICAgICAgICB2YXIgZm9vdGVyID0gb2JqLnJlbmRlckZvb3RlckFwcElkKCk7CiAgICAgICAgICAgIG9iai5zaG93RGlhbG9nKHRpdGxlLCBib2R5LCBmb290ZXIpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWRMaW5rUGFjayA9IGZ1bmN0aW9uIChmaWxlTGlzdCwgZGF0YSkgewogICAgICAgICAgICB2YXIgdGl0bGUgPSAi5paH5Lu25LiL6L29IjsKICAgICAgICAgICAgdmFyIGJvZHkgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogMjBweCAyMHB4O21pbi1oZWlnaHQ6IDEyMHB4OyBtYXgtaGVpZ2h0OiAzMDBweDsgb3ZlcmZsb3cteTogYXV0bzsgIj4nOwoKICAgICAgICAgICAgdmFyIHBhY2tOYW1lID0gb2JqLmdldERvd25sb2FkUGFja05hbWUoZmlsZUxpc3QpOwogICAgICAgICAgICBib2R5ICs9ICc8ZGl2PicgKyBwYWNrTmFtZSArICc8L2Rpdj48ZGl2PjxhIGhyZWY9IicgKyBkYXRhLmRsaW5rICsgJyZ6aXBuYW1lPScgKyBlbmNvZGVVUklDb21wb25lbnQocGFja05hbWUpICsgJyIgdGl0bGU9IicgKyBkYXRhLmRsaW5rICsgJyIgc3R5bGU9ImRpc3BsYXk6YmxvY2s7IG92ZXJmbG93OmhpZGRlbjsgd2hpdGUtc3BhY2U6bm93cmFwOyB0ZXh0LW92ZXJmbG93OmVsbGlwc2lzOyI+JyArIGRhdGEuZGxpbmsgKyAnPC9hPjwvZGl2Pic7CgogICAgICAgICAgICBib2R5ICs9ICc8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOiAxNXB4OyI+5omT5YyF55qE5paH5Lu2L+aWh+S7tuWkueWIl+ihqDwvZGl2Pic7CiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICBib2R5ICs9ICc8ZGl2IHRpdGxlPSInICsgaXRlbS5wYXRoICsgJyIgc3R5bGU9ImNvbG9yOiAnICsgKGl0ZW0uaXNkaXIgPyAiYmx1ZSIgOiAiaW5oZXJpdCIpICsgJzsiPlsnICsgKGluZGV4ICsgMSkgKyAnXSAnICsgaXRlbS5zZXJ2ZXJfZmlsZW5hbWUgKyAnPC9kaXY+JzsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwogICAgICAgICAgICB2YXIgZm9vdGVyID0gb2JqLnJlbmRlckZvb3RlckFwcElkKCk7CiAgICAgICAgICAgIG9iai5zaG93RGlhbG9nKHRpdGxlLCBib2R5LCBmb290ZXIpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXREb3dubG9hZFBhY2tOYW1lID0gZnVuY3Rpb24gKGZpbGVMaXN0KSB7CiAgICAgICAgICAgIHJldHVybiBmaWxlTGlzdFswXS5zZXJ2ZXJfZmlsZW5hbWUgKyAiIOetiSIgKyBmaWxlTGlzdC5sZW5ndGggKyAi5Liq5paH5Lu2LnppcCI7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmJ1aWxkRG93bmxvYWRVcmwgPSBmdW5jdGlvbiAocGF0aCwgbmFtZSkgewogICAgICAgICAgICByZXR1cm4gImh0dHBzOi8vcGNzLmJhaWR1LmNvbS9yZXN0LzIuMC9wY3MvZmlsZT9tZXRob2Q9ZG93bmxvYWQmYXBwX2lkPSIgKyBvYmouZ2V0QXBwSWQoKSArICImZmlsZW5hbWU9IiArIGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArICImcGF0aD0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhdGgpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWRTaW5nbGUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIGZpbGVTdGF0KSB7CiAgICAgICAgICAgIHZhciB0aXRsZSA9ICLpk77mjqXnsbvlnosiOwogICAgICAgICAgICB2YXIgYm9keSA9ICc8ZGl2IHN0eWxlPSJwYWRkaW5nOiA0MHB4IDIwcHg7IG1heC1oZWlnaHQ6IDMwMHB4OyBvdmVyZmxvdy15OiBhdXRvOyI+JzsKCiAgICAgICAgICAgIGJvZHkgKz0gJzxkaXYgY2xhc3M9Im5vcm1hbEJ0bkJveCBnLWNlbnRlciI+JzsKICAgICAgICAgICAgYm9keSArPSAnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWxhcmdlIGctYnV0dG9uLWdyYXktbGFyZ2UgbmQtYnV0dG9uLW11bHRpIiB0aXRsZT0i6LCD55So5a6Y5pa55o6l5Y+j55Sf5oiQ6ZO+5o6lIj48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRvd25sb2FkIj48L2VtPiDlrpjmlrnpk77mjqU8L3NwYW4+PC9hPic7CiAgICAgICAgICAgIGJvZHkgKz0gJzxhIGNsYXNzPSJnLWJ1dHRvbiBnLWJ1dHRvbi1sYXJnZSBnLWJ1dHRvbi1ncmF5LWxhcmdlIG5kLWJ1dHRvbi1kaXNrIiBzdHlsZT0ibWFyZ2luLWxlZnQ6NTBweDsiIHRpdGxlPSLovazlrZjmlofku7bnhLblkI7nlJ/miJDmlofku7bnm7Tpk74iPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PGVtIGNsYXNzPSJpY29uIGljb24tc2F2ZS1kaXNrIj48L2VtPiDovazlrZjnm7Tpk748L3NwYW4+PC9hPic7CiAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CgogICAgICAgICAgICBpZiAoZmlsZVN0YXQuZGlyX251bSkgewogICAgICAgICAgICAgICAgYm9keSArPSAnPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDogNDBweDsgcGFkZGluZy10b3A6IDEwcHg7IG1hcmdpbi1ib3R0b206IC0yMHB4OyBib3JkZXItdG9wOiAxcHggc29saWQgI0QwREZFNzsiPjxwIGNsYXNzPSJnLWNlbnRlciI+6YCJ5oupIFvlpJrmlofku7ZdIOS8mui/h+a7pOW9k+WJjemAieS4reeahCA8c3BhbiBzdHlsZT0iY29sb3I6IHJlZCI+JyArIGZpbGVTdGF0LmRpcl9udW0gKyAnPC9zcGFuPiDkuKrmlofku7blpLk8L3A+JzsKCiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAxOwogICAgICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzZGlyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxwIHRpdGxlPSInICsgaXRlbS5wYXRoICsgJyIgc3R5bGU9ImNvbG9yOiBibHVlOyI+WycgKyBpbmRleCArICddICcgKyBpdGVtLnNlcnZlcl9maWxlbmFtZSArICc8L3A+JzsKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgIHZhciBmb290ZXIgPSBvYmoucmVuZGVyRm9vdGVyQXBwSWQoKTsKICAgICAgICAgICAgb2JqLnNob3dEaWFsb2codGl0bGUsIGJvZHksIGZvb3Rlcik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dEb3dubG9hZFNlbGVjdCA9IGZ1bmN0aW9uIChmaWxlTGlzdCwgZmlsZVN0YXQpIHsKICAgICAgICAgICAgdmFyIHRpdGxlID0gIumTvuaOpeexu+WeiyI7CiAgICAgICAgICAgIHZhciBib2R5ID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDQwcHggMjBweDsgbWF4LWhlaWdodDogMzAwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij4nOwoKICAgICAgICAgICAgYm9keSArPSAnPGRpdiBjbGFzcz0ibm9ybWFsQnRuQm94IGctY2VudGVyIj4nOwogICAgICAgICAgICBpZiAob2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgYm9keSArPSAnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWxhcmdlIGctYnV0dG9uLWdyYXktbGFyZ2UgbmQtYnV0dG9uLWRpc2siIHRpdGxlPSLlkIjlubblrpjmlrnpk77mjqXlkozmlofku7bnm7Tpk74iPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PGVtIGNsYXNzPSJpY29uIGljb24tc2F2ZS1kaXNrIj48L2VtPiDlpJrmlofku7Y8L3NwYW4+PC9hPic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBib2R5ICs9ICc8YSBjbGFzcz0iZy1idXR0b24gZy1idXR0b24tbGFyZ2UgZy1idXR0b24tZ3JheS1sYXJnZSBuZC1idXR0b24tbXVsdGkiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCIgdGl0bGU9Iuiwg+eUqOWumOaWueaOpeWPo+eUn+aIkOaWh+S7tumTvuaOpSI+PGVtIGNsYXNzPSJpY29uIGljb24tZG93bmxvYWQiPjwvZW0+IOWumOaWueWkmuaWh+S7tjwvc3Bhbj48L2E+JzsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxhIGNsYXNzPSJnLWJ1dHRvbiBnLWJ1dHRvbi1sYXJnZSBnLWJ1dHRvbi1ncmF5LWxhcmdlIG5kLWJ1dHRvbi1kaXNrIiBzdHlsZT0ibWFyZ2luLWxlZnQ6NTBweDsiIHRpdGxlPSLovazlrZjmlofku7bnhLblkI7nlJ/miJDmlofku7bnm7Tpk74iPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PGVtIGNsYXNzPSJpY29uIGljb24tc2F2ZS1kaXNrIj48L2VtPiDovazlrZjlpJrmlofku7Y8L3NwYW4+PC9hPic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYm9keSArPSAnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWxhcmdlIGctYnV0dG9uLWdyYXktbGFyZ2UgbmQtYnV0dG9uLXBhY2siIHN0eWxlPSJtYXJnaW4tbGVmdDo1MHB4OyIgdGl0bGU9Iuiwg+eUqOWumOaWueaOpeWPo+eUn+aIkOWOi+e8qeWMhemTvuaOpSI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1wb2x5Ij48L2VtPiDljovnvKnljIU8L3NwYW4+PC9hPic7CiAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CgogICAgICAgICAgICBpZiAoZmlsZVN0YXQuZGlyX251bSkgewogICAgICAgICAgICAgICAgYm9keSArPSAnPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDogNDBweDsgcGFkZGluZy10b3A6IDEwcHg7IG1hcmdpbi1ib3R0b206IC0yMHB4OyBib3JkZXItdG9wOiAxcHggc29saWQgI0QwREZFNzsiPjxwIGNsYXNzPSJnLWNlbnRlciI+6YCJ5oupIFvlpJrmlofku7ZdIOS8mui/h+a7pOW9k+WJjemAieS4reeahCA8c3BhbiBzdHlsZT0iY29sb3I6IHJlZCI+JyArIGZpbGVTdGF0LmRpcl9udW0gKyAnPC9zcGFuPiDkuKrmlofku7blpLk8L3A+JzsKICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDE7CiAgICAgICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXNkaXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYm9keSArPSAnPHAgdGl0bGU9IicgKyBpdGVtLnBhdGggKyAnIiBzdHlsZT0iY29sb3I6IGJsdWU7Ij5bJyArIGluZGV4ICsgJ10gJyArIGl0ZW0uc2VydmVyX2ZpbGVuYW1lICsgJzwvcD4nOwogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYm9keSArPSAnPC9kaXY+JzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYm9keSArPSAnPC9kaXY+JzsKICAgICAgICAgICAgdmFyIGZvb3RlciA9IG9iai5yZW5kZXJGb290ZXJBcHBJZCgpOwogICAgICAgICAgICBvYmouc2hvd0RpYWxvZyh0aXRsZSwgYm9keSwgZm9vdGVyKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0FwcElkQ2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdGl0bGUgPSAi5bqU55SoSUQiOwogICAgICAgICAgICB2YXIgYm9keSA9ICc8ZGl2IHN0eWxlPSJwYWRkaW5nOiA2MHB4IDIwcHg7IG1heC1oZWlnaHQ6IDMwMHB4OyBvdmVyZmxvdy15OiBhdXRvOyI+PGRpdiBjbGFzcz0iZy1jZW50ZXIiIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+5b2T5YmN5bqU55SoSUTvvJo8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9Im5kLWlucHV0LWFwcC1pZCIgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkICNmMmYyZjI7IHBhZGRpbmc6IDRweCA1cHg7IiB2YWx1ZT0iJyArIG9iai5nZXRBcHBJZCgpICsgJyI+PC9kaXY+PGRpdiBjbGFzcz0iZy1jZW50ZXIiPjxwPueUqOS6juaehOmAoOS4quS6uue9keebmOaWh+S7tueahOS4i+i9veebtOmTvu+8jOabtOWkmuW6lOeUqElE6K+35p+l55yLPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly9nby5uZXdkYXkubWUvcy9wYW4tc2NyaXB0Ij4g6ISa5pys5Li76aG1IDwvYT48L3A+PC9kaXY+PC9kaXY+JzsKICAgICAgICAgICAgdmFyIGZvb3RlciA9ICcnOwogICAgICAgICAgICBvYmouc2hvd0RpYWxvZyh0aXRsZSwgYm9keSwgZm9vdGVyKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0RpYWxvZ1VuS25vd25SZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICB2YXIgdGl0bGUgPSAi5pyq55+l57uT5p6cIjsKICAgICAgICAgICAgdmFyIGJvZHkgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogMjBweCAyMHB4OyBtYXgtaGVpZ2h0OiAzMDBweDsgb3ZlcmZsb3cteTogYXV0bzsiPjxwcmUgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmUtd3JhcDsgd29yZC13cmFwOiBicmVhay13b3JkOyB3b3JkLWJyZWFrOiBicmVhay1hbGw7Ij4nICsgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UsIG51bGwsIDQpICsgJzwvcHJlPjwvZGl2Pic7CiAgICAgICAgICAgIHZhciBmb290ZXIgPSBvYmoucmVuZGVyRm9vdGVyQXBwSWQoKTsKICAgICAgICAgICAgb2JqLnNob3dEaWFsb2codGl0bGUsIGJvZHksIGZvb3Rlcik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlbmRlckZvb3RlckFwcElkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gJzxwIHN0eWxlPSJwYWRkaW5nLXRvcDogMTBweDsgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNEMERGRTc7Ij7lupTnlKhJRO+8micgKyBvYmouZ2V0QXBwSWQoKSArICcgPGEgaHJlZj0iamF2YXNjcmlwdDo7IiBjbGFzcz0ibmQtY2hhbmdlLWFwcC1pZCI+5L+u5pS5PC9hPu+8jOWFtuS7lumhtemdou+8miA8YSBjbGFzcz0ibmQtb3Blbi1wYWdlLW9wdGlvbiIgaHJlZj0iamF2YXNjcmlwdDo7Ij7phY3nva7pobXpnaI8L2E+IOOAgTxhIGNsYXNzPSJuZC1vcGVuLXBhZ2UtdGVtcCIgaHJlZj0iamF2YXNjcmlwdDo7Ij7kuLTml7bmlofku7Y8L2E+PC9wPic7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dEaWFsb2cgPSBmdW5jdGlvbiAodGl0bGUsIGJvZHksIGZvb3RlcikgewogICAgICAgICAgICB2YXIgZGlhbG9nID0gb2JqLnJlcXVpcmUoInN5c3RlbS1jb3JlOnN5c3RlbS91aVNlcnZpY2UvZGlhbG9nL2RpYWxvZy5qcyIpLnZlcmlmeSh7CiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsCiAgICAgICAgICAgICAgICBpbWc6ICJpbWciLAogICAgICAgICAgICAgICAgdmNvZGU6ICJ2Y29kZSIKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyDlhoXlrrkKICAgICAgICAgICAgJChkaWFsb2cuJGRpYWxvZykuZmluZCgiLmRpYWxvZy1ib2R5Iikuc2FmZUh0bWwoYm9keSk7CgogICAgICAgICAgICAvLyDlupXpg6gKICAgICAgICAgICAgJChkaWFsb2cuJGRpYWxvZykuZmluZCgiLmRpYWxvZy1mb290ZXIiKS5zYWZlSHRtbChmb290ZXIpOwoKICAgICAgICAgICAgZGlhbG9nLnNob3coKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd1RpcFN1Y2Nlc3MgPSBmdW5jdGlvbiAobXNnLCBoYXNDbG9zZSwgYXV0b0Nsb3NlKSB7CiAgICAgICAgICAgIG9iai5zaG93VGlwKCJzdWNjZXNzIiwgbXNnLCBoYXNDbG9zZSwgYXV0b0Nsb3NlKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd1RpcEVycm9yID0gZnVuY3Rpb24gKG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSkgewogICAgICAgICAgICBvYmouc2hvd1RpcCgiZmFpbHVyZSIsIG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXBMb2FkaW5nID0gZnVuY3Rpb24gKG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSkgewogICAgICAgICAgICBvYmouc2hvd1RpcCgibG9hZGluZyIsIG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXAgPSBmdW5jdGlvbiAobW9kZSwgbXNnLCBoYXNDbG9zZSwgYXV0b0Nsb3NlKSB7CiAgICAgICAgICAgIHZhciBvcHRpb24gPSB7CiAgICAgICAgICAgICAgICBtb2RlOiBtb2RlLAogICAgICAgICAgICAgICAgbXNnOiBtc2cKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIOWFs+mXreaMiemSrgogICAgICAgICAgICBpZiAodHlwZW9mIGhhc0Nsb3NlICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICBvcHRpb24uaGFzQ2xvc2UgPSBoYXNDbG9zZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8g6Ieq5Yqo5YWz6ZetCiAgICAgICAgICAgIGlmICh0eXBlb2YgYXV0b0Nsb3NlICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICBvcHRpb24uYXV0b0Nsb3NlID0gYXV0b0Nsb3NlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvYmoucmVxdWlyZSgic3lzdGVtLWNvcmU6c3lzdGVtL3VpU2VydmljZS90aXAvdGlwLmpzIikuc2hvdyhvcHRpb24pOwogICAgICAgIH07CgogICAgICAgIG9iai5oaWRlVGlwID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmoucmVxdWlyZSgic3lzdGVtLWNvcmU6c3lzdGVtL3VpU2VydmljZS90aXAvdGlwLmpzIikuaGlkZSh7CiAgICAgICAgICAgICAgICBoaWRlVGlwc0FuaW1hdGlvbkZsYWc6IDEKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmlzSG9tZVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigiLmJhaWR1LmNvbS9kaXNrIikgPiAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pc1RpbWVsaW5lUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHVybCA9IHJvdXRlci5nZXRVcmwoKTsKICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCIuYmFpZHUuY29tL2Rpc2svdGltZWxpbmUiKSA+IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmlzU2hhcmVQYWdlTXVsdGkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB5dW5EYXRhID0gb2JqLmdldFl1bkRhdGEoKTsKICAgICAgICAgICAgaWYgKHl1bkRhdGEuU0hBUkVQQUdFVFlQRSA9PSAic2luZ2xlX2ZpbGVfcGFnZSIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3RIb21lKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3RTaGFyZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNlbGVjdGVkRmlsZUxpc3RIb21lID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAob2JqLmlzVGltZWxpbmVQYWdlKCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmoucmVxdWlyZSgicGFuLXRpbWVsaW5lOndpZGdldC9zdG9yZS9pbmRleC5qcyIpLmdldHRlcnMuZ2V0Q2hvb3NlZEl0ZW1BcnI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnJlcXVpcmUoJ3N5c3RlbS1jb3JlOmNvbnRleHQvY29udGV4dC5qcycpLmluc3RhbmNlRm9yU3lzdGVtLmxpc3QuZ2V0U2VsZWN0ZWQoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0U2hhcmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoucmVxdWlyZSgnc3lzdGVtLWNvcmU6Y29udGV4dC9jb250ZXh0LmpzJykuaW5zdGFuY2VGb3JTeXN0ZW0ubGlzdC5nZXRTZWxlY3RlZCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRGaWxlTGlzdFN0YXQgPSBmdW5jdGlvbiAoZmlsZUxpc3QpIHsKICAgICAgICAgICAgdmFyIGZpbGVTdGF0ID0gewogICAgICAgICAgICAgICAgZmlsZV9udW06IDAsCiAgICAgICAgICAgICAgICBkaXJfbnVtOiAwCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzZGlyID09IDApIHsKICAgICAgICAgICAgICAgICAgICBmaWxlU3RhdC5maWxlX251bSsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZVN0YXQuZGlyX251bSsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGZpbGVTdGF0OwogICAgICAgIH07CgogICAgICAgIG9iai5maWx0ZXJGaWxlTGlzdERpciA9IGZ1bmN0aW9uIChmaWxlTGlzdCkgewogICAgICAgICAgICB2YXIgZmlsZUxpc3RGaWx0ZXIgPSBbXTsKICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXNkaXIgPT0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0RmlsdGVyLnB1c2goaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZUxpc3RGaWx0ZXI7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnBhcnNlRmlkTGlzdCA9IGZ1bmN0aW9uIChmaWxlTGlzdCkgewogICAgICAgICAgICB2YXIgZmlkTGlzdCA9IFtdOwogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICBmaWRMaXN0LnB1c2goaXRlbS5mc19pZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlkTGlzdDsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RG93bmxvYWRTaGFyZSA9IGZ1bmN0aW9uIChmaWxlTGlzdCwgcGFjaywgY2FsbGJhY2spIHsKICAgICAgICAgICAgb2JqLnNob3dUaXBMb2FkaW5nKCLnlJ/miJDpk77mjqXkuK3vvIzor7fnqI3nrYkuLi4iKTsKCiAgICAgICAgICAgIG9iai5sb2FkUGx1Z2luKCLnvZHnm5jkuIvovb0iLCAiY29tLmJhaWR1LnBhbiIpOwoKICAgICAgICAgICAgb2JqLm9uTW9kdWxlUmVhZHkoImZ1bmN0aW9uLXdpZGdldC0xOmRvd25sb2FkL3V0aWwvY29udGV4dC5qcyIsIGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICBvYmouaW5pdFdpZGdldENvbnRleHQoImZ1bmN0aW9uLXdpZGdldC0xOmRvd25sb2FkL3V0aWwvY29udGV4dC5qcyIpOwoKICAgICAgICAgICAgICAgIG9iai5hc3luYygiZnVuY3Rpb24td2lkZ2V0LTE6ZG93bmxvYWQvc2VydmljZS9kbGlua1NlcnZpY2UuanMiLCBmdW5jdGlvbiAoZGwpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgeXVuRGF0YSA9IG9iai5nZXRZdW5EYXRhKCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Q6IGZpbGVMaXN0LAogICAgICAgICAgICAgICAgICAgICAgICBzaGFyZV91azogeXVuRGF0YS5TSEFSRV9VSywKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVfaWQ6IHl1bkRhdGEuU0hBUkVfSUQsCiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246IHl1bkRhdGEuU0lHTiwKICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiB5dW5EYXRhLlRJTUVTVEFNUCwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcGFjayA/ICJiYXRjaCIgOiAibm9saW1pdCIKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGRsLmdldERsaW5rU2hhcmUoZGF0YSwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXREb3dubG9hZEhvbWUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhY2ssIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIG9iai5zaG93VGlwTG9hZGluZygi55Sf5oiQ6ZO+5o6l5Lit77yM6K+356iN562JLi4uIik7CgogICAgICAgICAgICBvYmoubG9hZFBsdWdpbigi572R55uY5LiL6L29IiwgImNvbS5iYWlkdS5wYW4iKTsKCiAgICAgICAgICAgIG9iai5vbk1vZHVsZVJlYWR5KCJmdW5jdGlvbi13aWRnZXQtMTpkb3dubG9hZC91dGlsL2NvbnRleHQuanMiLCBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgb2JqLmluaXRXaWRnZXRDb250ZXh0KCJmdW5jdGlvbi13aWRnZXQtMTpkb3dubG9hZC91dGlsL2NvbnRleHQuanMiKTsKCiAgICAgICAgICAgICAgICBvYmouYXN5bmMoImZ1bmN0aW9uLXdpZGdldC0xOmRvd25sb2FkL3NlcnZpY2UvZGxpbmtTZXJ2aWNlLmpzIiwgZnVuY3Rpb24gKGRsKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZExpc3QgPSBvYmoucGFyc2VGaWRMaXN0KGZpbGVMaXN0KTsKICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHBhY2sgPyAiYmF0Y2giIDogIm5vbGltaXQiOwogICAgICAgICAgICAgICAgICAgIGRsLmdldERsaW5rUGFuKEpTT04uc3RyaW5naWZ5KGZpZExpc3QpLCB0eXBlLCBjYWxsYmFjayk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmFwcGx5VHJhbnNmZXJGaWxlID0gZnVuY3Rpb24gKGZpbGVMaXN0LCBwYXRoLCBjYWxsYmFjaykgewogICAgICAgICAgICBvYmoubGlzdERpcihwYXRoLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5lcnJubyA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnRyYW5zZmVyRmlsZShmaWxlTGlzdCwgcGF0aCwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBvYmouY3JlYXRlRGlyKHBhdGgsIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZXJybm8gPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRyYW5zZmVyRmlsZShmaWxlTGlzdCwgcmVzcG9uc2UucGF0aCwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soIiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai50cmFuc2ZlckZpbGUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhdGgsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciB5dW5EYXRhID0gb2JqLmdldFl1bkRhdGEoKTsKICAgICAgICAgICAgdmFyIGZpZExpc3QgPSBvYmoucGFyc2VGaWRMaXN0KGZpbGVMaXN0KTsKICAgICAgICAgICAgdmFyIHVybCA9ICIvc2hhcmUvdHJhbnNmZXI/b25kdXA9bmV3Y29weSZhc3luYz0xJnNoYXJlaWQ9IiArIHl1bkRhdGEuU0hBUkVfSUQgKyAiJmZyb209IiArIHl1bkRhdGEuU0hBUkVfVUs7CiAgICAgICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgICAgICAgZnNpZGxpc3Q6ICJbIiArIGZpZExpc3Quam9pbigiLCIpICsgIl0iLAogICAgICAgICAgICAgICAgcGF0aDogcGF0aAogICAgICAgICAgICB9OwogICAgICAgICAgICBvYmouYWpheCh7CiAgICAgICAgICAgICAgICB0eXBlOiAicG9zdCIsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgdGltZW91dDogMWU1LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygiIik7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoubGlzdERpciA9IGZ1bmN0aW9uIChwYXRoLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgdXJsID0gIi9hcGkvbGlzdCI7CiAgICAgICAgICAgIG9iai5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJnZXQiLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICBkZXNjOiAwLAogICAgICAgICAgICAgICAgICAgIHNob3dlbXB0eTogMCwKICAgICAgICAgICAgICAgICAgICB3ZWI6IDEsCiAgICAgICAgICAgICAgICAgICAgcGFnZTogMSwKICAgICAgICAgICAgICAgICAgICBudW06IDEwLAogICAgICAgICAgICAgICAgICAgIGRpcjogcGF0aAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICB0aW1lb3V0OiAxZTUsCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCIiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5jcmVhdGVEaXIgPSBmdW5jdGlvbiAocGF0aCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIHVybCA9ICIvYXBpL2NyZWF0ZT9hPWNvbW1pdCI7CiAgICAgICAgICAgIG9iai5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJwb3N0IiwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsCiAgICAgICAgICAgICAgICAgICAgaXNkaXI6IDEsCiAgICAgICAgICAgICAgICAgICAgYmxvY2tfbGlzdDogIltdIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICB0aW1lb3V0OiAxZTUsCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCIiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUlkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWF0Y2g7CgogICAgICAgICAgICBtYXRjaCA9IGxvY2F0aW9uLmhyZWYubWF0Y2goL3NoYXJlXC9pbml0XD9zdXJsPShbYS16MC05LV9dKykvaSk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBtYXRjaCA9IGxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKC9cL3NcLzEoW2EtejAtOS1fXSspL2kpOwogICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlTGluayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5nZXRVcmwoKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0WXVuRGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCFvYmoueXVuX2RhdGEpIHsKICAgICAgICAgICAgICAgIG9iai55dW5fZGF0YSA9IHVuc2FmZVdpbmRvdy55dW5EYXRhOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvYmoueXVuX2RhdGE7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFRlbXBQYXRoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdGVtcFBhdGggPSBjb25maWcuZ2V0Q29uZmlnKCJ0ZW1wX3BhdGgiKTsKICAgICAgICAgICAgaWYgKHRlbXBQYXRoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcFBhdGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnRlbXBfcGF0aDsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zZXRUZW1wUGF0aCA9IGZ1bmN0aW9uICh0ZW1wUGF0aCkgewogICAgICAgICAgICBjb25maWcuc2V0Q29uZmlnKCJ0ZW1wX3BhdGgiLCB0ZW1wUGF0aCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEFwcElkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYXBwSWQgPSBjb25maWcuZ2V0Q29uZmlnKCJhcHBfaWQiKTsKICAgICAgICAgICAgaWYgKGFwcElkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYXBwSWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmFwcF9pZDsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zZXRBcHBJZCA9IGZ1bmN0aW9uIChhcHBJZCkgewogICAgICAgICAgICBjb25maWcuc2V0Q29uZmlnKCJhcHBfaWQiLCBhcHBJZCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRXaWRnZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIG9iai5hc3luYyhuYW1lLCBmdW5jdGlvbiAod2lkZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LnNldENvbnRleHQob2JqLmdldFN5c3RlbUNvbnRleHQoKSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCAoZXJyKSB7IH0KICAgICAgICB9OwoKICAgICAgICBvYmouYWpheCA9IGZ1bmN0aW9uIChvcHRpb24pIHsKICAgICAgICAgICAgb2JqLmdldEpxdWVyeSgpLmFqYXgob3B0aW9uKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U3lzdGVtQ29udGV4dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5yZXF1aXJlKCJzeXN0ZW0tY29yZTpjb250ZXh0L2NvbnRleHQuanMiKS5pbnN0YW5jZUZvclN5c3RlbTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0SnF1ZXJ5ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLnJlcXVpcmUoImJhc2U6d2lkZ2V0L2xpYnMvanF1ZXJ5cGFja2V0LmpzIik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlcXVpcmUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gdW5zYWZlV2luZG93LnJlcXVpcmUobmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmFzeW5jID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5yZXF1aXJlLmFzeW5jKG5hbWUsIGNhbGxiYWNrKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwX3dlaXl1biIsIFsibWFuaWZlc3QiLCAicm91dGVyIiwgIm9wdGlvbiIsICJsb2dnZXIiLCAidW5zYWZlV2luZG93IiwgImNvbnN0YW50IiwgInNldHRpbmciLCAic2hhcmVMb2ciLCAiJCJdLCBmdW5jdGlvbiAobWFuaWZlc3QsIHJvdXRlciwgb3B0aW9uLCBsb2dnZXIsIHVuc2FmZVdpbmRvdywgY29uc3RhbnQsIHNldHRpbmcsIHNoYXJlTG9nLCAkKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgbW9kdWxlczoge30sCiAgICAgICAgICAgIHdlYnBhY2tfcmVxdWlyZTogbnVsbCwKICAgICAgICAgICAgdmVyaWZ5X3BhZ2U6IHsKICAgICAgICAgICAgICAgIHNldFB3ZDogbnVsbCwKICAgICAgICAgICAgICAgIHNoYXJlX3B3ZDogbnVsbCwKICAgICAgICAgICAgICAgIHN1Ym1pdF9wd2Q6IG51bGwKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrIikgPiAwKSB7CiAgICAgICAgICAgICAgICBvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LndlaXl1bl9wYWdlX2hvbWUpICYmIG9iai5pbml0SG9tZVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHVybC5pbmRleE9mKCJzaGFyZS53ZWl5dW4uY29tIikgPiAwKSB7CiAgICAgICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRIb21lUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLmluaXRXZWJwYWNrUmVxdWlyZSgpOwoKICAgICAgICAgICAgc2V0SW50ZXJ2YWwob2JqLmluaXRIb21lUGFnZUVsZW1lbnQsIDEwMDApOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0SG9tZVBhZ2VFbGVtZW50ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPGRpdiBjbGFzcz0iYWN0aW9uLWl0ZW0gbW9kLWFjdGlvbi13cmFwLWxpbmsiPjxkaXYgY2xhc3M9ImFjdGlvbi1pdGVtLWNvbiI+PGkgY2xhc3M9Imljb24gaWNvbi1saW5rIj48L2k+PHNwYW4gY2xhc3M9ImFjdC10eHQiPuaYvuekuumTvuaOpTwvc3Bhbj48L2Rpdj48L2Rpdj4nOwogICAgICAgICAgICAkKCIubW9kLWFjdGlvbi13cmFwLW1lbnU6bm90KC5uZC1zaG93LWxpbmstYWxyZWFkeSkiKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuZmluZCgiLmljb24tZG93bmxvYWQiKSkgewogICAgICAgICAgICAgICAgICAgICR0aGlzLmFkZENsYXNzKCJuZC1zaG93LWxpbmstYWxyZWFkeSIpOwoKICAgICAgICAgICAgICAgICAgICAkdGhpcy5wcmVwZW5kKHRlbXBsYXRlKTsKICAgICAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCIubW9kLWFjdGlvbi13cmFwLWxpbmsiKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0hvbWVEb3dubG9hZCgpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5pbml0V2VicGFja1JlcXVpcmUoKTsKCiAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LndlaXl1bl9wYWdlX3ZlcmlmeSkpIHsKICAgICAgICAgICAgICAgIG9iai5yZWdpc3RlclN0b3JlU2hhcmVQd2QoKTsKCiAgICAgICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvYmouYXV0b1BhZGRpbmdTaGFyZVB3ZCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LndlaXl1bl9wYWdlX3NoYXJlKSAmJiB1bnNhZmVXaW5kb3cuc3luY0RhdGEuc2hhcmVJbmZvLm5vdGVfbGlzdC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgb2JqLmluaXRTaGFyZVBhZ2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0U2hhcmVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoJCgiLm1vZC1hY3Rpb24td3JhcC1saW5rIikubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgY2xhc3M9Im1vZC1hY3Rpb24td3JhcCBtb2QtYWN0aW9uLXdyYXAtbWVudSBtb2QtYWN0aW9uLXdyYXAtbGluayBjbGVhcmZpeCI+PGRpdiBjbGFzcz0iYWN0aW9uLWl0ZW0iPjxkaXYgY2xhc3M9ImFjdGlvbi1pdGVtLWNvbiI+PGkgY2xhc3M9Imljb24gaWNvbi1saW5rIj48L2k+PHNwYW4gY2xhc3M9ImFjdC10eHQiPuaYvuekuumTvuaOpTwvc3Bhbj48L2Rpdj48L2Rpdj48L2Rpdj4nOwogICAgICAgICAgICAgICAgJCgiLm1vZC1hY3Rpb24td3JhcC1jb2RlIikuYWZ0ZXIoaHRtbCk7CgogICAgICAgICAgICAgICAgJCgiLm1vZC1hY3Rpb24td3JhcC1saW5rIikuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgIG9iai5zaG93U2hhcmVEb3dubG9hZCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2V0VGltZW91dChvYmouaW5pdFNoYXJlUGFnZSwgNTAwKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgdmFyICRwd2QgPSAkKCIuY2FyZC1pbm5lciAuaW5wdXQtdHh0Iik7CiAgICAgICAgICAgIHZhciAkYnV0dG9uID0gJCgiLmNhcmQtaW5uZXIgLmJ0bi1tYWluIik7CiAgICAgICAgICAgIGlmIChzaGFyZUlkICYmICRwd2QubGVuZ3RoICYmICRidXR0b24ubGVuZ3RoKSB7CgogICAgICAgICAgICAgICAgLy8g5pi+56S65YiG5Lqr5a+G56CBCiAgICAgICAgICAgICAgICAkcHdkLmF0dHIoInR5cGUiLCAidGV4dCIpOwoKICAgICAgICAgICAgICAgIC8vIOiuvue9ruWIhuS6q+WvhueggQogICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnNldFB3ZCA9IGZ1bmN0aW9uIChwd2QpIHsKICAgICAgICAgICAgICAgICAgICAkcHdkLnZhbChwd2QpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyDph43pgKDmjInpkq4KICAgICAgICAgICAgICAgIHZhciAkaXRlbUJ1dHRvbiA9ICRidXR0b24ucGFyZW50KCk7CiAgICAgICAgICAgICAgICAkaXRlbUJ1dHRvbi5zYWZlSHRtbCgkYnV0dG9uLnByb3AoIm91dGVySFRNTCIpKTsKICAgICAgICAgICAgICAgICRidXR0b24gPSAkaXRlbUJ1dHRvbi5maW5kKCIuYnRuLW1haW4iKTsKCiAgICAgICAgICAgICAgICAvLyDmjInpkq7kuovku7YKICAgICAgICAgICAgICAgICRidXR0b24ub24oImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG9iai5nZXRTdG9yZSgpICYmIG9iai5nZXRTdG9yZSgpLmRpc3BhdGNoKCJzaGFyZUluZm8vbG9hZFNoYXJlSW5mb1dpdGhvdXRMb2dpbiIsICRwd2QudmFsKCkpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy8g5o+Q5Lqk5a+G56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc3VibWl0X3B3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkYnV0dG9uLmNsaWNrKCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50KGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouYXV0b1BhZGRpbmdTaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHNoYXJlSWQgPSBvYmouZ2V0U2hhcmVJZCgpOwogICAgICAgICAgICBzaGFyZUxvZy5nZXRTaGFyZUxvZyhjb25zdGFudC5zb3VyY2Uud2VpeXVuLCBzaGFyZUlkLCBmdW5jdGlvbiAocmVjb3JkKSB7CiAgICAgICAgICAgICAgICBpZiAocmVjb3JkIGluc3RhbmNlb2YgT2JqZWN0ICYmIHJlY29yZC5zaGFyZV9wd2QpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSByZWNvcmQuc2hhcmVfcHdkOwogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zaGFyZV9wd2QgPSBzaGFyZVB3ZDsKICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2V0UHdkKHNoYXJlUHdkKTsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLnNob3dOb3RpZnlTdWNjZXNzKCkgJiYgb2JqLnNob3dUaXBTdWNjZXNzKCJbIiArIG1hbmlmZXN0LmdldFRpdGxlKCkgKyAiXSDlm57loavlr4bnoIHmiJDlip8iKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQud2VpeXVuX2F1dG9fanVtcCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QgJiYgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLnNob3dOb3RpZnlGYWlsKCkgJiYgb2JqLnNob3dUaXBFcnJvcigiWyIgKyBtYW5pZmVzdC5nZXRUaXRsZSgpICsgIl0g5rKh5pyJ5a+G56CB6K6w5b2VIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlclN0b3JlU2hhcmVQd2QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5hZGRSZXNwb25zZUludGVyY2VwdG9yKGZ1bmN0aW9uIChyZXF1ZXN0LCByZXNwb25zZSkgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSByZXF1ZXN0LnJlc3BvbnNlVVJMOwogICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RVcmwuaW5kZXhPZigid2VpeXVuU2hhcmVOb0xvZ2luL1dlaXl1blNoYXJlVmlldyIpID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEucnNwX2hlYWRlci5yZXRjb2RlID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzcG9uc2UuY29uZmlnLmRhdGEubWF0Y2goL1xcInNoYXJlX3B3ZFxcIjpcXCIoW1x3XSspXFwiLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBtYXRjaCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSBtYXRjaFsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXJlUHdkID09IG9iai52ZXJpZnlfcGFnZS5zaGFyZV9wd2QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBjaGFuZ2UiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlSWQgPSBvYmouZ2V0U2hhcmVJZCgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVMaW5rID0gb2JqLmdldFNoYXJlTGluaygpOwogICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUxvZy5hZGRTaGFyZUxvZyhjb25zdGFudC5zb3VyY2Uud2VpeXVuLCBzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVMaW5rKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIGVycm9yIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouYWRkUmVzcG9uc2VJbnRlcmNlcHRvciA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgc3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZS5yZXF1ZXN0LCByZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICAgICAgICB9OwogICAgICAgICAgICBvYmouZ2V0QXhpb3MoKSAmJiBvYmouZ2V0QXhpb3MoKS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHN1Y2Nlc3MsIGVycm9yKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0JveCA9IGZ1bmN0aW9uIChib2R5KSB7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPSJtb2RhbCBtb2RhbC1zaG93IiBpZD0iZmlsZS1tb2RhbCI+PGIgY2xhc3M9Im1vZGFsLW1hc2siPjwvYj48ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLTY4MCI+PGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nLWhkIGNsZWFyZml4Ij48aDQgY2xhc3M9Im1vZGFsLWRpYWxvZy10aXRsZSI+5paH5Lu25LiL6L29PC9oND48YnV0dG9uIGNsYXNzPSJidG4taWNvbiBpY29uIGljb24tcG9wLWNsb3NlIj48L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ctYmQgbW9kYWwtYm9keSI+PC9kaXY+PC9kaXY+PC9kaXY+JzsKICAgICAgICAgICAgaWYgKCQoIiNmaWxlLW1vZGFsIikubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgICQoImJvZHkiKS5hcHBlbmQodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgJCgiI2ZpbGUtbW9kYWwgLmljb24tcG9wLWNsb3NlIikub24oImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoIiNmaWxlLW1vZGFsIikuaGlkZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJCgiI2ZpbGUtbW9kYWwiKS5zaG93KCk7CiAgICAgICAgICAgICQoIiNmaWxlLW1vZGFsIC5tb2RhbC1ib2R5Iikuc2FmZUh0bWwoYm9keSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dTaGFyZURvd25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZURhdGEgPSBvYmouZ2V0U2VsZWN0ZWRTaGFyZUZpbGVEYXRhKCk7CiAgICAgICAgICAgIGlmIChmaWxlRGF0YS5ub2RlX2xpc3QubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmouc2hvd1RpcEVycm9yKCLor7fpgInmi6noh7PlsJHkuIDkuKrmlofku7Yv5paH5Lu25aS5Iik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG9iai5yZXF1ZXN0U2hhcmVEb3dubG9hZChmaWxlRGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIG9iai5zaG93U2hhcmVEb3dubG9hZEJveChmaWxlRGF0YSwgcmVzcG9uc2UpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIG9iai5zaG93VGlwRXJyb3IocmVzcG9uc2UubXNnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dIb21lRG93bmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBmaWxlRGF0YSA9IG9iai5nZXRTZWxlY3RlZFNoYXJlRmlsZURhdGEoKTsKICAgICAgICAgICAgaWYgKGZpbGVEYXRhLm5vZGVfbGlzdC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5zaG93VGlwRXJyb3IoIuivt+mAieaLqeiHs+WwkeS4gOS4quaWh+S7ti/mlofku7blpLkiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb2JqLnJlcXVlc3RIb21lRG93bmxvYWQoZmlsZURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBvYmouc2hvd1NoYXJlRG93bmxvYWRCb3goZmlsZURhdGEsIHJlc3BvbnNlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBvYmouc2hvd1RpcEVycm9yKHJlc3BvbnNlLm1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5wYXJzZURvd25GaWxlID0gZnVuY3Rpb24gKGZpbGVEYXRhKSB7CiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9ICIiLCBwYWNrTmFtZSA9ICIiOwogICAgICAgICAgICBpZiAoZmlsZURhdGEuZGlyX2xpc3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgaWYgKGZpbGVEYXRhLmZpbGVfbGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgcGFja05hbWUgPSBmaWxlRGF0YS5kaXJfbGlzdFswXS5maWxlbmFtZSArICIg562JIiArIChmaWxlRGF0YS5kaXJfbGlzdC5sZW5ndGggKyBmaWxlRGF0YS5maWxlX2xpc3QubGVuZ3RoKSArICLkuKrmlofku7YiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcGFja05hbWUgPSBmaWxlRGF0YS5kaXJfbGlzdFswXS5maWxlbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gcGFja05hbWUgKyAiLnppcCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoZmlsZURhdGEuZmlsZV9saXN0Lmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICBwYWNrTmFtZSA9IGZpbGVEYXRhLm5vZGVfbGlzdFswXS5nZXROYW1lTm9FeHQoKSArICIg562JIiArIGZpbGVEYXRhLmZpbGVfbGlzdC5sZW5ndGggKyAi5Liq5paH5Lu2IjsKICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IHBhY2tOYW1lICsgIi56aXAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBmaWxlRGF0YS5maWxlX2xpc3RbMF0uZmlsZW5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGZpbGVfbmFtZTogZmlsZU5hbWUsCiAgICAgICAgICAgICAgICBwYWNrX25hbWU6IHBhY2tOYW1lCiAgICAgICAgICAgIH07CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlcXVlc3RIb21lRG93bmxvYWQgPSBmdW5jdGlvbiAoZmlsZURhdGEpIHsKICAgICAgICAgICAgdmFyIGJhc2VSZXF1ZXN0ID0gb2JqLmdldEJhc2VSZXF1ZXN0KCk7CiAgICAgICAgICAgIHZhciBkb3duRmlsZSA9IG9iai5wYXJzZURvd25GaWxlKGZpbGVEYXRhKTsKICAgICAgICAgICAgaWYgKGJhc2VSZXF1ZXN0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZG93bkZpbGUucGFja19uYW1lID8gYmFzZVJlcXVlc3QuZ2V0UGFja1VybChmaWxlRGF0YS5ub2RlX2xpc3QsIHt9KSA6IGJhc2VSZXF1ZXN0LmdldFNpbmdsZVVybChmaWxlRGF0YS5ub2RlX2xpc3QsIHt9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHsgcmV0Y29kZTogLTEsIG1zZzogIueUn+aIkOmTvuaOpeWksei0pSIgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5yZXF1ZXN0U2hhcmVEb3dubG9hZCA9IGZ1bmN0aW9uIChmaWxlRGF0YSkgewogICAgICAgICAgICB2YXIgc2hhcmVGaWxlID0gb2JqLmdldFNoYXJlRmlsZSgpLCBkb3dubG9hZFJlcXVlc3QgPSBvYmouZ2V0RG93bmxvYWRSZXF1ZXN0KCk7CiAgICAgICAgICAgIHZhciBkb3duRmlsZSA9IG9iai5wYXJzZURvd25GaWxlKGZpbGVEYXRhKTsKICAgICAgICAgICAgaWYgKHNoYXJlRmlsZSAmJiBkb3dubG9hZFJlcXVlc3QpIHsKICAgICAgICAgICAgICAgIHZhciBkZXRhaWwgPSB7CiAgICAgICAgICAgICAgICAgICAgc2hhcmVLZXk6IHNoYXJlRmlsZS5zaGFyZUtleSwKICAgICAgICAgICAgICAgICAgICBzaGFyZVB3ZDogc2hhcmVGaWxlLnNoYXJlUHdkLAogICAgICAgICAgICAgICAgICAgIGZpbGVPd25lcjogc2hhcmVGaWxlLnNoYXJlT3duZXIsCiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRUeXBlOiAwLAogICAgICAgICAgICAgICAgICAgIHBhY2tOYW1lOiBkb3duRmlsZS5wYWNrX25hbWUsCiAgICAgICAgICAgICAgICAgICAgcGRpcktleTogIiIsCiAgICAgICAgICAgICAgICAgICAgZGlyTGlzdDogZmlsZURhdGEuZGlyX2xpc3QsCiAgICAgICAgICAgICAgICAgICAgZmlsZUxpc3Q6IGZpbGVEYXRhLmZpbGVfbGlzdAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBkb3duRmlsZS5wYWNrX25hbWUgPyBkb3dubG9hZFJlcXVlc3Quc2hhcmVQYXJ0RG93bmxvYWQoZGV0YWlsKSA6IGRvd25sb2FkUmVxdWVzdC5zaGFyZUJhdGNoRG93bmxvYWQoZGV0YWlsKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHsgcmV0Y29kZTogLTEsIG1zZzogIueUn+aIkOmTvuaOpeWksei0pSIgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zaG93U2hhcmVEb3dubG9hZEJveCA9IGZ1bmN0aW9uIChmaWxlRGF0YSwgcmVzcG9uc2UpIHsKICAgICAgICAgICAgdmFyIGRvd25GaWxlID0gb2JqLnBhcnNlRG93bkZpbGUoZmlsZURhdGEpOwogICAgICAgICAgICBpZiAocmVzcG9uc2UuZG93bmxvYWRfdXJsKSB7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGRvd25GaWxlLCByZXNwb25zZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGRvd25GaWxlLCByZXNwb25zZS5maWxlX2xpc3RbMF0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IHN0eWxlPSJwYWRkaW5nOiAyMHB4OyBvdmVyZmxvdy15OiBhdXRvOyI+JzsKICAgICAgICAgICAgdmFyIHJvd1N0eWxlID0gIm1hcmdpbjoxMHB4IDBweDtvdmVyZmxvdzpoaWRkZW47IHdoaXRlLXNwYWNlOm5vd3JhcDsgdGV4dC1vdmVyZmxvdzplbGxpcHNpczsiOwogICAgICAgICAgICBodG1sICs9ICc8cD4nICsgZG93bkZpbGUuZmlsZV9uYW1lICsgJzwvcD4nOwogICAgICAgICAgICBodG1sICs9ICc8cCBzdHlsZT0iJyArIHJvd1N0eWxlICsgJyI+PGEgdGl0bGU9IicgKyBkb3duRmlsZS5kb3dubG9hZF91cmwgKyAnIiBocmVmPSInICsgZG93bkZpbGUuZG93bmxvYWRfdXJsICsgJyIgc3R5bGU9ImNvbG9yOiBibHVlOyI+JyArIGRvd25GaWxlLmRvd25sb2FkX3VybCArICc8L2E+PC9wPic7CiAgICAgICAgICAgIGh0bWwgKz0gJzxkaXY+JzsKICAgICAgICAgICAgb2JqLnNob3dCb3goaHRtbCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXBTdWNjZXNzID0gZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICBvYmouZ2V0TW9kYWwoKSAmJiBvYmouZ2V0TW9kYWwoKS5zdWNjZXNzKG1zZyk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXBFcnJvciA9IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgb2JqLmdldE1vZGFsKCkgJiYgb2JqLmdldE1vZGFsKCkuZXJyb3IobXNnKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2hhcmVJZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHVybCA9IG9iai5nZXRTaGFyZUxpbmsoKTsKICAgICAgICAgICAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKC9zaGFyZS53ZWl5dW4uY29tXC8oWzAtOWEtel0rKS9pKTsKICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBudWxsOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUxpbmsgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmlzSG9tZVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChyb3V0ZXIuZ2V0VXJsKCkuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrIikgPj0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2VsZWN0ZWRTaGFyZUZpbGVEYXRhID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZURhdGEgPSB7CiAgICAgICAgICAgICAgICBub2RlX2xpc3Q6IG9iai5nZXRTZWxlY3RlZEZpbGVOb2RlcygpLAogICAgICAgICAgICAgICAgZGlyX2xpc3Q6IFtdLAogICAgICAgICAgICAgICAgZmlsZV9saXN0OiBbXQogICAgICAgICAgICB9OwogICAgICAgICAgICBmaWxlRGF0YS5ub2RlX2xpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0U2l6ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiBpdGVtLmdldElkKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHBkaXJfa2V5OiBpdGVtLmdldFBkaXJLZXkoKSwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IGl0ZW0uZ2V0TmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX3NpemU6IGl0ZW0uZ2V0U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pc0RpcigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVEYXRhLmRpcl9saXN0LnB1c2goZmlsZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlRGF0YS5maWxlX2xpc3QucHVzaChmaWxlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZURhdGE7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNlbGVjdGVkRmlsZU5vZGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZU5vZGVzID0gW107CiAgICAgICAgICAgIGlmIChvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICBmaWxlTm9kZXMgPSBvYmouZ2V0SG9tZUZpbGVOb2RlcygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHNoYXJlRmlsZSA9IG9iai5nZXRTaGFyZUZpbGUoKTsKICAgICAgICAgICAgICAgIGlmIChzaGFyZUZpbGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVGaWxlLmlzU2luZ2xlRmlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlTm9kZXMgPSBzaGFyZUZpbGUuY2hpbGROb2RlczsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHNoYXJlRmlsZS5zZWxlY3RlZE5vZGVzOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmlsZU5vZGVzOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRIb21lRmlsZU5vZGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZU5vZGVzID0gW107CiAgICAgICAgICAgIHZhciBzdG9yZSA9IG9iai5nZXRTdG9yZSgpOwogICAgICAgICAgICB2YXIgdXJsID0gbG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5pc1NlbGVjdGVkKCkgPyAxIDogMDsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHN0b3JlIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoIndlaXl1bi5jb20vZGlzay9kb2MiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gc3RvcmUuc3RhdGUuZG9jLmN1ckNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3Bob3RvIikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLnBob3RvLmN1ckNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3ZpZGVvIikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLnZpZGVvLmNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL2F1aWRvIikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLmF1ZGlvLmNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3RpbWUiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gc3RvcmUuc3RhdGUudGltZS5yb290Tm9kZS5nZXRLaWROb2RlcygpLmZpbHRlcihmaWx0ZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAodXJsLmluZGV4T2YoIndlaXl1bi5jb20vZGlzay9zaGFyZWRpciIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTm9kZXMgPSBzdG9yZS5zdGF0ZS5zaGFyZWRpci5jdXJOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3JlY2VudCIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIga2lkRmVlZHMgPSBzdG9yZS5zdGF0ZS5yZWNlbnQucm9vdE5vZGUuZ2V0S2lkRmVlZHMoKTsKICAgICAgICAgICAgICAgICAgICBraWRGZWVkcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWVkLmlzU2VsZWN0ZWQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gZmlsZU5vZGVzLmNvbmNhdChmZWVkLmdldEtpZE5vZGVzKCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3JlY3ljbGUiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gc3RvcmUuc3RhdGUucmVjeWNsZS5yb290Tm9kZS5nZXRLaWROb2RlcygpLmZpbHRlcihmaWx0ZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RvcmUuc3RhdGUuZGlzaykgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLmRpc2suY3VyTm9kZS5nZXRLaWROb2RlcygpLmZpbHRlcihmaWx0ZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmaWxlTm9kZXM7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlRmlsZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHN0b3JlID0gb2JqLmdldFN0b3JlKCk7CiAgICAgICAgICAgIGlmIChzdG9yZSBpbnN0YW5jZW9mIE9iamVjdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLnN0YXRlLnNoYXJlZmlsZS5zaGFyZUZpbGU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QmFzZVJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoubWF0Y2hXZWJwYWNrTW9kdWxlKCJiYXNlX3JlcXVlc3QiLCBmdW5jdGlvbiAobW9kdWxlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS5nZXRTaW5nbGVVcmwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RG93bmxvYWRSZXF1ZXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hdGNoV2VicGFja01vZHVsZSgiZG93bmxvYWRfcmVxdWVzdCIsIGZ1bmN0aW9uIChtb2R1bGUsIG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChtb2R1bGUgJiYgbW9kdWxlLkRvd25sb2FkUmVxdWVzdCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbW9kdWxlLkRvd25sb2FkUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QXhpb3MgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoubWF0Y2hXZWJwYWNrTW9kdWxlKCJheGlvcyIsIGZ1bmN0aW9uIChtb2R1bGUsIG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChtb2R1bGUgJiYgbW9kdWxlLkF4aW9zKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE1vZGFsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hdGNoV2VicGFja01vZHVsZSgibW9kYWwiLCBmdW5jdGlvbiAobW9kdWxlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS5jb25maXJtICYmIG1vZHVsZS5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFN0b3JlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hdGNoV2VicGFja01vZHVsZSgic3RvcmUiLCBmdW5jdGlvbiAobW9kdWxlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS5kZWZhdWx0ICYmIG1vZHVsZS5kZWZhdWx0Ll9tb2R1bGVzTmFtZXNwYWNlTWFwKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZS5kZWZhdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoubWF0Y2hXZWJwYWNrTW9kdWxlID0gZnVuY3Rpb24gKG5hbWUsIG1hdGNoRnVuYykgewogICAgICAgICAgICBpZiAoIW9iai5tb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLndlYnBhY2tfcmVxdWlyZS5jKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbWF0Y2hGdW5jKG9iai53ZWJwYWNrX3JlcXVpcmUoa2V5KSwga2V5KTsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm1vZHVsZXNbbmFtZV0gPSBtYXRjaDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iai5tb2R1bGVzW25hbWVdOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0V2VicGFja1JlcXVpcmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBpbmplY3ROYW1lID0gIl9uZF9pbmplY3RfIjsKICAgICAgICAgICAgdmFyIG1vcmVNb2R1bGVzID0ge307CiAgICAgICAgICAgIG1vcmVNb2R1bGVzW2luamVjdE5hbWVdID0gZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgICAgICAgICAgICAgb2JqLndlYnBhY2tfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX187CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHVuc2FmZVdpbmRvdy53ZWJwYWNrSnNvbnAoW2luamVjdE5hbWVdLCBtb3JlTW9kdWxlcywgW2luamVjdE5hbWVdKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwX2xhbnpvdXMiLCBbIm1hbmlmZXN0IiwgInJvdXRlciIsICJvcHRpb24iLCAibG9nZ2VyIiwgInVuc2FmZVdpbmRvdyIsICJjb25zdGFudCIsICJzZXR0aW5nIiwgInNoYXJlTG9nIiwgIiQiXSwgZnVuY3Rpb24gKG1hbmlmZXN0LCByb3V0ZXIsIG9wdGlvbiwgbG9nZ2VyLCB1bnNhZmVXaW5kb3csIGNvbnN0YW50LCBzZXR0aW5nLCBzaGFyZUxvZywgJCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIHZlcmlmeV9wYWdlOiB7CiAgICAgICAgICAgICAgICBzZXRQd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBzaGFyZV9wd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBzdWJtaXRfcHdkOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoucnVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoImxhbnpvdXMuY29tIikgPiAwIHx8IHVybC5pbmRleE9mKCJsYW56b3V4LmNvbSIpID4gMCkgewogICAgICAgICAgICAgICAgb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5sYW56b3VzX3BhZ2VfdmVyaWZ5KSAmJiBvYmouaW5pdFZlcmlmeVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRWZXJpZnlQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmoucmVnaXN0ZXJTdG9yZVNoYXJlUHdkKCk7CgogICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG9iai5hdXRvUGFkZGluZ1NoYXJlUHdkKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIHNoYXJlSWQgPSBvYmouZ2V0U2hhcmVJZCgpOwogICAgICAgICAgICB2YXIgJHB3ZCA9ICQoIiNwd2QiKTsKICAgICAgICAgICAgaWYgKHNoYXJlSWQgJiYgJHB3ZC5sZW5ndGgpIHsKCiAgICAgICAgICAgICAgICAvLyDorr7nva7liIbkuqvlr4bnoIEKICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zZXRQd2QgPSBmdW5jdGlvbiAocHdkKSB7CiAgICAgICAgICAgICAgICAgICAgJHB3ZC52YWwocHdkKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLy8g5o+Q5Lqk5a+G56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc3VibWl0X3B3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKCIjc3ViIikuY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICB1bnNhZmVXaW5kb3cuZG93bl9wICYmIHVuc2FmZVdpbmRvdy5kb3duX3AoKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQoY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5hdXRvUGFkZGluZ1NoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgIHNoYXJlTG9nLmdldFNoYXJlTG9nKGNvbnN0YW50LnNvdXJjZS5sYW56b3VzLCBzaGFyZUlkLCBmdW5jdGlvbiAocmVjb3JkKSB7CiAgICAgICAgICAgICAgICBpZiAocmVjb3JkIGluc3RhbmNlb2YgT2JqZWN0ICYmIHJlY29yZC5zaGFyZV9wd2QpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSByZWNvcmQuc2hhcmVfcHdkOwogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zaGFyZV9wd2QgPSBzaGFyZVB3ZDsKICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2V0UHdkKHNoYXJlUHdkKTsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLnNob3dOb3RpZnlTdWNjZXNzKCkgJiYgb2JqLnNob3dUaXAoMSwgIlsiICsgbWFuaWZlc3QuZ2V0VGl0bGUoKSArICJdIOWbnuWhq+WvhueggeaIkOWKnyIsIDIwMDApOwoKICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5sYW56b3VzX2F1dG9fanVtcCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QgJiYgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLnNob3dOb3RpZnlGYWlsKCkgJiYgb2JqLnNob3dUaXAoMCwgIlsiICsgbWFuaWZlc3QuZ2V0VGl0bGUoKSArICJdIOayoeacieWvhueggeiusOW9lSIsIDIwMDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVnaXN0ZXJTdG9yZVNoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB1bnNhZmVXaW5kb3cuJChkb2N1bWVudCkuYWpheENvbXBsZXRlKGZ1bmN0aW9uIChldmVudCwgeGhyLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBvcHRpb25zLmRhdGEubWF0Y2goL3B3ZD0oXHcrKS8pOwogICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICAgIG1hdGNoID0gb3B0aW9ucy5kYXRhLm1hdGNoKC9wPShcdyspLyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBub3QgbWF0Y2giKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHNoYXJlUHdkID0gbWF0Y2hbMV07CiAgICAgICAgICAgICAgICBpZiAoc2hhcmVQd2QgPT0gb2JqLnZlcmlmeV9wYWdlLnNoYXJlX3B3ZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBjaGFuZ2UiKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgICAgICB2YXIgc2hhcmVMaW5rID0gb2JqLmdldFNoYXJlTGluaygpOwogICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gb2JqLnBhcnNlSnNvbih4aHIucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnp0ID09IDEgJiYgc2hhcmVQd2QpIHsKICAgICAgICAgICAgICAgICAgICBzaGFyZUxvZy5hZGRTaGFyZUxvZyhjb25zdGFudC5zb3VyY2UubGFuem91cywgc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlTGluayk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBlcnJvciIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd1RpcCA9IGZ1bmN0aW9uIChjb2RlLCBtc2csIHRpbWVvdXQpIHsKICAgICAgICAgICAgaWYgKHVuc2FmZVdpbmRvdy5zbXMpIHsKICAgICAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5zbXMobXNnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvcjsKICAgICAgICAgICAgICAgIGlmICgkKCIub2ZmIikubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSAiI3B3ZGVyciI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9ICIjaW5mbyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY29kZSkgewogICAgICAgICAgICAgICAgICAgICQoc2VsZWN0b3IpLnNhZmVIdG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IGdyZWVuOyI+JyArIG1zZyArICc8L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkKHNlbGVjdG9yKS5zYWZlSHRtbCgnPHNwYW4gc3R5bGU9ImNvbG9yOiByZWQ7Ij4nICsgbXNnICsgJzwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoc2VsZWN0b3IpLnRleHQoIiIpOwogICAgICAgICAgICAgICAgfSwgdGltZW91dCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2hhcmVJZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHVybCA9IG9iai5nZXRTaGFyZUxpbmsoKTsKICAgICAgICAgICAgdmFyIG1hdGNoOwoKICAgICAgICAgICAgbWF0Y2ggPSAvW2xhbnpvdXN8bGFuem91eF0uY29tXC8oW1x3XSspXC8oW2EtejAtOS1fXXs0LH0pL2dpLmV4ZWModXJsKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV0gKyAiLyIgKyBtYXRjaFsyXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbWF0Y2ggPSAvW2xhbnpvdXN8bGFuem91eF0uY29tXC8oW2EtejAtOS1fXXs0LH0pL2dpLmV4ZWModXJsKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUxpbmsgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnBhcnNlSnNvbiA9IGZ1bmN0aW9uIChqc29uU3RyKSB7CiAgICAgICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZiAoanNvblN0cikgewogICAgICAgICAgICAgICAgICAgIGpzb25PYmplY3QgPSBKU09OLnBhcnNlKGpzb25TdHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlKSB7IH0KICAgICAgICAgICAgcmV0dXJuIGpzb25PYmplY3Q7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImFwcF8xODkiLCBbIm1hbmlmZXN0IiwgInJvdXRlciIsICJvcHRpb24iLCAibG9nZ2VyIiwgInVuc2FmZVdpbmRvdyIsICJjb25zdGFudCIsICJzZXR0aW5nIiwgInNoYXJlTG9nIiwgIiQiXSwgZnVuY3Rpb24gKG1hbmlmZXN0LCByb3V0ZXIsIG9wdGlvbiwgbG9nZ2VyLCB1bnNhZmVXaW5kb3csIGNvbnN0YW50LCBzZXR0aW5nLCBzaGFyZUxvZywgJCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIHZlcmlmeV9wYWdlOiB7CiAgICAgICAgICAgICAgICBzaGFyZV9wd2Q6IG51bGwKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigiY2xvdWQuMTg5LmNuL3QiKSA+IDApIHsKICAgICAgICAgICAgICAgIG9iai5pbml0U2hhcmVQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigiY2xvdWQuMTg5LmNuL21haW4iKSA+IDAgfHwgdXJsLmluZGV4T2YoImNsb3VkLjE4OS5jbi9waG90byIpID4gMCkgewogICAgICAgICAgICAgICAgb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC50eTE4OV9wYWdlX2hvbWUpICYmIG9iai5pbml0SG9tZVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRIb21lUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCQoIiNKX0NyZWF0ZSIpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgJCgiI0pfQ3JlYXRlIikuYWZ0ZXIoJzxhIGNsYXNzPSJidG4gYnRuLXNob3ctbGluayIgc3R5bGU9ImJhY2tncm91bmQ6ICMyYjg5ZWE7IGNvbG9yOiAjZmZmOyBjdXJzb3I6IHBvaW50ZXIiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgICAgICQoIi5idG4tc2hvdy1saW5rIikub24oImNsaWNrIiwgb2JqLnNob3dEb3dubG9hZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoJCgiLkpDX1JlZnJlc2giKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICQoIi5KQ19SZWZyZXNoIikuYWZ0ZXIoJzxhIGNsYXNzPSJidG4gYnRuLXNob3ctbGluayIgc3R5bGU9ImJhY2tncm91bmQ6ICMyYjg5ZWE7IGNvbG9yOiAjZmZmOyBjdXJzb3I6IHBvaW50ZXIiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgICAgICQoIi5idG4tc2hvdy1saW5rIikub24oImNsaWNrIiwgb2JqLnNob3dEb3dubG9hZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG9iai5pbml0SG9tZVBhZ2UsIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFNoYXJlUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCQoIi5jb2RlLXBhbmVsIikubGVuZ3RoICYmIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQudHkxODlfcGFnZV92ZXJpZnkpKSB7CiAgICAgICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQudHkxODlfcGFnZV9zaGFyZSkpIHsKICAgICAgICAgICAgICAgIG9iai5pbml0RG93bmxvYWRQYWdlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5yZWdpc3RlclN0b3JlU2hhcmVQd2QoKTsKCiAgICAgICAgICAgIG9iai5hdXRvUGFkZGluZ1NoYXJlUHdkKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlZ2lzdGVyU3RvcmVTaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdW5zYWZlV2luZG93LiQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZShmdW5jdGlvbiAoZXZlbnQsIHhociwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlSlNPTjsKICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy51cmwuaW5kZXhPZigibGlzdFNoYXJlRGlyLmFjdGlvbiIpID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIE9iamVjdCAmJiByZXNwb25zZS5kaWdlc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gb3B0aW9ucy51cmwubWF0Y2goL2FjY2Vzc0NvZGU9KFx3KykvKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgbm90IG1hdGNoIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkID0gbWF0Y2hbMV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBub3QgbWF0Y2giKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLnVybC5pbmRleE9mKCJzaGFyZUZpbGVWZXJpZnlQYXNzLmFjdGlvbiIpID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIE9iamVjdCAmJiByZXNwb25zZS5zaGFyZUlkICYmIHJlc3BvbnNlLmFjY2Vzc0NvZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVQd2QgPSByZXNwb25zZS5hY2Nlc3NDb2RlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgbm90IG1hdGNoIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJub3QgcHdkIHJlcXVlc3QiKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc2hhcmVQd2QgPT0gb2JqLnZlcmlmeV9wYWdlLnNoYXJlX3B3ZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBjaGFuZ2UiKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgICAgICB2YXIgc2hhcmVMaW5rID0gb2JqLmdldFNoYXJlTGluaygpOwogICAgICAgICAgICAgICAgc2hhcmVMb2cuYWRkU2hhcmVMb2coY29uc3RhbnQuc291cmNlLnR5MTg5LCBzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVMaW5rKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmF1dG9QYWRkaW5nU2hhcmVQd2QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgc2hhcmVMb2cuZ2V0U2hhcmVMb2coY29uc3RhbnQuc291cmNlLnR5MTg5LCBzaGFyZUlkLCBmdW5jdGlvbiAocmVjb3JkKSB7CiAgICAgICAgICAgICAgICBpZiAocmVjb3JkIGluc3RhbmNlb2YgT2JqZWN0ICYmIHJlY29yZC5zaGFyZV9wd2QpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSByZWNvcmQuc2hhcmVfcHdkOwogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zaGFyZV9wd2QgPSBzaGFyZVB3ZDsKICAgICAgICAgICAgICAgICAgICAkKCIjY29kZV90eHQiKS52YWwoc2hhcmVQd2QpOwogICAgICAgICAgICAgICAgICAgIHNldHRpbmcuc2hvd05vdGlmeVN1Y2Nlc3MoKSAmJiBvYmouc2hvd1RpcCgxLCAiWyIgKyBtYW5pZmVzdC5nZXRUaXRsZSgpICsgIl0g5Zue5aGr6K6/6Zeu56CB5oiQ5YqfIiwgMjAwMCk7CgogICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LnR5MTg5X2F1dG9fanVtcCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhZmVXaW5kb3cuJCgiLmJ0bi52aXNpdCIpLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNldHRpbmcuc2hvd05vdGlmeUZhaWwoKSAmJiBvYmouc2hvd1RpcCgwLCAiWyIgKyBtYW5pZmVzdC5nZXRUaXRsZSgpICsgIl0g5rKh5pyJ6K6/6Zeu56CB6K6w5b2VIiwgMjAwMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93VGlwID0gZnVuY3Rpb24gKGNvZGUsIG1zZywgdGltZW91dCkgewogICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKCIudmlzaXRfZXJyb3IiKTsKICAgICAgICAgICAgaWYgKGNvZGUpIHsKICAgICAgICAgICAgICAgICRlbGVtZW50LnNhZmVIdG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IGdyZWVuOyI+JyArIG1zZyArICc8L3NwYW4+Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkZWxlbWVudC5zYWZlSHRtbCgnPHNwYW4gc3R5bGU9ImNvbG9yOiByZWQ7Ij4nICsgbXNnICsgJzwvc3Bhbj4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkZWxlbWVudC5zaG93KCk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJGVsZW1lbnQuaGlkZSgpOwogICAgICAgICAgICB9LCB0aW1lb3V0KTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdERvd25sb2FkUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLmJ0bi1kb3dubG9hZCIpLmFmdGVyKCc8YSBjbGFzcz0iYnRuIGJ0bi1zaG93LWxpbmsiIHN0eWxlPSJiYWNrZ3JvdW5kOiAjMmI4OWVhOyBjdXJzb3I6IHBvaW50ZXIiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgJCgiLmJ0bi1zaG93LWxpbmsiKS5vbigiY2xpY2siLCBvYmouc2hvd0Rvd25sb2FkKTsKCiAgICAgICAgICAgIGlmICh1bnNhZmVXaW5kb3cuZmlsZUlkKSB7CiAgICAgICAgICAgICAgICBvYmouZ2V0RG93bmxvYWRVcmwoJCgiLnNoYXJlSWQiKS52YWwoKSwgdW5zYWZlV2luZG93LmZpbGVJZCkudGhlbihmdW5jdGlvbiAoZG93bmxvYWRVcmwpIHsKICAgICAgICAgICAgICAgICAgICB1bnNhZmVXaW5kb3cuZG93bmxvYWRVcmwgPSBkb3dubG9hZFVybCArICJmaWxlbmFtZT0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHVuc2FmZVdpbmRvdy5maWxlTmFtZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDIwcHg7IGhlaWdodDogNDEwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij4nOwogICAgICAgICAgICB2YXIgcm93U3R5bGUgPSAibWFyZ2luOjEwcHggMHB4OyBvdmVyZmxvdzpoaWRkZW47IHdoaXRlLXNwYWNlOm5vd3JhcDsgdGV4dC1vdmVyZmxvdzplbGxpcHNpczsiOwoKICAgICAgICAgICAgdmFyIGZpbGVJZHMgPSBvYmouZ2V0U2VsZWN0ZWRGaWxlSWRzKCksCiAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0KCk7CgogICAgICAgICAgICBpZiAoZmlsZUxpc3QubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgdmFyIHBhY2thZ2VVcmwgPSBvYmouYnVpbGRQYWNrYWdlVXJsKGZpbGVJZHMsICLmiZPljIXkuIvovb0uemlwIik7CiAgICAgICAgICAgICAgICBodG1sICs9ICc8cD7ljovnvKnljIU8L3A+JzsKICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxwIHN0eWxlPSInICsgcm93U3R5bGUgKyAnIj48YSB0aXRsZT0iJyArIHBhY2thZ2VVcmwgKyAnIiBocmVmPSInICsgcGFja2FnZVVybCArICciIHN0eWxlPSJjb2xvcjogYmx1ZTsiPicgKyBwYWNrYWdlVXJsICsgJzwvYT48L3A+JzsKICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxwPiZuYnNwOzwvcD4nOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBpdGVtLmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICBpZiAoZmlsZS5pc0ZvbGRlcikgewogICAgICAgICAgICAgICAgICAgIGZpbGUuZG93bmxvYWRVcmwgPSBvYmouYnVpbGRQYWNrYWdlVXJsKGZpbGUuZmlsZUlkLCBmaWxlLmZpbGVOYW1lICsgIi56aXAiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZpbGUuZG93bmxvYWRVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIGZpbGUuZG93bmxvYWRVcmw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBodG1sICs9ICc8cD4nICsgKCsraW5kZXgpICsgJ++8micgKyAoZmlsZS5maWxlTmFtZSA/IGZpbGUuZmlsZU5hbWUgOiBmaWxlLmZpbGVJZCkgKyAnPC9wPic7CiAgICAgICAgICAgICAgICBodG1sICs9ICc8cCBzdHlsZT0iJyArIHJvd1N0eWxlICsgJyI+PGEgdGl0bGU9IicgKyBmaWxlLmRvd25sb2FkVXJsICsgJyIgaHJlZj0iJyArIGZpbGUuZG93bmxvYWRVcmwgKyAnIiBzdHlsZT0iY29sb3I6IGJsdWU7Ij4nICsgZmlsZS5kb3dubG9hZFVybCArICc8L2E+PC9wPic7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaHRtbCArPSAnPGRpdj4nOwogICAgICAgICAgICBvYmouc2hvd0JveChodG1sKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0JveCA9IGZ1bmN0aW9uIChib2R5KSB7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICc8ZGl2IGlkPSJKX0ZpbGVNb2RhbCIgY2xhc3M9InRyZWVCb3gtbW9kYWwgbW9kYWwgaW4iIHN0eWxlPSJkaXNwbGF5OmJsb2NrIj48ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPjxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+PGEgY2xhc3M9ImNsb3NlIj7DlzwvYT48aDM+5paH5Lu25LiL6L29PC9oMz48L2Rpdj48ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij48L2Rpdj48L2Rpdj48L2Rpdj4nOwogICAgICAgICAgICBpZiAoJCgiI0pfRmlsZU1vZGFsIikubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgICQoImJvZHkiKS5hcHBlbmQodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgJCgiI0pfRmlsZU1vZGFsIC5jbG9zZSIpLm9uKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKCIjSl9GaWxlTW9kYWwiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkKCIjSl9GaWxlTW9kYWwiKS5zaG93KCk7CiAgICAgICAgICAgICQoIiNKX0ZpbGVNb2RhbCAubW9kYWwtYm9keSIpLnNhZmVIdG1sKGJvZHkpOwogICAgICAgIH07CgogICAgICAgIG9iai5idWlsZFBhY2thZ2VVcmwgPSBmdW5jdGlvbiAoZmlsZUlkcywgZmlsZU5hbWUpIHsKICAgICAgICAgICAgdmFyIGRvd25sb2FkVXJsID0gdW5zYWZlV2luZG93LmVkcml2ZS5kb3dubG9hZFVybCwKICAgICAgICAgICAgICAgIHNlc3Npb25LZXkgPSB1bnNhZmVXaW5kb3cuZWRyaXZlLnNlc3Npb25LZXk7CiAgICAgICAgICAgIGZpbGVOYW1lIHx8IChmaWxlTmFtZSA9ICIiKTsKICAgICAgICAgICAgaWYgKHVuc2FmZVdpbmRvdy5fc2hhcmVJZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgZG93bmxvYWRVcmwgKyAiP3Nlc3Npb25LZXk9IiArIHNlc3Npb25LZXkgKyAiJmZpbGVJZFM9IiArIGZpbGVJZHMgKyAiJmRvd25sb2FkVHlwZT0zJnNoYXJlSWQ9IiArIHVuc2FmZVdpbmRvdy5fc2hhcmVJZCArICImZmlsZW5hbWU9IiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlTmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2wgKyBkb3dubG9hZFVybCArICI/c2Vzc2lvbktleT0iICsgc2Vzc2lvbktleSArICImZmlsZUlkUz0iICsgZmlsZUlkcyArICImZG93bmxvYWRUeXBlPTEmZmlsZW5hbWU9IiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlTmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouYnVpbGREb3dubG9hZFVybCA9IGZ1bmN0aW9uIChzaGFyZUlkLCBmaWxlRGlnZXN0LCBmaWxlTmFtZSkgewogICAgICAgICAgICByZXR1cm4gImh0dHBzOi8vY2xvdWQuMTg5LmNuL2Rvd25sb2FkRmlsZS5hY3Rpb24/ZmlsZVN0cj0iICsgZmlsZURpZ2VzdCArICImZG93bmxvYWRUeXBlPTMmc2hhcmVJZD0iICsgc2hhcmVJZCArICImZmlsZW5hbWU9IiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlTmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNlbGVjdGVkRmlsZUlkcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGZpbGVJZExpc3QgPSBbXTsKICAgICAgICAgICAgdmFyIGZpbGVMaXN0ID0gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QoKTsKICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgZmlsZUlkTGlzdC5wdXNoKGl0ZW0uYXR0cmlidXRlcy5maWxlSWQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGZpbGVJZExpc3Quam9pbigiLCIpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWFpblZpZXcgPSBudWxsLCBmaWxlTGlzdCA9IFtdOwogICAgICAgICAgICBpZiAodW5zYWZlV2luZG93LmZpbGVJZCkgewogICAgICAgICAgICAgICAgZmlsZUxpc3QgPSBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB1bnNhZmVXaW5kb3cKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHVuc2FmZVdpbmRvdy5fc2hhcmVJZCkgewogICAgICAgICAgICAgICAgbWFpblZpZXcgPSB1bnNhZmVXaW5kb3cuYXBwUm91dGVyLm1haW5WaWV3OwogICAgICAgICAgICAgICAgaWYgKG1haW5WaWV3IGluc3RhbmNlb2YgT2JqZWN0ICYmIG1haW5WaWV3LmZpbGVMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZUxpc3QgPSBtYWluVmlldy5maWxlTGlzdDsKICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUxpc3Quc2VsZWN0ZWQoKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUxpc3QgPSBmaWxlTGlzdC5zZWxlY3RlZCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG9iai5wcm9jZXNzRmlsZUxpc3QoZmlsZUxpc3QsIHVuc2FmZVdpbmRvdy5fc2hhcmVJZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAodW5zYWZlV2luZG93Lm1haW5WaWV3KSB7CiAgICAgICAgICAgICAgICBtYWluVmlldyA9IHVuc2FmZVdpbmRvdy5tYWluVmlldzsKICAgICAgICAgICAgICAgIGlmIChtYWluVmlldy5maWxlTGlzdFRhYk9iaiAmJiBtYWluVmlldy5maWxlTGlzdFRhYk9ialttYWluVmlldy5vcHRpb25zLmZpbGVJZF0pIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG1haW5WaWV3LmZpbGVMaXN0VGFiT2JqW21haW5WaWV3Lm9wdGlvbnMuZmlsZUlkXS5maWxlTGlzdC5zZWxlY3RlZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAobWFpblZpZXcuZ2V0U2VsZWN0ZWRNb2RlbHMpIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG1haW5WaWV3LmdldFNlbGVjdGVkTW9kZWxzKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzZWxlY3RlZEZpbGVMaXN0ID0gW107CiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmF0dHJpYnV0ZXMuZmlsZUlkID4gMCkgewogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmlsZUxpc3QucHVzaChpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZEZpbGVMaXN0OwogICAgICAgIH07CgogICAgICAgIG9iai5wcm9jZXNzRmlsZUxpc3QgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHNoYXJlSWQpIHsKICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uYXR0cmlidXRlcy5pc0ZvbGRlciAhPT0gdHJ1ZSAmJiBpdGVtLmF0dHJpYnV0ZXMuZmlsZUlkRGlnZXN0KSB7CiAgICAgICAgICAgICAgICAgICAgaXRlbS5hdHRyaWJ1dGVzLmRvd25sb2FkVXJsID0gb2JqLmJ1aWxkRG93bmxvYWRVcmwoc2hhcmVJZCwgaXRlbS5hdHRyaWJ1dGVzLmZpbGVJZERpZ2VzdCwgaXRlbS5hdHRyaWJ1dGVzLmZpbGVOYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldERvd25sb2FkVXJsID0gZnVuY3Rpb24gKHNoYXJlSWQsIGZpbGVJZCkgewogICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiaHR0cHM6Ly9jbG91ZC4xODkuY24vdjIvZ2V0RmlsZURvd25sb2FkVXJsLmFjdGlvbj9zaGFyZUlkPSIgKyBzaGFyZUlkICsgIiZmaWxlSWQ9IiArIGZpbGVJZCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZ2V0IiwKICAgICAgICAgICAgICAgICAgICBkYXRlVHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChjb250ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCIiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlSWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSBvYmouZ2V0U2hhcmVMaW5rKCk7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IHVybC5tYXRjaCgvY2xvdWRcLjE4OVwuY25cL3RcLyhbMC05YS16XSspL2kpOwogICAgICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IG51bGw7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlTGluayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5nZXRVcmwoKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwX21hbmFnZSIsIFsibWV0YSIsICJ1bnNhZmVXaW5kb3ciXSwgZnVuY3Rpb24gKG1ldGEsIHVuc2FmZVdpbmRvdykgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLnJ1biA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKG1ldGEuZXhpc3RNZXRhKCJtYW5hZ2UiKSkgewogICAgICAgICAgICAgICAgdW5zYWZlV2luZG93Lk9uZVBhbiA9IGNvbnRhaW5lcjsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImFwcCIsIFsiYXBwUnVubmVyIl0sIGZ1bmN0aW9uIChhcHBSdW5uZXIpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGFwcFJ1bm5lci5ydW4oWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfYmFpZHUiLAogICAgICAgICAgICAgICAgICAgIG1hdGNoczogWwogICAgICAgICAgICAgICAgICAgICAgICAiYmFpZHUuY29tIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImFwcF93ZWl5dW4iLAogICAgICAgICAgICAgICAgICAgIG1hdGNoczogWwogICAgICAgICAgICAgICAgICAgICAgICAid2VpeXVuLmNvbSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfbGFuem91cyIsCiAgICAgICAgICAgICAgICAgICAgbWF0Y2hzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJsYW56b3VzLmNvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsYW56b3V4LmNvbSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfMTg5IiwKICAgICAgICAgICAgICAgICAgICBtYXRjaHM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImNsb3VkLjE4OS5jbiIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfbWFuYWdlIiwKICAgICAgICAgICAgICAgICAgICBtYXRjaHM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgIioiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgLyoqIGxpYiAqKi8KICAgIGNvbnRhaW5lci5kZWZpbmUoIiQiLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB3aW5kb3cuJDsKICAgIH0pOwogICAgY29udGFpbmVyLmRlZmluZSgiU25hcCIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHR5cGVvZiBTbmFwICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHJldHVybiBTbmFwOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TbmFwOwogICAgICAgIH0KICAgIH0pOwogICAgY29udGFpbmVyLmRlZmluZSgiRE9NUHVyaWZ5IiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAodHlwZW9mIERPTVB1cmlmeSAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICByZXR1cm4gRE9NUHVyaWZ5OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5ET01QdXJpZnk7CiAgICAgICAgfQogICAgfSk7CgogICAgY29udGFpbmVyLnVzZShbImdtIiwgImNvcmUiLCAiYXBwIl0sIGZ1bmN0aW9uIChnbSwgY29yZSwgYXBwKSB7CiAgICAgICAgZ20ucmVhZHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb3JlLnJlYWR5KGFwcC5ydW4pOwogICAgICAgIH0pOwogICAgfSk7Cn0pKCk7","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.staticfile.org/jquery/3.5.0/jquery.min.js","ts":1641535195935,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"purify.min.js","url":"https://cdn.staticfile.org/dompurify/2.0.10/purify.min.js","ts":1641535195913,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"snap.svg-min.js","url":"https://cdn.staticfile.org/snap.svg/0.5.1/snap.svg-min.js","ts":1641535195950,"mimetype":"text/javascript"},"source":"Ly8gU25hcC5zdmcgMC41LjAKLy8KLy8gQ29weXJpZ2h0IChjKSAyMDEzIOKAkyAyMDE3IEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCi8vCi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCi8vCi8vIGJ1aWxkOiAyMDE3LTAyLTA2CgohZnVuY3Rpb24oYSl7dmFyIGIsYyxkPSIwLjUuMCIsZT0iaGFzT3duUHJvcGVydHkiLGY9L1tcLlwvXS8sZz0vXHMqLFxzKi8saD0iKiIsaT1mdW5jdGlvbihhLGIpe3JldHVybiBhLWJ9LGo9e246e319LGs9ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMubGVuZ3RoO2I+YTthKyspaWYoInVuZGVmaW5lZCIhPXR5cGVvZiB0aGlzW2FdKXJldHVybiB0aGlzW2FdfSxsPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMubGVuZ3RoOy0tYTspaWYoInVuZGVmaW5lZCIhPXR5cGVvZiB0aGlzW2FdKXJldHVybiB0aGlzW2FdfSxtPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbj1TdHJpbmcsbz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIEFycmF5fHwiW29iamVjdCBBcnJheV0iPT1tLmNhbGwoYSl9O2V2ZT1mdW5jdGlvbihhLGQpe3ZhciBlLGY9YyxnPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSxoPWV2ZS5saXN0ZW5lcnMoYSksaj0wLG09W10sbj17fSxvPVtdLHA9YjtvLmZpcnN0RGVmaW5lZD1rLG8ubGFzdERlZmluZWQ9bCxiPWEsYz0wO2Zvcih2YXIgcT0wLHI9aC5sZW5ndGg7cj5xO3ErKykiekluZGV4ImluIGhbcV0mJihtLnB1c2goaFtxXS56SW5kZXgpLGhbcV0uekluZGV4PDAmJihuW2hbcV0uekluZGV4XT1oW3FdKSk7Zm9yKG0uc29ydChpKTttW2pdPDA7KWlmKGU9blttW2orK11dLG8ucHVzaChlLmFwcGx5KGQsZykpLGMpcmV0dXJuIGM9ZixvO2ZvcihxPTA7cj5xO3ErKylpZihlPWhbcV0sInpJbmRleCJpbiBlKWlmKGUuekluZGV4PT1tW2pdKXtpZihvLnB1c2goZS5hcHBseShkLGcpKSxjKWJyZWFrO2RvIGlmKGorKyxlPW5bbVtqXV0sZSYmby5wdXNoKGUuYXBwbHkoZCxnKSksYylicmVhazt3aGlsZShlKX1lbHNlIG5bZS56SW5kZXhdPWU7ZWxzZSBpZihvLnB1c2goZS5hcHBseShkLGcpKSxjKWJyZWFrO3JldHVybiBjPWYsYj1wLG99LGV2ZS5fZXZlbnRzPWosZXZlLmxpc3RlbmVycz1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxnLGksayxsLG09byhhKT9hOmEuc3BsaXQoZiksbj1qLHA9W25dLHE9W107Zm9yKGU9MCxnPW0ubGVuZ3RoO2c+ZTtlKyspe2ZvcihsPVtdLGk9MCxrPXAubGVuZ3RoO2s+aTtpKyspZm9yKG49cFtpXS5uLGM9W25bbVtlXV0sbltoXV0sZD0yO2QtLTspYj1jW2RdLGImJihsLnB1c2goYikscT1xLmNvbmNhdChiLmZ8fFtdKSk7cD1sfXJldHVybiBxfSxldmUuc2VwYXJhdG9yPWZ1bmN0aW9uKGEpe2E/KGE9bihhKS5yZXBsYWNlKC8oPz1bXC5cXlxdXFtcLV0pL2csIlxcIiksYT0iWyIrYSsiXSIsZj1uZXcgUmVnRXhwKGEpKTpmPS9bXC5cL10vfSxldmUub249ZnVuY3Rpb24oYSxiKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgYilyZXR1cm4gZnVuY3Rpb24oKXt9O2Zvcih2YXIgYz1vKGEpP28oYVswXSk/YTpbYV06bihhKS5zcGxpdChnKSxkPTAsZT1jLmxlbmd0aDtlPmQ7ZCsrKSFmdW5jdGlvbihhKXtmb3IodmFyIGMsZD1vKGEpP2E6bihhKS5zcGxpdChmKSxlPWosZz0wLGg9ZC5sZW5ndGg7aD5nO2crKyllPWUubixlPWUuaGFzT3duUHJvcGVydHkoZFtnXSkmJmVbZFtnXV18fChlW2RbZ11dPXtuOnt9fSk7Zm9yKGUuZj1lLmZ8fFtdLGc9MCxoPWUuZi5sZW5ndGg7aD5nO2crKylpZihlLmZbZ109PWIpe2M9ITA7YnJlYWt9IWMmJmUuZi5wdXNoKGIpfShjW2RdKTtyZXR1cm4gZnVuY3Rpb24oYSl7K2E9PSthJiYoYi56SW5kZXg9K2EpfX0sZXZlLmY9ZnVuY3Rpb24oYSl7dmFyIGI9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7ZXZlLmFwcGx5KG51bGwsW2EsbnVsbF0uY29uY2F0KGIpLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSkpfX0sZXZlLnN0b3A9ZnVuY3Rpb24oKXtjPTF9LGV2ZS5udD1mdW5jdGlvbihhKXt2YXIgYz1vKGIpP2Iuam9pbigiLiIpOmI7cmV0dXJuIGE/bmV3IFJlZ0V4cCgiKD86XFwufFxcL3xeKSIrYSsiKD86XFwufFxcL3wkKSIpLnRlc3QoYyk6Y30sZXZlLm50cz1mdW5jdGlvbigpe3JldHVybiBvKGIpP2I6Yi5zcGxpdChmKX0sZXZlLm9mZj1ldmUudW5iaW5kPWZ1bmN0aW9uKGEsYil7aWYoIWEpcmV0dXJuIHZvaWQoZXZlLl9ldmVudHM9aj17bjp7fX0pO3ZhciBjPW8oYSk/byhhWzBdKT9hOlthXTpuKGEpLnNwbGl0KGcpO2lmKGMubGVuZ3RoPjEpZm9yKHZhciBkPTAsaT1jLmxlbmd0aDtpPmQ7ZCsrKWV2ZS5vZmYoY1tkXSxiKTtlbHNle2M9byhhKT9hOm4oYSkuc3BsaXQoZik7dmFyIGssbCxtLGQsaSxwLHEscj1bal0scz1bXTtmb3IoZD0wLGk9Yy5sZW5ndGg7aT5kO2QrKylmb3IocD0wO3A8ci5sZW5ndGg7cCs9bS5sZW5ndGgtMil7aWYobT1bcCwxXSxrPXJbcF0ubixjW2RdIT1oKWtbY1tkXV0mJihtLnB1c2goa1tjW2RdXSkscy51bnNoaWZ0KHtuOmssbmFtZTpjW2RdfSkpO2Vsc2UgZm9yKGwgaW4gaylrW2VdKGwpJiYobS5wdXNoKGtbbF0pLHMudW5zaGlmdCh7bjprLG5hbWU6bH0pKTtyLnNwbGljZS5hcHBseShyLG0pfWZvcihkPTAsaT1yLmxlbmd0aDtpPmQ7ZCsrKWZvcihrPXJbZF07ay5uOyl7aWYoYil7aWYoay5mKXtmb3IocD0wLHE9ay5mLmxlbmd0aDtxPnA7cCsrKWlmKGsuZltwXT09Yil7ay5mLnNwbGljZShwLDEpO2JyZWFrfSFrLmYubGVuZ3RoJiZkZWxldGUgay5mfWZvcihsIGluIGsubilpZihrLm5bZV0obCkmJmsubltsXS5mKXt2YXIgdD1rLm5bbF0uZjtmb3IocD0wLHE9dC5sZW5ndGg7cT5wO3ArKylpZih0W3BdPT1iKXt0LnNwbGljZShwLDEpO2JyZWFrfSF0Lmxlbmd0aCYmZGVsZXRlIGsubltsXS5mfX1lbHNle2RlbGV0ZSBrLmY7Zm9yKGwgaW4gay5uKWsubltlXShsKSYmay5uW2xdLmYmJmRlbGV0ZSBrLm5bbF0uZn1rPWsubn1hOmZvcihkPTAsaT1zLmxlbmd0aDtpPmQ7ZCsrKXtrPXNbZF07Zm9yKGwgaW4gay5uW2submFtZV0uZiljb250aW51ZSBhO2ZvcihsIGluIGsubltrLm5hbWVdLm4pY29udGludWUgYTtkZWxldGUgay5uW2submFtZV19fX0sZXZlLm9uY2U9ZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbigpe3JldHVybiBldmUub2ZmKGEsYyksYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiBldmUub24oYSxjKX0sZXZlLnZlcnNpb249ZCxldmUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4iWW91IGFyZSBydW5uaW5nIEV2ZSAiK2R9LCJ1bmRlZmluZWQiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1ldmU6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImV2ZSIsW10sZnVuY3Rpb24oKXtyZXR1cm4gZXZlfSk6YS5ldmU9ZXZlfSh0aGlzKSxmdW5jdGlvbihhLGIpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFsiZXZlIl0sZnVuY3Rpb24oYyl7cmV0dXJuIGIoYSxjKX0pO2Vsc2UgaWYoInVuZGVmaW5lZCIhPXR5cGVvZiBleHBvcnRzKXt2YXIgYz1yZXF1aXJlKCJldmUiKTttb2R1bGUuZXhwb3J0cz1iKGEsYyl9ZWxzZSBiKGEsYS5ldmUpfSh3aW5kb3d8fHRoaXMsZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbihiKXt2YXIgYyxkPXt9LGU9YS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGEud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxhLm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8YS5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxhLm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChhLDE2LChuZXcgRGF0ZSkuZ2V0VGltZSgpKSwhMH0sZj1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIEFycmF5fHwiW29iamVjdCBBcnJheV0iPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9LGc9MCxoPSJNIisoK25ldyBEYXRlKS50b1N0cmluZygzNiksaT1mdW5jdGlvbigpe3JldHVybiBoKyhnKyspLnRvU3RyaW5nKDM2KX0saj1EYXRlLm5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGV9LGs9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztpZihudWxsPT1hKXJldHVybiBiLnM7dmFyIGM9Yi5zLWE7Yi5iKz1iLmR1cipjLGIuQis9Yi5kdXIqYyxiLnM9YX0sbD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBudWxsPT1hP2Iuc3BkOnZvaWQoYi5zcGQ9YSl9LG09ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gbnVsbD09YT9iLmR1cjooYi5zPWIucyphL2IuZHVyLHZvaWQoYi5kdXI9YSkpfSxuPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkZWxldGUgZFthLmlkXSxhLnVwZGF0ZSgpLGIoIm1pbmEuc3RvcC4iK2EuaWQsYSl9LG89ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EucGRpZnx8KGRlbGV0ZSBkW2EuaWRdLGEudXBkYXRlKCksYS5wZGlmPWEuZ2V0KCktYS5iKX0scD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5wZGlmJiYoYS5iPWEuZ2V0KCktYS5wZGlmLGRlbGV0ZSBhLnBkaWYsZFthLmlkXT1hLHIoKSl9LHE9ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXM7aWYoZihiLnN0YXJ0KSl7YT1bXTtmb3IodmFyIGM9MCxkPWIuc3RhcnQubGVuZ3RoO2Q+YztjKyspYVtjXT0rYi5zdGFydFtjXSsoYi5lbmRbY10tYi5zdGFydFtjXSkqYi5lYXNpbmcoYi5zKX1lbHNlIGE9K2Iuc3RhcnQrKGIuZW5kLWIuc3RhcnQpKmIuZWFzaW5nKGIucyk7Yi5zZXQoYSl9LHI9ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuIHZvaWQoY3x8KGM9ZShyKSkpO3ZhciBmPTA7Zm9yKHZhciBnIGluIGQpaWYoZC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZFtnXSxpPWguZ2V0KCk7ZisrLGgucz0oaS1oLmIpLyhoLmR1ci9oLnNwZCksaC5zPj0xJiYoZGVsZXRlIGRbZ10saC5zPTEsZi0tLGZ1bmN0aW9uKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtiKCJtaW5hLmZpbmlzaC4iK2EuaWQsYSl9KX0oaCkpLGgudXBkYXRlKCl9Yz1mP2Uocik6ITF9LHM9ZnVuY3Rpb24oYSxiLGMsZSxmLGcsaCl7dmFyIGo9e2lkOmkoKSxzdGFydDphLGVuZDpiLGI6YyxzOjAsZHVyOmUtYyxzcGQ6MSxnZXQ6ZixzZXQ6ZyxlYXNpbmc6aHx8cy5saW5lYXIsc3RhdHVzOmssc3BlZWQ6bCxkdXJhdGlvbjptLHN0b3A6bixwYXVzZTpvLHJlc3VtZTpwLHVwZGF0ZTpxfTtkW2ouaWRdPWo7dmFyIHQsdT0wO2Zvcih0IGluIGQpaWYoZC5oYXNPd25Qcm9wZXJ0eSh0KSYmKHUrKywyPT11KSlicmVhaztyZXR1cm4gMT09dSYmcigpLGp9O3JldHVybiBzLnRpbWU9aixzLmdldEJ5SWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGRbYV18fG51bGx9LHMubGluZWFyPWZ1bmN0aW9uKGEpe3JldHVybiBhfSxzLmVhc2VvdXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGgucG93KGEsMS43KX0scy5lYXNlaW49ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGgucG93KGEsLjQ4KX0scy5lYXNlaW5vdXQ9ZnVuY3Rpb24oYSl7aWYoMT09YSlyZXR1cm4gMTtpZigwPT1hKXJldHVybiAwO3ZhciBiPS40OC1hLzEuMDQsYz1NYXRoLnNxcnQoLjE3MzQrYipiKSxkPWMtYixlPU1hdGgucG93KE1hdGguYWJzKGQpLDEvMykqKDA+ZD8tMToxKSxmPS1jLWIsZz1NYXRoLnBvdyhNYXRoLmFicyhmKSwxLzMpKigwPmY/LTE6MSksaD1lK2crLjU7cmV0dXJuIDMqKDEtaCkqaCpoK2gqaCpofSxzLmJhY2tpbj1mdW5jdGlvbihhKXtpZigxPT1hKXJldHVybiAxO3ZhciBiPTEuNzAxNTg7cmV0dXJuIGEqYSooKGIrMSkqYS1iKX0scy5iYWNrb3V0PWZ1bmN0aW9uKGEpe2lmKDA9PWEpcmV0dXJuIDA7YS09MTt2YXIgYj0xLjcwMTU4O3JldHVybiBhKmEqKChiKzEpKmErYikrMX0scy5lbGFzdGljPWZ1bmN0aW9uKGEpe3JldHVybiBhPT0hIWE/YTpNYXRoLnBvdygyLC0xMCphKSpNYXRoLnNpbigoYS0uMDc1KSooMipNYXRoLlBJKS8uMykrMX0scy5ib3VuY2U9ZnVuY3Rpb24oYSl7dmFyIGIsYz03LjU2MjUsZD0yLjc1O3JldHVybiAxL2Q+YT9iPWMqYSphOjIvZD5hPyhhLT0xLjUvZCxiPWMqYSphKy43NSk6Mi41L2Q+YT8oYS09Mi4yNS9kLGI9YyphKmErLjkzNzUpOihhLT0yLjYyNS9kLGI9YyphKmErLjk4NDM3NSksYn0sYS5taW5hPXMsc30oInVuZGVmaW5lZCI9PXR5cGVvZiBiP2Z1bmN0aW9uKCl7fTpiKSxkPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGMoYSxiKXtpZihhKXtpZihhLm5vZGVUeXBlKXJldHVybiB3KGEpO2lmKGUoYSwiYXJyYXkiKSYmYy5zZXQpcmV0dXJuIGMuc2V0LmFwcGx5KGMsYSk7aWYoYSBpbnN0YW5jZW9mIHMpcmV0dXJuIGE7aWYobnVsbD09YilyZXR1cm4gYT15LmRvYy5xdWVyeVNlbGVjdG9yKFN0cmluZyhhKSksdyhhKX1yZXR1cm4gYT1udWxsPT1hPyIxMDAlIjphLGI9bnVsbD09Yj8iMTAwJSI6YixuZXcgdihhLGIpfWZ1bmN0aW9uIGQoYSxiKXtpZihiKXtpZigiI3RleHQiPT1hJiYoYT15LmRvYy5jcmVhdGVUZXh0Tm9kZShiLnRleHR8fGJbIiN0ZXh0Il18fCIiKSksIiNjb21tZW50Ij09YSYmKGE9eS5kb2MuY3JlYXRlQ29tbWVudChiLnRleHR8fGJbIiN0ZXh0Il18fCIiKSksInN0cmluZyI9PXR5cGVvZiBhJiYoYT1kKGEpKSwic3RyaW5nIj09dHlwZW9mIGIpcmV0dXJuIDE9PWEubm9kZVR5cGU/InhsaW5rOiI9PWIuc3Vic3RyaW5nKDAsNik/YS5nZXRBdHRyaWJ1dGVOUyhULGIuc3Vic3RyaW5nKDYpKToieG1sOiI9PWIuc3Vic3RyaW5nKDAsNCk/YS5nZXRBdHRyaWJ1dGVOUyhVLGIuc3Vic3RyaW5nKDQpKTphLmdldEF0dHJpYnV0ZShiKToidGV4dCI9PWI/YS5ub2RlVmFsdWU6bnVsbDtpZigxPT1hLm5vZGVUeXBlKXtmb3IodmFyIGMgaW4gYilpZihiW3pdKGMpKXt2YXIgZT1BKGJbY10pO2U/InhsaW5rOiI9PWMuc3Vic3RyaW5nKDAsNik/YS5zZXRBdHRyaWJ1dGVOUyhULGMuc3Vic3RyaW5nKDYpLGUpOiJ4bWw6Ij09Yy5zdWJzdHJpbmcoMCw0KT9hLnNldEF0dHJpYnV0ZU5TKFUsYy5zdWJzdHJpbmcoNCksZSk6YS5zZXRBdHRyaWJ1dGUoYyxlKTphLnJlbW92ZUF0dHJpYnV0ZShjKX19ZWxzZSJ0ZXh0ImluIGImJihhLm5vZGVWYWx1ZT1iLnRleHQpfWVsc2UgYT15LmRvYy5jcmVhdGVFbGVtZW50TlMoVSxhKTtyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7cmV0dXJuIGI9QS5wcm90b3R5cGUudG9Mb3dlckNhc2UuY2FsbChiKSwiZmluaXRlIj09Yj9pc0Zpbml0ZShhKToiYXJyYXkiPT1iJiYoYSBpbnN0YW5jZW9mIEFycmF5fHxBcnJheS5pc0FycmF5JiZBcnJheS5pc0FycmF5KGEpKT8hMDoibnVsbCI9PWImJm51bGw9PT1hfHxiPT10eXBlb2YgYSYmbnVsbCE9PWF8fCJvYmplY3QiPT1iJiZhPT09T2JqZWN0KGEpfHxKLmNhbGwoYSkuc2xpY2UoOCwtMSkudG9Mb3dlckNhc2UoKT09Yn1mdW5jdGlvbiBmKGEpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBhfHxPYmplY3QoYSkhPT1hKXJldHVybiBhO3ZhciBiPW5ldyBhLmNvbnN0cnVjdG9yO2Zvcih2YXIgYyBpbiBhKWFbel0oYykmJihiW2NdPWYoYVtjXSkpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2Q+YztjKyspaWYoYVtjXT09PWIpcmV0dXJuIGEucHVzaChhLnNwbGljZShjLDEpWzBdKX1mdW5jdGlvbiBpKGEsYixjKXtmdW5jdGlvbiBkKCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLGY9ZS5qb2luKCLikIAiKSxnPWQuY2FjaGU9ZC5jYWNoZXx8e30saT1kLmNvdW50PWQuY291bnR8fFtdO3JldHVybiBnW3pdKGYpPyhoKGksZiksYz9jKGdbZl0pOmdbZl0pOihpLmxlbmd0aD49MWUzJiZkZWxldGUgZ1tpLnNoaWZ0KCldLGkucHVzaChmKSxnW2ZdPWEuYXBwbHkoYixlKSxjP2MoZ1tmXSk6Z1tmXSl9cmV0dXJuIGR9ZnVuY3Rpb24gaihhLGIsYyxkLGUsZil7aWYobnVsbD09ZSl7dmFyIGc9YS1jLGg9Yi1kO3JldHVybiBnfHxoPygxODArMTgwKkQuYXRhbjIoLWgsLWcpL0grMzYwKSUzNjA6MH1yZXR1cm4gaihhLGIsZSxmKS1qKGMsZCxlLGYpfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIGElMzYwKkgvMTgwfWZ1bmN0aW9uIGwoYSl7cmV0dXJuIDE4MCphL0glMzYwfWZ1bmN0aW9uIG0oYSl7dmFyIGI9W107cmV0dXJuIGE9YS5yZXBsYWNlKC8oPzpefFxzKShcdyspXCgoW14pXSspXCkvZyxmdW5jdGlvbihhLGMsZCl7cmV0dXJuIGQ9ZC5zcGxpdCgvXHMqLFxzKnxccysvKSwicm90YXRlIj09YyYmMT09ZC5sZW5ndGgmJmQucHVzaCgwLDApLCJzY2FsZSI9PWMmJihkLmxlbmd0aD4yP2Q9ZC5zbGljZSgwLDIpOjI9PWQubGVuZ3RoJiZkLnB1c2goMCwwKSwxPT1kLmxlbmd0aCYmZC5wdXNoKGRbMF0sMCwwKSksInNrZXdYIj09Yz9iLnB1c2goWyJtIiwxLDAsRC50YW4oayhkWzBdKSksMSwwLDBdKToic2tld1kiPT1jP2IucHVzaChbIm0iLDEsRC50YW4oayhkWzBdKSksMCwxLDAsMF0pOmIucHVzaChbYy5jaGFyQXQoMCldLmNvbmNhdChkKSksYX0pLGJ9ZnVuY3Rpb24gbihhLGIpe3ZhciBkPWFhKGEpLGU9bmV3IGMuTWF0cml4O2lmKGQpZm9yKHZhciBmPTAsZz1kLmxlbmd0aDtnPmY7ZisrKXt2YXIgaCxpLGosayxsLG09ZFtmXSxuPW0ubGVuZ3RoLG89QShtWzBdKS50b0xvd2VyQ2FzZSgpLHA9bVswXSE9byxxPXA/ZS5pbnZlcnQoKTowOyJ0Ij09byYmMj09bj9lLnRyYW5zbGF0ZShtWzFdLDApOiJ0Ij09byYmMz09bj9wPyhoPXEueCgwLDApLGk9cS55KDAsMCksaj1xLngobVsxXSxtWzJdKSxrPXEueShtWzFdLG1bMl0pLGUudHJhbnNsYXRlKGotaCxrLWkpKTplLnRyYW5zbGF0ZShtWzFdLG1bMl0pOiJyIj09bz8yPT1uPyhsPWx8fGIsZS5yb3RhdGUobVsxXSxsLngrbC53aWR0aC8yLGwueStsLmhlaWdodC8yKSk6ND09biYmKHA/KGo9cS54KG1bMl0sbVszXSksaz1xLnkobVsyXSxtWzNdKSxlLnJvdGF0ZShtWzFdLGosaykpOmUucm90YXRlKG1bMV0sbVsyXSxtWzNdKSk6InMiPT1vPzI9PW58fDM9PW4/KGw9bHx8YixlLnNjYWxlKG1bMV0sbVtuLTFdLGwueCtsLndpZHRoLzIsbC55K2wuaGVpZ2h0LzIpKTo0PT1uP3A/KGo9cS54KG1bMl0sbVszXSksaz1xLnkobVsyXSxtWzNdKSxlLnNjYWxlKG1bMV0sbVsxXSxqLGspKTplLnNjYWxlKG1bMV0sbVsxXSxtWzJdLG1bM10pOjU9PW4mJihwPyhqPXEueChtWzNdLG1bNF0pLGs9cS55KG1bM10sbVs0XSksZS5zY2FsZShtWzFdLG1bMl0saixrKSk6ZS5zY2FsZShtWzFdLG1bMl0sbVszXSxtWzRdKSk6Im0iPT1vJiY3PT1uJiZlLmFkZChtWzFdLG1bMl0sbVszXSxtWzRdLG1bNV0sbVs2XSl9cmV0dXJuIGV9ZnVuY3Rpb24gbyhhKXt2YXIgYj1hLm5vZGUub3duZXJTVkdFbGVtZW50JiZ3KGEubm9kZS5vd25lclNWR0VsZW1lbnQpfHxhLm5vZGUucGFyZW50Tm9kZSYmdyhhLm5vZGUucGFyZW50Tm9kZSl8fGMuc2VsZWN0KCJzdmciKXx8YygwLDApLGQ9Yi5zZWxlY3QoImRlZnMiKSxlPW51bGw9PWQ/ITE6ZC5ub2RlO3JldHVybiBlfHwoZT11KCJkZWZzIixiLm5vZGUpLm5vZGUpLGV9ZnVuY3Rpb24gcChhKXtyZXR1cm4gYS5ub2RlLm93bmVyU1ZHRWxlbWVudCYmdyhhLm5vZGUub3duZXJTVkdFbGVtZW50KXx8Yy5zZWxlY3QoInN2ZyIpfWZ1bmN0aW9uIHEoYSxiLGMpe2Z1bmN0aW9uIGUoYSl7aWYobnVsbD09YSlyZXR1cm4gSTtpZihhPT0rYSlyZXR1cm4gYTtkKGose3dpZHRoOmF9KTt0cnl7cmV0dXJuIGouZ2V0QkJveCgpLndpZHRofWNhdGNoKGIpe3JldHVybiAwfX1mdW5jdGlvbiBmKGEpe2lmKG51bGw9PWEpcmV0dXJuIEk7aWYoYT09K2EpcmV0dXJuIGE7ZChqLHtoZWlnaHQ6YX0pO3RyeXtyZXR1cm4gai5nZXRCQm94KCkuaGVpZ2h0fWNhdGNoKGIpe3JldHVybiAwfX1mdW5jdGlvbiBnKGQsZSl7bnVsbD09Yj9pW2RdPWUoYS5hdHRyKGQpfHwwKTpkPT1iJiYoaT1lKG51bGw9PWM/YS5hdHRyKGQpfHwwOmMpKX12YXIgaD1wKGEpLm5vZGUsaT17fSxqPWgucXVlcnlTZWxlY3RvcigiLnN2Zy0tLW1nciIpO3N3aXRjaChqfHwoaj1kKCJyZWN0IiksZChqLHt4Oi05ZTkseTotOWU5LHdpZHRoOjEwLGhlaWdodDoxMCwiY2xhc3MiOiJzdmctLS1tZ3IiLGZpbGw6Im5vbmUifSksaC5hcHBlbmRDaGlsZChqKSksYS50eXBlKXtjYXNlInJlY3QiOmcoInJ4IixlKSxnKCJyeSIsZik7Y2FzZSJpbWFnZSI6Zygid2lkdGgiLGUpLGcoImhlaWdodCIsZik7Y2FzZSJ0ZXh0IjpnKCJ4IixlKSxnKCJ5IixmKTticmVhaztjYXNlImNpcmNsZSI6ZygiY3giLGUpLGcoImN5IixmKSxnKCJyIixlKTticmVhaztjYXNlImVsbGlwc2UiOmcoImN4IixlKSxnKCJjeSIsZiksZygicngiLGUpLGcoInJ5IixmKTticmVhaztjYXNlImxpbmUiOmcoIngxIixlKSxnKCJ4MiIsZSksZygieTEiLGYpLGcoInkyIixmKTticmVhaztjYXNlIm1hcmtlciI6ZygicmVmWCIsZSksZygibWFya2VyV2lkdGgiLGUpLGcoInJlZlkiLGYpLGcoIm1hcmtlckhlaWdodCIsZik7YnJlYWs7Y2FzZSJyYWRpYWxHcmFkaWVudCI6ZygiZngiLGUpLGcoImZ5IixmKTticmVhaztjYXNlInRzcGFuIjpnKCJkeCIsZSksZygiZHkiLGYpO2JyZWFrO2RlZmF1bHQ6ZyhiLGUpfXJldHVybiBoLnJlbW92ZUNoaWxkKGopLGl9ZnVuY3Rpb24gcihhKXtlKGEsImFycmF5Iil8fChhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSk7Zm9yKHZhciBiPTAsYz0wLGQ9dGhpcy5ub2RlO3RoaXNbYl07KWRlbGV0ZSB0aGlzW2IrK107Zm9yKGI9MDtiPGEubGVuZ3RoO2IrKykic2V0Ij09YVtiXS50eXBlP2FbYl0uZm9yRWFjaChmdW5jdGlvbihhKXtkLmFwcGVuZENoaWxkKGEubm9kZSl9KTpkLmFwcGVuZENoaWxkKGFbYl0ubm9kZSk7dmFyIGY9ZC5jaGlsZE5vZGVzO2ZvcihiPTA7YjxmLmxlbmd0aDtiKyspdGhpc1tjKytdPXcoZltiXSk7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gcyhhKXtpZihhLnNuYXAgaW4gVilyZXR1cm4gVlthLnNuYXBdO3ZhciBiO3RyeXtiPWEub3duZXJTVkdFbGVtZW50fWNhdGNoKGMpe310aGlzLm5vZGU9YSxiJiYodGhpcy5wYXBlcj1uZXcgdihiKSksdGhpcy50eXBlPWEudGFnTmFtZXx8YS5ub2RlTmFtZTt2YXIgZD10aGlzLmlkPVModGhpcyk7aWYodGhpcy5hbmltcz17fSx0aGlzLl89e3RyYW5zZm9ybTpbXX0sYS5zbmFwPWQsVltkXT10aGlzLCJnIj09dGhpcy50eXBlJiYodGhpcy5hZGQ9ciksdGhpcy50eXBlIGlue2c6MSxtYXNrOjEscGF0dGVybjoxLHN5bWJvbDoxfSlmb3IodmFyIGUgaW4gdi5wcm90b3R5cGUpdi5wcm90b3R5cGVbel0oZSkmJih0aGlzW2VdPXYucHJvdG90eXBlW2VdKX1mdW5jdGlvbiB0KGEpe3RoaXMubm9kZT1hfWZ1bmN0aW9uIHUoYSxiKXt2YXIgYz1kKGEpO2IuYXBwZW5kQ2hpbGQoYyk7dmFyIGU9dyhjKTtyZXR1cm4gZX1mdW5jdGlvbiB2KGEsYil7dmFyIGMsZSxmLGc9di5wcm90b3R5cGU7aWYoYSYmYS50YWdOYW1lJiYic3ZnIj09YS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpe2lmKGEuc25hcCBpbiBWKXJldHVybiBWW2Euc25hcF07dmFyIGg9YS5vd25lckRvY3VtZW50O2M9bmV3IHMoYSksZT1hLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJkZXNjIilbMF0sZj1hLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJkZWZzIilbMF0sZXx8KGU9ZCgiZGVzYyIpLGUuYXBwZW5kQ2hpbGQoaC5jcmVhdGVUZXh0Tm9kZSgiQ3JlYXRlZCB3aXRoIFNuYXAiKSksYy5ub2RlLmFwcGVuZENoaWxkKGUpKSxmfHwoZj1kKCJkZWZzIiksYy5ub2RlLmFwcGVuZENoaWxkKGYpKSxjLmRlZnM9Zjtmb3IodmFyIGkgaW4gZylnW3pdKGkpJiYoY1tpXT1nW2ldKTtjLnBhcGVyPWMucm9vdD1jfWVsc2UgYz11KCJzdmciLHkuZG9jLmJvZHkpLGQoYy5ub2RlLHtoZWlnaHQ6Yix2ZXJzaW9uOjEuMSx3aWR0aDphLHhtbG5zOlV9KTtyZXR1cm4gY31mdW5jdGlvbiB3KGEpe3JldHVybiBhP2EgaW5zdGFuY2VvZiBzfHxhIGluc3RhbmNlb2YgdD9hOmEudGFnTmFtZSYmInN2ZyI9PWEudGFnTmFtZS50b0xvd2VyQ2FzZSgpP25ldyB2KGEpOmEudGFnTmFtZSYmIm9iamVjdCI9PWEudGFnTmFtZS50b0xvd2VyQ2FzZSgpJiYiaW1hZ2Uvc3ZnK3htbCI9PWEudHlwZT9uZXcgdihhLmNvbnRlbnREb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgic3ZnIilbMF0pOm5ldyBzKGEpOmF9ZnVuY3Rpb24geChhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKyl7dmFyIGU9e3R5cGU6YVtjXS50eXBlLGF0dHI6YVtjXS5hdHRyKCl9LGY9YVtjXS5jaGlsZHJlbigpO2IucHVzaChlKSxmLmxlbmd0aCYmeChmLGUuY2hpbGROb2Rlcz1bXSl9fWMudmVyc2lvbj0iMC41LjEiLGMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4iU25hcCB2Iit0aGlzLnZlcnNpb259LGMuXz17fTt2YXIgeT17d2luOmEud2luZG93LGRvYzphLndpbmRvdy5kb2N1bWVudH07Yy5fLmdsb2I9eTt2YXIgej0iaGFzT3duUHJvcGVydHkiLEE9U3RyaW5nLEI9cGFyc2VGbG9hdCxDPXBhcnNlSW50LEQ9TWF0aCxFPUQubWF4LEY9RC5taW4sRz1ELmFicyxIPShELnBvdyxELlBJKSxJPShELnJvdW5kLCIiKSxKPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsSz0vXlxzKigoI1thLWZcZF17Nn0pfCgjW2EtZlxkXXszfSl8cmdiYT9cKFxzKihbXGRcLl0rJT9ccyosXHMqW1xkXC5dKyU/XHMqLFxzKltcZFwuXSslPyg/OlxzKixccypbXGRcLl0rJT8pPylccypcKXxoc2JhP1woXHMqKFtcZFwuXSsoPzpkZWd8XHhiMHwlKT9ccyosXHMqW1xkXC5dKyU/XHMqLFxzKltcZFwuXSsoPzolP1xzKixccypbXGRcLl0rKT8lPylccypcKXxoc2xhP1woXHMqKFtcZFwuXSsoPzpkZWd8XHhiMHwlKT9ccyosXHMqW1xkXC5dKyU/XHMqLFxzKltcZFwuXSsoPzolP1xzKixccypbXGRcLl0rKT8lPylccypcKSlccyokL2ksTD0oYy5fLnNlcGFyYXRvcj0vWyxcc10rLywvW1xzXSosW1xzXSovKSxNPXtoczoxLHJnOjF9LE49LyhbYS16XSlbXHMsXSooKC0/XGQqXC4/XGQqKD86ZVtcLStdP1xkKyk/W1xzXSosP1tcc10qKSspL2dpLE89LyhbcnN0bV0pW1xzLF0qKCgtP1xkKlwuP1xkKig/OmVbXC0rXT9cZCspP1tcc10qLD9bXHNdKikrKS9naSxQPS8oLT9cZCpcLj9cZCooPzplW1wtK10/XGQrKT8pW1xzXSosP1tcc10qL2dpLFE9MCxSPSJTIisoK25ldyBEYXRlKS50b1N0cmluZygzNiksUz1mdW5jdGlvbihhKXtyZXR1cm4oYSYmYS50eXBlP2EudHlwZTpJKStSKyhRKyspLnRvU3RyaW5nKDM2KX0sVD0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsVT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLFY9e307Yy51cmw9ZnVuY3Rpb24oYSl7cmV0dXJuInVybCgnIyIrYSsiJykifTtjLl8uJD1kLGMuXy5pZD1TLGMuZm9ybWF0PWZ1bmN0aW9uKCl7dmFyIGE9L1x7KFteXH1dKylcfS9nLGI9Lyg/Oig/Ol58XC4pKC4rPykoPz1cW3xcLnwkfFwoKXxcWygnfCIpKC4rPylcMlxdKShcKFwpKT8vZyxjPWZ1bmN0aW9uKGEsYyxkKXt2YXIgZT1kO3JldHVybiBjLnJlcGxhY2UoYixmdW5jdGlvbihhLGIsYyxkLGYpe2I9Ynx8ZCxlJiYoYiBpbiBlJiYoZT1lW2JdKSwiZnVuY3Rpb24iPT10eXBlb2YgZSYmZiYmKGU9ZSgpKSl9KSxlPShudWxsPT1lfHxlPT1kP2E6ZSkrIiJ9O3JldHVybiBmdW5jdGlvbihiLGQpe3JldHVybiBBKGIpLnJlcGxhY2UoYSxmdW5jdGlvbihhLGIpe3JldHVybiBjKGEsYixkKX0pfX0oKSxjLl8uY2xvbmU9ZixjLl8uY2FjaGVyPWksYy5yYWQ9ayxjLmRlZz1sLGMuc2luPWZ1bmN0aW9uKGEpe3JldHVybiBELnNpbihjLnJhZChhKSl9LGMudGFuPWZ1bmN0aW9uKGEpe3JldHVybiBELnRhbihjLnJhZChhKSl9LGMuY29zPWZ1bmN0aW9uKGEpe3JldHVybiBELmNvcyhjLnJhZChhKSl9LGMuYXNpbj1mdW5jdGlvbihhKXtyZXR1cm4gYy5kZWcoRC5hc2luKGEpKX0sYy5hY29zPWZ1bmN0aW9uKGEpe3JldHVybiBjLmRlZyhELmFjb3MoYSkpfSxjLmF0YW49ZnVuY3Rpb24oYSl7cmV0dXJuIGMuZGVnKEQuYXRhbihhKSl9LGMuYXRhbjI9ZnVuY3Rpb24oYSl7cmV0dXJuIGMuZGVnKEQuYXRhbjIoYSkpfSxjLmFuZ2xlPWosYy5sZW49ZnVuY3Rpb24oYSxiLGQsZSl7cmV0dXJuIE1hdGguc3FydChjLmxlbjIoYSxiLGQsZSkpfSxjLmxlbjI9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuKGEtYykqKGEtYykrKGItZCkqKGItZCl9LGMuY2xvc2VzdFBvaW50PWZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEpe3ZhciBkPWEueC1iLGU9YS55LWM7cmV0dXJuIGQqZCtlKmV9Zm9yKHZhciBlLGYsZyxoLGk9YS5ub2RlLGo9aS5nZXRUb3RhbExlbmd0aCgpLGs9ai9pLnBhdGhTZWdMaXN0Lm51bWJlck9mSXRlbXMqLjEyNSxsPTEvMCxtPTA7aj49bTttKz1rKShoPWQoZz1pLmdldFBvaW50QXRMZW5ndGgobSkpKTxsJiYoZT1nLGY9bSxsPWgpO2ZvcihrKj0uNTtrPi41Oyl7dmFyIG4sbyxwLHEscixzOyhwPWYtayk+PTAmJihyPWQobj1pLmdldFBvaW50QXRMZW5ndGgocCkpKTxsPyhlPW4sZj1wLGw9cik6KHE9ZitrKTw9aiYmKHM9ZChvPWkuZ2V0UG9pbnRBdExlbmd0aChxKSkpPGw/KGU9byxmPXEsbD1zKTprKj0uNX1yZXR1cm4gZT17eDplLngseTplLnksbGVuZ3RoOmYsZGlzdGFuY2U6TWF0aC5zcXJ0KGwpfX0sYy5pcz1lLGMuc25hcFRvPWZ1bmN0aW9uKGEsYixjKXtpZihjPWUoYywiZmluaXRlIik/YzoxMCxlKGEsImFycmF5Iikpe2Zvcih2YXIgZD1hLmxlbmd0aDtkLS07KWlmKEcoYVtkXS1iKTw9YylyZXR1cm4gYVtkXX1lbHNle2E9K2E7dmFyIGY9YiVhO2lmKGM+ZilyZXR1cm4gYi1mO2lmKGY+YS1jKXJldHVybiBiLWYrYX1yZXR1cm4gYn0sYy5nZXRSR0I9aShmdW5jdGlvbihhKXtpZighYXx8KGE9QShhKSkuaW5kZXhPZigiLSIpKzEpcmV0dXJue3I6LTEsZzotMSxiOi0xLGhleDoibm9uZSIsZXJyb3I6MSx0b1N0cmluZzpafTtpZigibm9uZSI9PWEpcmV0dXJue3I6LTEsZzotMSxiOi0xLGhleDoibm9uZSIsdG9TdHJpbmc6Wn07aWYoIShNW3pdKGEudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMCwyKSl8fCIjIj09YS5jaGFyQXQoKSkmJihhPVcoYSkpLCFhKXJldHVybntyOi0xLGc6LTEsYjotMSxoZXg6Im5vbmUiLGVycm9yOjEsdG9TdHJpbmc6Wn07dmFyIGIsZCxmLGcsaCxpLGo9YS5tYXRjaChLKTtyZXR1cm4gaj8oalsyXSYmKGY9QyhqWzJdLnN1YnN0cmluZyg1KSwxNiksZD1DKGpbMl0uc3Vic3RyaW5nKDMsNSksMTYpLGI9QyhqWzJdLnN1YnN0cmluZygxLDMpLDE2KSksalszXSYmKGY9QygoaD1qWzNdLmNoYXJBdCgzKSkraCwxNiksZD1DKChoPWpbM10uY2hhckF0KDIpKStoLDE2KSxiPUMoKGg9alszXS5jaGFyQXQoMSkpK2gsMTYpKSxqWzRdJiYoaT1qWzRdLnNwbGl0KEwpLGI9QihpWzBdKSwiJSI9PWlbMF0uc2xpY2UoLTEpJiYoYio9Mi41NSksZD1CKGlbMV0pLCIlIj09aVsxXS5zbGljZSgtMSkmJihkKj0yLjU1KSxmPUIoaVsyXSksIiUiPT1pWzJdLnNsaWNlKC0xKSYmKGYqPTIuNTUpLCJyZ2JhIj09alsxXS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNCkmJihnPUIoaVszXSkpLGlbM10mJiIlIj09aVszXS5zbGljZSgtMSkmJihnLz0xMDApKSxqWzVdPyhpPWpbNV0uc3BsaXQoTCksYj1CKGlbMF0pLCIlIj09aVswXS5zbGljZSgtMSkmJihiLz0xMDApLGQ9QihpWzFdKSwiJSI9PWlbMV0uc2xpY2UoLTEpJiYoZC89MTAwKSxmPUIoaVsyXSksIiUiPT1pWzJdLnNsaWNlKC0xKSYmKGYvPTEwMCksKCJkZWciPT1pWzBdLnNsaWNlKC0zKXx8IsKwIj09aVswXS5zbGljZSgtMSkpJiYoYi89MzYwKSwiaHNiYSI9PWpbMV0udG9Mb3dlckNhc2UoKS5zbGljZSgwLDQpJiYoZz1CKGlbM10pKSxpWzNdJiYiJSI9PWlbM10uc2xpY2UoLTEpJiYoZy89MTAwKSxjLmhzYjJyZ2IoYixkLGYsZykpOmpbNl0/KGk9als2XS5zcGxpdChMKSxiPUIoaVswXSksIiUiPT1pWzBdLnNsaWNlKC0xKSYmKGIvPTEwMCksZD1CKGlbMV0pLCIlIj09aVsxXS5zbGljZSgtMSkmJihkLz0xMDApLGY9QihpWzJdKSwiJSI9PWlbMl0uc2xpY2UoLTEpJiYoZi89MTAwKSwoImRlZyI9PWlbMF0uc2xpY2UoLTMpfHwiwrAiPT1pWzBdLnNsaWNlKC0xKSkmJihiLz0zNjApLCJoc2xhIj09alsxXS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNCkmJihnPUIoaVszXSkpLGlbM10mJiIlIj09aVszXS5zbGljZSgtMSkmJihnLz0xMDApLGMuaHNsMnJnYihiLGQsZixnKSk6KGI9RihELnJvdW5kKGIpLDI1NSksZD1GKEQucm91bmQoZCksMjU1KSxmPUYoRC5yb3VuZChmKSwyNTUpLGc9RihFKGcsMCksMSksaj17cjpiLGc6ZCxiOmYsdG9TdHJpbmc6Wn0sai5oZXg9IiMiKygxNjc3NzIxNnxmfGQ8PDh8Yjw8MTYpLnRvU3RyaW5nKDE2KS5zbGljZSgxKSxqLm9wYWNpdHk9ZShnLCJmaW5pdGUiKT9nOjEsaikpOntyOi0xLGc6LTEsYjotMSxoZXg6Im5vbmUiLGVycm9yOjEsdG9TdHJpbmc6Wn19LGMpLGMuaHNiPWkoZnVuY3Rpb24oYSxiLGQpe3JldHVybiBjLmhzYjJyZ2IoYSxiLGQpLmhleH0pLGMuaHNsPWkoZnVuY3Rpb24oYSxiLGQpe3JldHVybiBjLmhzbDJyZ2IoYSxiLGQpLmhleH0pLGMucmdiPWkoZnVuY3Rpb24oYSxiLGMsZCl7aWYoZShkLCJmaW5pdGUiKSl7dmFyIGY9RC5yb3VuZDtyZXR1cm4icmdiYSgiK1tmKGEpLGYoYiksZihjKSwrZC50b0ZpeGVkKDIpXSsiKSJ9cmV0dXJuIiMiKygxNjc3NzIxNnxjfGI8PDh8YTw8MTYpLnRvU3RyaW5nKDE2KS5zbGljZSgxKX0pO3ZhciBXPWZ1bmN0aW9uKGEpe3ZhciBiPXkuZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF18fHkuZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzdmciKVswXSxjPSJyZ2IoMjU1LCAwLCAwKSI7cmV0dXJuKFc9aShmdW5jdGlvbihhKXtpZigicmVkIj09YS50b0xvd2VyQ2FzZSgpKXJldHVybiBjO2Iuc3R5bGUuY29sb3I9YyxiLnN0eWxlLmNvbG9yPWE7dmFyIGQ9eS5kb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShiLEkpLmdldFByb3BlcnR5VmFsdWUoImNvbG9yIik7cmV0dXJuIGQ9PWM/bnVsbDpkfSkpKGEpfSxYPWZ1bmN0aW9uKCl7cmV0dXJuImhzYigiK1t0aGlzLmgsdGhpcy5zLHRoaXMuYl0rIikifSxZPWZ1bmN0aW9uKCl7cmV0dXJuImhzbCgiK1t0aGlzLmgsdGhpcy5zLHRoaXMubF0rIikifSxaPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PXRoaXMub3BhY2l0eXx8bnVsbD09dGhpcy5vcGFjaXR5P3RoaXMuaGV4OiJyZ2JhKCIrW3RoaXMucix0aGlzLmcsdGhpcy5iLHRoaXMub3BhY2l0eV0rIikifSwkPWZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1iJiZlKGEsIm9iamVjdCIpJiYiciJpbiBhJiYiZyJpbiBhJiYiYiJpbiBhJiYoZD1hLmIsYj1hLmcsYT1hLnIpLG51bGw9PWImJmUoYSxzdHJpbmcpKXt2YXIgZj1jLmdldFJHQihhKTthPWYucixiPWYuZyxkPWYuYn1yZXR1cm4oYT4xfHxiPjF8fGQ+MSkmJihhLz0yNTUsYi89MjU1LGQvPTI1NSksW2EsYixkXX0sXz1mdW5jdGlvbihhLGIsZCxmKXthPUQucm91bmQoMjU1KmEpLGI9RC5yb3VuZCgyNTUqYiksZD1ELnJvdW5kKDI1NSpkKTt2YXIgZz17cjphLGc6YixiOmQsb3BhY2l0eTplKGYsImZpbml0ZSIpP2Y6MSxoZXg6Yy5yZ2IoYSxiLGQpLHRvU3RyaW5nOlp9O3JldHVybiBlKGYsImZpbml0ZSIpJiYoZy5vcGFjaXR5PWYpLGd9O2MuY29sb3I9ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIGUoYSwib2JqZWN0IikmJiJoImluIGEmJiJzImluIGEmJiJiImluIGE/KGI9Yy5oc2IycmdiKGEpLGEucj1iLnIsYS5nPWIuZyxhLmI9Yi5iLGEub3BhY2l0eT0xLGEuaGV4PWIuaGV4KTplKGEsIm9iamVjdCIpJiYiaCJpbiBhJiYicyJpbiBhJiYibCJpbiBhPyhiPWMuaHNsMnJnYihhKSxhLnI9Yi5yLGEuZz1iLmcsYS5iPWIuYixhLm9wYWNpdHk9MSxhLmhleD1iLmhleCk6KGUoYSwic3RyaW5nIikmJihhPWMuZ2V0UkdCKGEpKSxlKGEsIm9iamVjdCIpJiYiciJpbiBhJiYiZyJpbiBhJiYiYiJpbiBhJiYhKCJlcnJvciJpbiBhKT8oYj1jLnJnYjJoc2woYSksYS5oPWIuaCxhLnM9Yi5zLGEubD1iLmwsYj1jLnJnYjJoc2IoYSksYS52PWIuYik6KGE9e2hleDoibm9uZSJ9LGEucj1hLmc9YS5iPWEuaD1hLnM9YS52PWEubD0tMSxhLmVycm9yPTEpKSxhLnRvU3RyaW5nPVosYX0sYy5oc2IycmdiPWZ1bmN0aW9uKGEsYixjLGQpe2UoYSwib2JqZWN0IikmJiJoImluIGEmJiJzImluIGEmJiJiImluIGEmJihjPWEuYixiPWEucyxkPWEubyxhPWEuaCksYSo9MzYwO3ZhciBmLGcsaCxpLGo7cmV0dXJuIGE9YSUzNjAvNjAsaj1jKmIsaT1qKigxLUcoYSUyLTEpKSxmPWc9aD1jLWosYT1+fmEsZis9W2osaSwwLDAsaSxqXVthXSxnKz1baSxqLGosaSwwLDBdW2FdLGgrPVswLDAsaSxqLGosaV1bYV0sXyhmLGcsaCxkKX0sYy5oc2wycmdiPWZ1bmN0aW9uKGEsYixjLGQpe2UoYSwib2JqZWN0IikmJiJoImluIGEmJiJzImluIGEmJiJsImluIGEmJihjPWEubCxiPWEucyxhPWEuaCksKGE+MXx8Yj4xfHxjPjEpJiYoYS89MzYwLGIvPTEwMCxjLz0xMDApLGEqPTM2MDt2YXIgZixnLGgsaSxqO3JldHVybiBhPWElMzYwLzYwLGo9MipiKiguNT5jP2M6MS1jKSxpPWoqKDEtRyhhJTItMSkpLGY9Zz1oPWMtai8yLGE9fn5hLGYrPVtqLGksMCwwLGksal1bYV0sZys9W2ksaixqLGksMCwwXVthXSxoKz1bMCwwLGksaixqLGldW2FdLF8oZixnLGgsZCl9LGMucmdiMmhzYj1mdW5jdGlvbihhLGIsYyl7Yz0kKGEsYixjKSxhPWNbMF0sYj1jWzFdLGM9Y1syXTt2YXIgZCxlLGYsZztyZXR1cm4gZj1FKGEsYixjKSxnPWYtRihhLGIsYyksZD0wPT1nP251bGw6Zj09YT8oYi1jKS9nOmY9PWI/KGMtYSkvZysyOihhLWIpL2crNCxkPShkKzM2MCklNio2MC8zNjAsZT0wPT1nPzA6Zy9mLHtoOmQsczplLGI6Zix0b1N0cmluZzpYfX0sYy5yZ2IyaHNsPWZ1bmN0aW9uKGEsYixjKXtjPSQoYSxiLGMpLGE9Y1swXSxiPWNbMV0sYz1jWzJdO3ZhciBkLGUsZixnLGgsaTtyZXR1cm4gZz1FKGEsYixjKSxoPUYoYSxiLGMpLGk9Zy1oLGQ9MD09aT9udWxsOmc9PWE/KGItYykvaTpnPT1iPyhjLWEpL2krMjooYS1iKS9pKzQsZD0oZCszNjApJTYqNjAvMzYwLGY9KGcraCkvMixlPTA9PWk/MDouNT5mP2kvKDIqZik6aS8oMi0yKmYpLHtoOmQsczplLGw6Zix0b1N0cmluZzpZfX0sYy5wYXJzZVBhdGhTdHJpbmc9ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuIG51bGw7dmFyIGI9Yy5wYXRoKGEpO2lmKGIuYXJyKXJldHVybiBjLnBhdGguY2xvbmUoYi5hcnIpO3ZhciBkPXthOjcsYzo2LG86MixoOjEsbDoyLG06MixyOjQscTo0LHM6NCx0OjIsdjoxLHU6Myx6OjB9LGY9W107cmV0dXJuIGUoYSwiYXJyYXkiKSYmZShhWzBdLCJhcnJheSIpJiYoZj1jLnBhdGguY2xvbmUoYSkpLGYubGVuZ3RofHxBKGEpLnJlcGxhY2UoTixmdW5jdGlvbihhLGIsYyl7dmFyIGU9W10sZz1iLnRvTG93ZXJDYXNlKCk7aWYoYy5yZXBsYWNlKFAsZnVuY3Rpb24oYSxiKXtiJiZlLnB1c2goK2IpfSksIm0iPT1nJiZlLmxlbmd0aD4yJiYoZi5wdXNoKFtiXS5jb25jYXQoZS5zcGxpY2UoMCwyKSkpLGc9ImwiLGI9Im0iPT1iPyJsIjoiTCIpLCJvIj09ZyYmMT09ZS5sZW5ndGgmJmYucHVzaChbYixlWzBdXSksInIiPT1nKWYucHVzaChbYl0uY29uY2F0KGUpKTtlbHNlIGZvcig7ZS5sZW5ndGg+PWRbZ10mJihmLnB1c2goW2JdLmNvbmNhdChlLnNwbGljZSgwLGRbZ10pKSksZFtnXSk7KTt9KSxmLnRvU3RyaW5nPWMucGF0aC50b1N0cmluZyxiLmFycj1jLnBhdGguY2xvbmUoZiksZn07dmFyIGFhPWMucGFyc2VUcmFuc2Zvcm1TdHJpbmc9ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuIG51bGw7dmFyIGI9W107cmV0dXJuIGUoYSwiYXJyYXkiKSYmZShhWzBdLCJhcnJheSIpJiYoYj1jLnBhdGguY2xvbmUoYSkpLGIubGVuZ3RofHxBKGEpLnJlcGxhY2UoTyxmdW5jdGlvbihhLGMsZCl7dmFyIGU9W107Yy50b0xvd2VyQ2FzZSgpO2QucmVwbGFjZShQLGZ1bmN0aW9uKGEsYil7YiYmZS5wdXNoKCtiKX0pLGIucHVzaChbY10uY29uY2F0KGUpKX0pLGIudG9TdHJpbmc9Yy5wYXRoLnRvU3RyaW5nLGJ9O2MuXy5zdmdUcmFuc2Zvcm0yc3RyaW5nPW0sYy5fLnJnVHJhbnNmb3JtPS9eW2Etel1bXHNdKi0/XC4/XGQvaSxjLl8udHJhbnNmb3JtMm1hdHJpeD1uLGMuX3VuaXQycHg9cTt5LmRvYy5jb250YWluc3x8eS5kb2MuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ZnVuY3Rpb24oYSxiKXt2YXIgYz05PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PWR8fCEoIWR8fDEhPWQubm9kZVR5cGV8fCEoYy5jb250YWlucz9jLmNvbnRhaW5zKGQpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZCkpKX06ZnVuY3Rpb24oYSxiKXtpZihiKWZvcig7YjspaWYoYj1iLnBhcmVudE5vZGUsYj09YSlyZXR1cm4hMDtyZXR1cm4hMX07Yy5fLmdldFNvbWVEZWZzPW8sYy5fLmdldFNvbWVTVkc9cCxjLnNlbGVjdD1mdW5jdGlvbihhKXtyZXR1cm4gYT1BKGEpLnJlcGxhY2UoLyhbXlxcXSk6L2csIiQxXFw6Iiksdyh5LmRvYy5xdWVyeVNlbGVjdG9yKGEpKX0sYy5zZWxlY3RBbGw9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXkuZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoYSksZD0oYy5zZXR8fEFycmF5KSgpLGU9MDtlPGIubGVuZ3RoO2UrKylkLnB1c2godyhiW2VdKSk7cmV0dXJuIGR9LHNldEludGVydmFsKGZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIFYpaWYoVlt6XShhKSl7dmFyIGI9VlthXSxjPWIubm9kZTsoInN2ZyIhPWIudHlwZSYmIWMub3duZXJTVkdFbGVtZW50fHwic3ZnIj09Yi50eXBlJiYoIWMucGFyZW50Tm9kZXx8Im93bmVyU1ZHRWxlbWVudCJpbiBjLnBhcmVudE5vZGUmJiFjLm93bmVyU1ZHRWxlbWVudCkpJiZkZWxldGUgVlthXX19LDFlNCkscy5wcm90b3R5cGUuYXR0cj1mdW5jdGlvbihhLGMpe3ZhciBkPXRoaXMsZj1kLm5vZGU7aWYoIWEpe2lmKDEhPWYubm9kZVR5cGUpcmV0dXJue3RleHQ6Zi5ub2RlVmFsdWV9O2Zvcih2YXIgZz1mLmF0dHJpYnV0ZXMsaD17fSxpPTAsaj1nLmxlbmd0aDtqPmk7aSsrKWhbZ1tpXS5ub2RlTmFtZV09Z1tpXS5ub2RlVmFsdWU7cmV0dXJuIGh9aWYoZShhLCJzdHJpbmciKSl7aWYoIShhcmd1bWVudHMubGVuZ3RoPjEpKXJldHVybiBiKCJzbmFwLnV0aWwuZ2V0YXR0ci4iK2EsZCkuZmlyc3REZWZpbmVkKCk7dmFyIGs9e307a1thXT1jLGE9a31mb3IodmFyIGwgaW4gYSlhW3pdKGwpJiZiKCJzbmFwLnV0aWwuYXR0ci4iK2wsZCxhW2xdKTtyZXR1cm4gZH0sYy5wYXJzZT1mdW5jdGlvbihhKXt2YXIgYj15LmRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksYz0hMCxkPXkuZG9jLmNyZWF0ZUVsZW1lbnQoImRpdiIpO2lmKGE9QShhKSxhLm1hdGNoKC9eXHMqPFxzKnN2Zyg/OlxzfD4pLyl8fChhPSI8c3ZnPiIrYSsiPC9zdmc+IixjPSExKSxkLmlubmVySFRNTD1hLGE9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgic3ZnIilbMF0paWYoYyliPWE7ZWxzZSBmb3IoO2EuZmlyc3RDaGlsZDspYi5hcHBlbmRDaGlsZChhLmZpcnN0Q2hpbGQpO3JldHVybiBuZXcgdChiKX0sYy5mcmFnbWVudD1mdW5jdGlvbigpe2Zvcih2YXIgYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCksYj15LmRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyl7dmFyIGY9YVtkXTtmLm5vZGUmJmYubm9kZS5ub2RlVHlwZSYmYi5hcHBlbmRDaGlsZChmLm5vZGUpLGYubm9kZVR5cGUmJmIuYXBwZW5kQ2hpbGQoZiksInN0cmluZyI9PXR5cGVvZiBmJiZiLmFwcGVuZENoaWxkKGMucGFyc2UoZikubm9kZSl9cmV0dXJuIG5ldyB0KGIpfSxjLl8ubWFrZT11LGMuXy53cmFwPXcsdi5wcm90b3R5cGUuZWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz11KGEsdGhpcy5ub2RlKTtyZXR1cm4gYiYmYy5hdHRyKGIpLGN9LHMucHJvdG90eXBlLmNoaWxkcmVuPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9dGhpcy5ub2RlLmNoaWxkTm9kZXMsZD0wLGU9Yi5sZW5ndGg7ZT5kO2QrKylhW2RdPWMoYltkXSk7cmV0dXJuIGF9LHMucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPVtdO3JldHVybiB4KFt0aGlzXSxhKSxhWzBdfSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ciIsZnVuY3Rpb24oKXt2YXIgYT1iLm50KCk7YT1hLnN1YnN0cmluZyhhLmxhc3RJbmRleE9mKCIuIikrMSk7dmFyIGM9YS5yZXBsYWNlKC9bQS1aXS9nLGZ1bmN0aW9uKGEpe3JldHVybiItIithLnRvTG93ZXJDYXNlKCl9KTtyZXR1cm4gYmFbel0oYyk/dGhpcy5ub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5vZGUsbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShjKTpkKHRoaXMubm9kZSxhKX0pO3ZhciBiYT17ImFsaWdubWVudC1iYXNlbGluZSI6MCwiYmFzZWxpbmUtc2hpZnQiOjAsY2xpcDowLCJjbGlwLXBhdGgiOjAsImNsaXAtcnVsZSI6MCxjb2xvcjowLCJjb2xvci1pbnRlcnBvbGF0aW9uIjowLCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMiOjAsImNvbG9yLXByb2ZpbGUiOjAsImNvbG9yLXJlbmRlcmluZyI6MCxjdXJzb3I6MCxkaXJlY3Rpb246MCxkaXNwbGF5OjAsImRvbWluYW50LWJhc2VsaW5lIjowLCJlbmFibGUtYmFja2dyb3VuZCI6MCxmaWxsOjAsImZpbGwtb3BhY2l0eSI6MCwiZmlsbC1ydWxlIjowLGZpbHRlcjowLCJmbG9vZC1jb2xvciI6MCwiZmxvb2Qtb3BhY2l0eSI6MCxmb250OjAsImZvbnQtZmFtaWx5IjowLCJmb250LXNpemUiOjAsImZvbnQtc2l6ZS1hZGp1c3QiOjAsImZvbnQtc3RyZXRjaCI6MCwiZm9udC1zdHlsZSI6MCwiZm9udC12YXJpYW50IjowLCJmb250LXdlaWdodCI6MCwiZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCI6MCwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwiOjAsImltYWdlLXJlbmRlcmluZyI6MCxrZXJuaW5nOjAsImxldHRlci1zcGFjaW5nIjowLCJsaWdodGluZy1jb2xvciI6MCxtYXJrZXI6MCwibWFya2VyLWVuZCI6MCwibWFya2VyLW1pZCI6MCwibWFya2VyLXN0YXJ0IjowLG1hc2s6MCxvcGFjaXR5OjAsb3ZlcmZsb3c6MCwicG9pbnRlci1ldmVudHMiOjAsInNoYXBlLXJlbmRlcmluZyI6MCwic3RvcC1jb2xvciI6MCwic3RvcC1vcGFjaXR5IjowLHN0cm9rZTowLCJzdHJva2UtZGFzaGFycmF5IjowLCJzdHJva2UtZGFzaG9mZnNldCI6MCwic3Ryb2tlLWxpbmVjYXAiOjAsInN0cm9rZS1saW5lam9pbiI6MCwic3Ryb2tlLW1pdGVybGltaXQiOjAsInN0cm9rZS1vcGFjaXR5IjowLCJzdHJva2Utd2lkdGgiOjAsInRleHQtYW5jaG9yIjowLCJ0ZXh0LWRlY29yYXRpb24iOjAsInRleHQtcmVuZGVyaW5nIjowLCJ1bmljb2RlLWJpZGkiOjAsdmlzaWJpbGl0eTowLCJ3b3JkLXNwYWNpbmciOjAsIndyaXRpbmctbW9kZSI6MH07Yi5vbigic25hcC51dGlsLmF0dHIiLGZ1bmN0aW9uKGEpe3ZhciBjPWIubnQoKSxlPXt9O2M9Yy5zdWJzdHJpbmcoYy5sYXN0SW5kZXhPZigiLiIpKzEpLGVbY109YTt2YXIgZj1jLnJlcGxhY2UoLy0oXHcpL2dpLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX0pLGc9Yy5yZXBsYWNlKC9bQS1aXS9nLGZ1bmN0aW9uKGEpe3JldHVybiItIithLnRvTG93ZXJDYXNlKCl9KTtiYVt6XShnKT90aGlzLm5vZGUuc3R5bGVbZl09bnVsbD09YT9JOmE6ZCh0aGlzLm5vZGUsZSl9KSxmdW5jdGlvbihhKXt9KHYucHJvdG90eXBlKSxjLmFqYXg9ZnVuY3Rpb24oYSxjLGQsZil7dmFyIGc9bmV3IFhNTEh0dHBSZXF1ZXN0LGg9UygpO2lmKGcpe2lmKGUoYywiZnVuY3Rpb24iKSlmPWQsZD1jLGM9bnVsbDtlbHNlIGlmKGUoYywib2JqZWN0Iikpe3ZhciBpPVtdO2Zvcih2YXIgaiBpbiBjKWMuaGFzT3duUHJvcGVydHkoaikmJmkucHVzaChlbmNvZGVVUklDb21wb25lbnQoaikrIj0iK2VuY29kZVVSSUNvbXBvbmVudChjW2pdKSk7Yz1pLmpvaW4oIiYiKX1yZXR1cm4gZy5vcGVuKGM/IlBPU1QiOiJHRVQiLGEsITApLGMmJihnLnNldFJlcXVlc3RIZWFkZXIoIlgtUmVxdWVzdGVkLVdpdGgiLCJYTUxIdHRwUmVxdWVzdCIpLGcuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC10eXBlIiwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIikpLGQmJihiLm9uY2UoInNuYXAuYWpheC4iK2grIi4wIixkKSxiLm9uY2UoInNuYXAuYWpheC4iK2grIi4yMDAiLGQpLGIub25jZSgic25hcC5hamF4LiIraCsiLjMwNCIsZCkpLGcub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09Zy5yZWFkeVN0YXRlJiZiKCJzbmFwLmFqYXguIitoKyIuIitnLnN0YXR1cyxmLGcpfSw0PT1nLnJlYWR5U3RhdGU/ZzooZy5zZW5kKGMpLGcpfX0sYy5sb2FkPWZ1bmN0aW9uKGEsYixkKXtjLmFqYXgoYSxmdW5jdGlvbihhKXt2YXIgZT1jLnBhcnNlKGEucmVzcG9uc2VUZXh0KTtkP2IuY2FsbChkLGUpOmIoZSl9KX07dmFyIGNhPWZ1bmN0aW9uKGEpe3ZhciBiPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksYz1hLm93bmVyRG9jdW1lbnQsZD1jLmJvZHksZT1jLmRvY3VtZW50RWxlbWVudCxmPWUuY2xpZW50VG9wfHxkLmNsaWVudFRvcHx8MCxoPWUuY2xpZW50TGVmdHx8ZC5jbGllbnRMZWZ0fHwwLGk9Yi50b3ArKGcud2luLnBhZ2VZT2Zmc2V0fHxlLnNjcm9sbFRvcHx8ZC5zY3JvbGxUb3ApLWYsaj1iLmxlZnQrKGcud2luLnBhZ2VYT2Zmc2V0fHxlLnNjcm9sbExlZnR8fGQuc2Nyb2xsTGVmdCktaDtyZXR1cm57eTppLHg6an19O3JldHVybiBjLmdldEVsZW1lbnRCeVBvaW50PWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPShjLmNhbnZhcyx5LmRvYy5lbGVtZW50RnJvbVBvaW50KGEsYikpO2lmKHkud2luLm9wZXJhJiYic3ZnIj09ZC50YWdOYW1lKXt2YXIgZT1jYShkKSxmPWQuY3JlYXRlU1ZHUmVjdCgpO2YueD1hLWUueCxmLnk9Yi1lLnksZi53aWR0aD1mLmhlaWdodD0xO3ZhciBnPWQuZ2V0SW50ZXJzZWN0aW9uTGlzdChmLG51bGwpO2cubGVuZ3RoJiYoZD1nW2cubGVuZ3RoLTFdKX1yZXR1cm4gZD93KGQpOm51bGx9LGMucGx1Z2luPWZ1bmN0aW9uKGEpe2EoYyxzLHYseSx0KX0seS53aW4uU25hcD1jLGN9KGF8fHRoaXMpO3JldHVybiBkLnBsdWdpbihmdW5jdGlvbihjLGQsZSxmLGcpe2Z1bmN0aW9uIGgoYSxiKXtpZihudWxsPT1iKXt2YXIgZD0hMDtpZihiPSJsaW5lYXJHcmFkaWVudCI9PWEudHlwZXx8InJhZGlhbEdyYWRpZW50Ij09YS50eXBlP2Eubm9kZS5nZXRBdHRyaWJ1dGUoImdyYWRpZW50VHJhbnNmb3JtIik6InBhdHRlcm4iPT1hLnR5cGU/YS5ub2RlLmdldEF0dHJpYnV0ZSgicGF0dGVyblRyYW5zZm9ybSIpOmEubm9kZS5nZXRBdHRyaWJ1dGUoInRyYW5zZm9ybSIpLCFiKXJldHVybiBuZXcgYy5NYXRyaXg7Yj1jLl8uc3ZnVHJhbnNmb3JtMnN0cmluZyhiKX1lbHNlIGI9Yy5fLnJnVHJhbnNmb3JtLnRlc3QoYik/bShiKS5yZXBsYWNlKC9cLnszfXxcdTIwMjYvZyxhLl8udHJhbnNmb3JtfHwiIik6Yy5fLnN2Z1RyYW5zZm9ybTJzdHJpbmcoYiksbChiLCJhcnJheSIpJiYoYj1jLnBhdGg/Yy5wYXRoLnRvU3RyaW5nLmNhbGwoYik6bShiKSksYS5fLnRyYW5zZm9ybT1iO3ZhciBlPWMuXy50cmFuc2Zvcm0ybWF0cml4KGIsYS5nZXRCQm94KDEpKTtyZXR1cm4gZD9lOnZvaWQoYS5tYXRyaXg9ZSl9ZnVuY3Rpb24gaShhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGQ9byhhLm5vZGUsYik7ZD1kJiZkLm1hdGNoKGcpLGQ9ZCYmZFsyXSxkJiYiIyI9PWQuY2hhckF0KCkmJihkPWQuc3Vic3RyaW5nKDEpLGQmJihpW2RdPShpW2RdfHxbXSkuY29uY2F0KGZ1bmN0aW9uKGQpe3ZhciBlPXt9O2VbYl09Yy51cmwoZCksbyhhLm5vZGUsZSl9KSkpfWZ1bmN0aW9uIGQoYSl7dmFyIGI9byhhLm5vZGUsInhsaW5rOmhyZWYiKTtiJiYiIyI9PWIuY2hhckF0KCkmJihiPWIuc3Vic3RyaW5nKDEpLGImJihpW2JdPShpW2JdfHxbXSkuY29uY2F0KGZ1bmN0aW9uKGIpe2EuYXR0cigieGxpbms6aHJlZiIsIiMiK2IpfSkpKX1mb3IodmFyIGUsZj1hLnNlbGVjdEFsbCgiKiIpLGc9L15ccyp1cmxcKCgifCd8KSguKilcMVwpXHMqJC8saD1bXSxpPXt9LGo9MCxrPWYubGVuZ3RoO2s+ajtqKyspe2U9ZltqXSxiKGUsImZpbGwiKSxiKGUsInN0cm9rZSIpLGIoZSwiZmlsdGVyIiksYihlLCJtYXNrIiksYihlLCJjbGlwLXBhdGgiKSxkKGUpO3ZhciBsPW8oZS5ub2RlLCJpZCIpO2wmJihvKGUubm9kZSx7aWQ6ZS5pZH0pLGgucHVzaCh7b2xkOmwsaWQ6ZS5pZH0pKX1mb3Ioaj0wLGs9aC5sZW5ndGg7az5qO2orKyl7dmFyIG09aVtoW2pdLm9sZF07aWYobSlmb3IodmFyIG49MCxwPW0ubGVuZ3RoO3A+bjtuKyspbVtuXShoW2pdLmlkKX19ZnVuY3Rpb24gaihhKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYj1hPyI8Iit0aGlzLnR5cGU6IiIsYz10aGlzLm5vZGUuYXR0cmlidXRlcyxkPXRoaXMubm9kZS5jaGlsZE5vZGVzO2lmKGEpZm9yKHZhciBlPTAsZj1jLmxlbmd0aDtmPmU7ZSsrKWIrPSIgIitjW2VdLm5hbWUrJz0iJytjW2VdLnZhbHVlLnJlcGxhY2UoLyIvZywnXFwiJykrJyInO2lmKGQubGVuZ3RoKXtmb3IoYSYmKGIrPSI+IiksZT0wLGY9ZC5sZW5ndGg7Zj5lO2UrKykzPT1kW2VdLm5vZGVUeXBlP2IrPWRbZV0ubm9kZVZhbHVlOjE9PWRbZV0ubm9kZVR5cGUmJihiKz1zKGRbZV0pLnRvU3RyaW5nKCkpO2EmJihiKz0iPC8iK3RoaXMudHlwZSsiPiIpfWVsc2UgYSYmKGIrPSIvPiIpO3JldHVybiBifX12YXIgaz1kLnByb3RvdHlwZSxsPWMuaXMsbT1TdHJpbmcsbj1jLl91bml0MnB4LG89Yy5fLiQscD1jLl8ubWFrZSxxPWMuXy5nZXRTb21lRGVmcyxyPSJoYXNPd25Qcm9wZXJ0eSIscz1jLl8ud3JhcDtrLmdldEJCb3g9ZnVuY3Rpb24oYSl7aWYoInRzcGFuIj09dGhpcy50eXBlKXJldHVybiBjLl8uYm94KHRoaXMubm9kZS5nZXRDbGllbnRSZWN0cygpLml0ZW0oMCkpO2lmKCFjLk1hdHJpeHx8IWMucGF0aClyZXR1cm4gdGhpcy5ub2RlLmdldEJCb3goKTt2YXIgYj10aGlzLGQ9bmV3IGMuTWF0cml4O2lmKGIucmVtb3ZlZClyZXR1cm4gYy5fLmJveCgpO2Zvcig7InVzZSI9PWIudHlwZTspaWYoYXx8KGQ9ZC5hZGQoYi50cmFuc2Zvcm0oKS5sb2NhbE1hdHJpeC50cmFuc2xhdGUoYi5hdHRyKCJ4Iil8fDAsYi5hdHRyKCJ5Iil8fDApKSksYi5vcmlnaW5hbCliPWIub3JpZ2luYWw7ZWxzZXt2YXIgZT1iLmF0dHIoInhsaW5rOmhyZWYiKTtiPWIub3JpZ2luYWw9Yi5ub2RlLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZS5zdWJzdHJpbmcoZS5pbmRleE9mKCIjIikrMSkpfXZhciBmPWIuXyxnPWMucGF0aC5nZXRbYi50eXBlXXx8Yy5wYXRoLmdldC5kZWZsdDt0cnl7cmV0dXJuIGE/KGYuYmJveHd0PWc/Yy5wYXRoLmdldEJCb3goYi5yZWFsUGF0aD1nKGIpKTpjLl8uYm94KGIubm9kZS5nZXRCQm94KCkpLGMuXy5ib3goZi5iYm94d3QpKTooYi5yZWFsUGF0aD1nKGIpLGIubWF0cml4PWIudHJhbnNmb3JtKCkubG9jYWxNYXRyaXgsZi5iYm94PWMucGF0aC5nZXRCQm94KGMucGF0aC5tYXAoYi5yZWFsUGF0aCxkLmFkZChiLm1hdHJpeCkpKSxjLl8uYm94KGYuYmJveCkpfWNhdGNoKGgpe3JldHVybiBjLl8uYm94KCl9fTt2YXIgdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0cmluZ307ay50cmFuc2Zvcm09ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fO2lmKG51bGw9PWEpe2Zvcih2YXIgZCxlPXRoaXMsZj1uZXcgYy5NYXRyaXgodGhpcy5ub2RlLmdldENUTSgpKSxnPWgodGhpcyksaT1bZ10saj1uZXcgYy5NYXRyaXgsaz1nLnRvVHJhbnNmb3JtU3RyaW5nKCksbD1tKGcpPT1tKHRoaXMubWF0cml4KT9tKGIudHJhbnNmb3JtKTprOyJzdmciIT1lLnR5cGUmJihlPWUucGFyZW50KCkpOylpLnB1c2goaChlKSk7Zm9yKGQ9aS5sZW5ndGg7ZC0tOylqLmFkZChpW2RdKTtyZXR1cm57c3RyaW5nOmwsZ2xvYmFsTWF0cml4OmYsdG90YWxNYXRyaXg6aixsb2NhbE1hdHJpeDpnLGRpZmZNYXRyaXg6Zi5jbG9uZSgpLmFkZChnLmludmVydCgpKSxnbG9iYWw6Zi50b1RyYW5zZm9ybVN0cmluZygpLHRvdGFsOmoudG9UcmFuc2Zvcm1TdHJpbmcoKSxsb2NhbDprLHRvU3RyaW5nOnR9fXJldHVybiBhIGluc3RhbmNlb2YgYy5NYXRyaXg/KHRoaXMubWF0cml4PWEsdGhpcy5fLnRyYW5zZm9ybT1hLnRvVHJhbnNmb3JtU3RyaW5nKCkpOmgodGhpcyxhKSx0aGlzLm5vZGUmJigibGluZWFyR3JhZGllbnQiPT10aGlzLnR5cGV8fCJyYWRpYWxHcmFkaWVudCI9PXRoaXMudHlwZT9vKHRoaXMubm9kZSx7Z3JhZGllbnRUcmFuc2Zvcm06dGhpcy5tYXRyaXh9KToicGF0dGVybiI9PXRoaXMudHlwZT9vKHRoaXMubm9kZSx7cGF0dGVyblRyYW5zZm9ybTp0aGlzLm1hdHJpeH0pOm8odGhpcy5ub2RlLHt0cmFuc2Zvcm06dGhpcy5tYXRyaXh9KSksdGhpc30say5wYXJlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gcyh0aGlzLm5vZGUucGFyZW50Tm9kZSl9LGsuYXBwZW5kPWsuYWRkPWZ1bmN0aW9uKGEpe2lmKGEpe2lmKCJzZXQiPT1hLnR5cGUpe3ZhciBiPXRoaXM7cmV0dXJuIGEuZm9yRWFjaChmdW5jdGlvbihhKXtiLmFkZChhKX0pLHRoaXN9YT1zKGEpLHRoaXMubm9kZS5hcHBlbmRDaGlsZChhLm5vZGUpLGEucGFwZXI9dGhpcy5wYXBlcn1yZXR1cm4gdGhpc30say5hcHBlbmRUbz1mdW5jdGlvbihhKXtyZXR1cm4gYSYmKGE9cyhhKSxhLmFwcGVuZCh0aGlzKSksdGhpc30say5wcmVwZW5kPWZ1bmN0aW9uKGEpe2lmKGEpe2lmKCJzZXQiPT1hLnR5cGUpe3ZhciBiLGM9dGhpcztyZXR1cm4gYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2I/Yi5hZnRlcihhKTpjLnByZXBlbmQoYSksYj1hfSksdGhpc31hPXMoYSk7dmFyIGQ9YS5wYXJlbnQoKTt0aGlzLm5vZGUuaW5zZXJ0QmVmb3JlKGEubm9kZSx0aGlzLm5vZGUuZmlyc3RDaGlsZCksdGhpcy5hZGQmJnRoaXMuYWRkKCksYS5wYXBlcj10aGlzLnBhcGVyLHRoaXMucGFyZW50KCkmJnRoaXMucGFyZW50KCkuYWRkKCksZCYmZC5hZGQoKX1yZXR1cm4gdGhpc30say5wcmVwZW5kVG89ZnVuY3Rpb24oYSl7cmV0dXJuIGE9cyhhKSxhLnByZXBlbmQodGhpcyksdGhpc30say5iZWZvcmU9ZnVuY3Rpb24oYSl7aWYoInNldCI9PWEudHlwZSl7dmFyIGI9dGhpcztyZXR1cm4gYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPWEucGFyZW50KCk7Yi5ub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEubm9kZSxiLm5vZGUpLGMmJmMuYWRkKCl9KSx0aGlzLnBhcmVudCgpLmFkZCgpLHRoaXN9YT1zKGEpO3ZhciBjPWEucGFyZW50KCk7cmV0dXJuIHRoaXMubm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLm5vZGUsdGhpcy5ub2RlKSx0aGlzLnBhcmVudCgpJiZ0aGlzLnBhcmVudCgpLmFkZCgpLGMmJmMuYWRkKCksYS5wYXBlcj10aGlzLnBhcGVyLHRoaXN9LGsuYWZ0ZXI9ZnVuY3Rpb24oYSl7YT1zKGEpO3ZhciBiPWEucGFyZW50KCk7cmV0dXJuIHRoaXMubm9kZS5uZXh0U2libGluZz90aGlzLm5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYS5ub2RlLHRoaXMubm9kZS5uZXh0U2libGluZyk6dGhpcy5ub2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoYS5ub2RlKSx0aGlzLnBhcmVudCgpJiZ0aGlzLnBhcmVudCgpLmFkZCgpLGImJmIuYWRkKCksYS5wYXBlcj10aGlzLnBhcGVyLHRoaXN9LGsuaW5zZXJ0QmVmb3JlPWZ1bmN0aW9uKGEpe2E9cyhhKTt2YXIgYj10aGlzLnBhcmVudCgpO3JldHVybiBhLm5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLGEubm9kZSksdGhpcy5wYXBlcj1hLnBhcGVyLGImJmIuYWRkKCksYS5wYXJlbnQoKSYmYS5wYXJlbnQoKS5hZGQoKSx0aGlzfSxrLmluc2VydEFmdGVyPWZ1bmN0aW9uKGEpe2E9cyhhKTt2YXIgYj10aGlzLnBhcmVudCgpO3JldHVybiBhLm5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLGEubm9kZS5uZXh0U2libGluZyksdGhpcy5wYXBlcj1hLnBhcGVyLGImJmIuYWRkKCksYS5wYXJlbnQoKSYmYS5wYXJlbnQoKS5hZGQoKSx0aGlzfSxrLnJlbW92ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyZW50KCk7cmV0dXJuIHRoaXMubm9kZS5wYXJlbnROb2RlJiZ0aGlzLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpLGRlbGV0ZSB0aGlzLnBhcGVyLHRoaXMucmVtb3ZlZD0hMCxhJiZhLmFkZCgpLHRoaXN9LGsuc2VsZWN0PWZ1bmN0aW9uKGEpe3JldHVybiBzKHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKGEpKX0say5zZWxlY3RBbGw9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMubm9kZS5xdWVyeVNlbGVjdG9yQWxsKGEpLGQ9KGMuc2V0fHxBcnJheSkoKSxlPTA7ZTxiLmxlbmd0aDtlKyspZC5wdXNoKHMoYltlXSkpO3JldHVybiBkfSxrLmFzUFg9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbnVsbD09YiYmKGI9dGhpcy5hdHRyKGEpKSwrbih0aGlzLGEsYil9LGsudXNlPWZ1bmN0aW9uKCl7dmFyIGEsYj10aGlzLm5vZGUuaWQ7cmV0dXJuIGJ8fChiPXRoaXMuaWQsbyh0aGlzLm5vZGUse2lkOmJ9KSksYT0ibGluZWFyR3JhZGllbnQiPT10aGlzLnR5cGV8fCJyYWRpYWxHcmFkaWVudCI9PXRoaXMudHlwZXx8InBhdHRlcm4iPT10aGlzLnR5cGU/cCh0aGlzLnR5cGUsdGhpcy5ub2RlLnBhcmVudE5vZGUpOnAoInVzZSIsdGhpcy5ub2RlLnBhcmVudE5vZGUpLG8oYS5ub2RlLHsieGxpbms6aHJlZiI6IiMiK2J9KSxhLm9yaWdpbmFsPXRoaXMsYX0say5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXModGhpcy5ub2RlLmNsb25lTm9kZSghMCkpO3JldHVybiBvKGEubm9kZSwiaWQiKSYmbyhhLm5vZGUse2lkOmEuaWR9KSxpKGEpLGEuaW5zZXJ0QWZ0ZXIodGhpcyksYX0say50b0RlZnM9ZnVuY3Rpb24oKXt2YXIgYT1xKHRoaXMpO3JldHVybiBhLmFwcGVuZENoaWxkKHRoaXMubm9kZSksdGhpc30say5wYXR0ZXJuPWsudG9QYXR0ZXJuPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXAoInBhdHRlcm4iLHEodGhpcykpO3JldHVybiBudWxsPT1hJiYoYT10aGlzLmdldEJCb3goKSksbChhLCJvYmplY3QiKSYmIngiaW4gYSYmKGI9YS55LGM9YS53aWR0aCxkPWEuaGVpZ2h0LGE9YS54KSxvKGUubm9kZSx7eDphLHk6Yix3aWR0aDpjLGhlaWdodDpkLHBhdHRlcm5Vbml0czoidXNlclNwYWNlT25Vc2UiLGlkOmUuaWQsdmlld0JveDpbYSxiLGMsZF0uam9pbigiICIpfSksZS5ub2RlLmFwcGVuZENoaWxkKHRoaXMubm9kZSksZX0say5tYXJrZXI9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnPXAoIm1hcmtlciIscSh0aGlzKSk7cmV0dXJuIG51bGw9PWEmJihhPXRoaXMuZ2V0QkJveCgpKSxsKGEsIm9iamVjdCIpJiYieCJpbiBhJiYoYj1hLnksYz1hLndpZHRoLGQ9YS5oZWlnaHQsZT1hLnJlZlh8fGEuY3gsZj1hLnJlZll8fGEuY3ksYT1hLngpLG8oZy5ub2RlLHt2aWV3Qm94OlthLGIsYyxkXS5qb2luKCIgIiksbWFya2VyV2lkdGg6YyxtYXJrZXJIZWlnaHQ6ZCxvcmllbnQ6ImF1dG8iLHJlZlg6ZXx8MCxyZWZZOmZ8fDAsaWQ6Zy5pZH0pLGcubm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpLGd9O3ZhciB1PXt9O2suZGF0YT1mdW5jdGlvbihhLGQpe3ZhciBlPXVbdGhpcy5pZF09dVt0aGlzLmlkXXx8e307aWYoMD09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gYigic25hcC5kYXRhLmdldC4iK3RoaXMuaWQsdGhpcyxlLG51bGwpLGU7aWYoMT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYy5pcyhhLCJvYmplY3QiKSl7Zm9yKHZhciBmIGluIGEpYVtyXShmKSYmdGhpcy5kYXRhKGYsYVtmXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGIoInNuYXAuZGF0YS5nZXQuIit0aGlzLmlkLHRoaXMsZVthXSxhKSxlW2FdfXJldHVybiBlW2FdPWQsYigic25hcC5kYXRhLnNldC4iK3RoaXMuaWQsdGhpcyxkLGEpLHRoaXN9LGsucmVtb3ZlRGF0YT1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT91W3RoaXMuaWRdPXt9OnVbdGhpcy5pZF0mJmRlbGV0ZSB1W3RoaXMuaWRdW2FdLHRoaXN9LGsub3V0ZXJTVkc9ay50b1N0cmluZz1qKDEpLGsuaW5uZXJTVkc9aigpLGsudG9EYXRhVVJMPWZ1bmN0aW9uKCl7aWYoYSYmYS5idG9hKXt2YXIgYj10aGlzLmdldEJCb3goKSxkPWMuZm9ybWF0KCc8c3ZnIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgd2lkdGg9Int3aWR0aH0iIGhlaWdodD0ie2hlaWdodH0iIHZpZXdCb3g9Int4fSB7eX0ge3dpZHRofSB7aGVpZ2h0fSI+e2NvbnRlbnRzfTwvc3ZnPicse3g6K2IueC50b0ZpeGVkKDMpLHk6K2IueS50b0ZpeGVkKDMpLHdpZHRoOitiLndpZHRoLnRvRml4ZWQoMyksaGVpZ2h0OitiLmhlaWdodC50b0ZpeGVkKDMpLGNvbnRlbnRzOnRoaXMub3V0ZXJTVkcoKX0pOwpyZXR1cm4iZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGQpKSl9fSxnLnByb3RvdHlwZS5zZWxlY3Q9ay5zZWxlY3QsZy5wcm90b3R5cGUuc2VsZWN0QWxsPWsuc2VsZWN0QWxsfSksZC5wbHVnaW4oZnVuY3Rpb24oYSxkLGUsZixnKXtmdW5jdGlvbiBoKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU9ZC5zbGljZShhLGIpO3JldHVybiAxPT1lLmxlbmd0aCYmKGU9ZVswXSksYz9jKGUpOmV9fXZhciBpPWQucHJvdG90eXBlLGo9YS5pcyxrPVN0cmluZyxsPSJoYXNPd25Qcm9wZXJ0eSIsbT1mdW5jdGlvbihhLGIsZCxlKXsiZnVuY3Rpb24iIT10eXBlb2YgZHx8ZC5sZW5ndGh8fChlPWQsZD1jLmxpbmVhciksdGhpcy5hdHRyPWEsdGhpcy5kdXI9YixkJiYodGhpcy5lYXNpbmc9ZCksZSYmKHRoaXMuY2FsbGJhY2s9ZSl9O2EuXy5BbmltYXRpb249bSxhLmFuaW1hdGlvbj1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gbmV3IG0oYSxiLGMsZCl9LGkuaW5BbmltPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPVtdO2Zvcih2YXIgYyBpbiBhLmFuaW1zKWEuYW5pbXNbbF0oYykmJiFmdW5jdGlvbihhKXtiLnB1c2goe2FuaW06bmV3IG0oYS5fYXR0cnMsYS5kdXIsYS5lYXNpbmcsYS5fY2FsbGJhY2spLG1pbmE6YSxjdXJTdGF0dXM6YS5zdGF0dXMoKSxzdGF0dXM6ZnVuY3Rpb24oYil7cmV0dXJuIGEuc3RhdHVzKGIpfSxzdG9wOmZ1bmN0aW9uKCl7YS5zdG9wKCl9fSl9KGEuYW5pbXNbY10pO3JldHVybiBifSxhLmFuaW1hdGU9ZnVuY3Rpb24oYSxkLGUsZixnLGgpeyJmdW5jdGlvbiIhPXR5cGVvZiBnfHxnLmxlbmd0aHx8KGg9ZyxnPWMubGluZWFyKTt2YXIgaT1jLnRpbWUoKSxqPWMoYSxkLGksaStmLGMudGltZSxlLGcpO3JldHVybiBoJiZiLm9uY2UoIm1pbmEuZmluaXNoLiIrai5pZCxoKSxqfSxpLnN0b3A9ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5pbkFuaW0oKSxiPTAsYz1hLmxlbmd0aDtjPmI7YisrKWFbYl0uc3RvcCgpO3JldHVybiB0aGlzfSxpLmFuaW1hdGU9ZnVuY3Rpb24oYSxkLGUsZil7ImZ1bmN0aW9uIiE9dHlwZW9mIGV8fGUubGVuZ3RofHwoZj1lLGU9Yy5saW5lYXIpLGEgaW5zdGFuY2VvZiBtJiYoZj1hLmNhbGxiYWNrLGU9YS5lYXNpbmcsZD1hLmR1cixhPWEuYXR0cik7dmFyIGcsaSxuLG8scD1bXSxxPVtdLHI9e30scz10aGlzO2Zvcih2YXIgdCBpbiBhKWlmKGFbbF0odCkpe3MuZXF1YWw/KG89cy5lcXVhbCh0LGsoYVt0XSkpLGc9by5mcm9tLGk9by50byxuPW8uZik6KGc9K3MuYXR0cih0KSxpPSthW3RdKTt2YXIgdT1qKGcsImFycmF5Iik/Zy5sZW5ndGg6MTtyW3RdPWgocC5sZW5ndGgscC5sZW5ndGgrdSxuKSxwPXAuY29uY2F0KGcpLHE9cS5jb25jYXQoaSl9dmFyIHY9Yy50aW1lKCksdz1jKHAscSx2LHYrZCxjLnRpbWUsZnVuY3Rpb24oYSl7dmFyIGI9e307Zm9yKHZhciBjIGluIHIpcltsXShjKSYmKGJbY109cltjXShhKSk7cy5hdHRyKGIpfSxlKTtyZXR1cm4gcy5hbmltc1t3LmlkXT13LHcuX2F0dHJzPWEsdy5fY2FsbGJhY2s9ZixiKCJzbmFwLmFuaW1jcmVhdGVkLiIrcy5pZCx3KSxiLm9uY2UoIm1pbmEuZmluaXNoLiIrdy5pZCxmdW5jdGlvbigpe2Iub2ZmKCJtaW5hLiouIit3LmlkKSxkZWxldGUgcy5hbmltc1t3LmlkXSxmJiZmLmNhbGwocyl9KSxiLm9uY2UoIm1pbmEuc3RvcC4iK3cuaWQsZnVuY3Rpb24oKXtiLm9mZigibWluYS4qLiIrdy5pZCksZGVsZXRlIHMuYW5pbXNbdy5pZF19KSxzfX0pLGQucGx1Z2luKGZ1bmN0aW9uKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7cmV0dXJuIG51bGw9PWImJiJbb2JqZWN0IFNWR01hdHJpeF0iPT1nLmNhbGwoYSk/KHRoaXMuYT1hLmEsdGhpcy5iPWEuYix0aGlzLmM9YS5jLHRoaXMuZD1hLmQsdGhpcy5lPWEuZSx2b2lkKHRoaXMuZj1hLmYpKTp2b2lkKG51bGwhPWE/KHRoaXMuYT0rYSx0aGlzLmI9K2IsdGhpcy5jPStjLHRoaXMuZD0rZCx0aGlzLmU9K2UsdGhpcy5mPStmKToodGhpcy5hPTEsdGhpcy5iPTAsdGhpcy5jPTAsdGhpcy5kPTEsdGhpcy5lPTAsdGhpcy5mPTApKX12YXIgZz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLGg9U3RyaW5nLGk9TWF0aCxqPSIiOyFmdW5jdGlvbihiKXtmdW5jdGlvbiBjKGEpe3JldHVybiBhWzBdKmFbMF0rYVsxXSphWzFdfWZ1bmN0aW9uIGQoYSl7dmFyIGI9aS5zcXJ0KGMoYSkpO2FbMF0mJihhWzBdLz1iKSxhWzFdJiYoYVsxXS89Yil9Yi5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe2lmKGEmJmEgaW5zdGFuY2VvZiBmKXJldHVybiB0aGlzLmFkZChhLmEsYS5iLGEuYyxhLmQsYS5lLGEuZik7dmFyIGg9YSp0aGlzLmErYip0aGlzLmMsaT1hKnRoaXMuYitiKnRoaXMuZDtyZXR1cm4gdGhpcy5lKz1lKnRoaXMuYStnKnRoaXMuYyx0aGlzLmYrPWUqdGhpcy5iK2cqdGhpcy5kLHRoaXMuYz1jKnRoaXMuYStkKnRoaXMuYyx0aGlzLmQ9Yyp0aGlzLmIrZCp0aGlzLmQsdGhpcy5hPWgsdGhpcy5iPWksdGhpc30sZi5wcm90b3R5cGUubXVsdExlZnQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe2lmKGEmJmEgaW5zdGFuY2VvZiBmKXJldHVybiB0aGlzLm11bHRMZWZ0KGEuYSxhLmIsYS5jLGEuZCxhLmUsYS5mKTt2YXIgaD1hKnRoaXMuYStjKnRoaXMuYixpPWEqdGhpcy5jK2MqdGhpcy5kLGo9YSp0aGlzLmUrYyp0aGlzLmYrZTtyZXR1cm4gdGhpcy5iPWIqdGhpcy5hK2QqdGhpcy5iLHRoaXMuZD1iKnRoaXMuYytkKnRoaXMuZCx0aGlzLmY9Yip0aGlzLmUrZCp0aGlzLmYrZyx0aGlzLmE9aCx0aGlzLmM9aSx0aGlzLmU9aix0aGlzfSxiLmludmVydD1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1hLmEqYS5kLWEuYiphLmM7cmV0dXJuIG5ldyBmKGEuZC9iLC1hLmIvYiwtYS5jL2IsYS5hL2IsKGEuYyphLmYtYS5kKmEuZSkvYiwoYS5iKmEuZS1hLmEqYS5mKS9iKX0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgZih0aGlzLmEsdGhpcy5iLHRoaXMuYyx0aGlzLmQsdGhpcy5lLHRoaXMuZil9LGIudHJhbnNsYXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZSs9YSp0aGlzLmErYip0aGlzLmMsdGhpcy5mKz1hKnRoaXMuYitiKnRoaXMuZCx0aGlzfSxiLnNjYWxlPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBudWxsPT1iJiYoYj1hKSwoY3x8ZCkmJnRoaXMudHJhbnNsYXRlKGMsZCksdGhpcy5hKj1hLHRoaXMuYio9YSx0aGlzLmMqPWIsdGhpcy5kKj1iLChjfHxkKSYmdGhpcy50cmFuc2xhdGUoLWMsLWQpLHRoaXN9LGIucm90YXRlPWZ1bmN0aW9uKGIsYyxkKXtiPWEucmFkKGIpLGM9Y3x8MCxkPWR8fDA7dmFyIGU9K2kuY29zKGIpLnRvRml4ZWQoOSksZj0raS5zaW4oYikudG9GaXhlZCg5KTtyZXR1cm4gdGhpcy5hZGQoZSxmLC1mLGUsYyxkKSx0aGlzLmFkZCgxLDAsMCwxLC1jLC1kKX0sYi5za2V3WD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5za2V3KGEsMCl9LGIuc2tld1k9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc2tldygwLGEpfSxiLnNrZXc9ZnVuY3Rpb24oYixjKXtiPWJ8fDAsYz1jfHwwLGI9YS5yYWQoYiksYz1hLnJhZChjKTt2YXIgZD1pLnRhbihiKS50b0ZpeGVkKDkpLGU9aS50YW4oYykudG9GaXhlZCg5KTtyZXR1cm4gdGhpcy5hZGQoMSxlLGQsMSwwLDApfSxiLng9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSp0aGlzLmErYip0aGlzLmMrdGhpcy5lfSxiLnk9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSp0aGlzLmIrYip0aGlzLmQrdGhpcy5mfSxiLmdldD1mdW5jdGlvbihhKXtyZXR1cm4rdGhpc1toLmZyb21DaGFyQ29kZSg5NythKV0udG9GaXhlZCg0KX0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJtYXRyaXgoIitbdGhpcy5nZXQoMCksdGhpcy5nZXQoMSksdGhpcy5nZXQoMiksdGhpcy5nZXQoMyksdGhpcy5nZXQoNCksdGhpcy5nZXQoNSldLmpvaW4oKSsiKSJ9LGIub2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuW3RoaXMuZS50b0ZpeGVkKDQpLHRoaXMuZi50b0ZpeGVkKDQpXX0sYi5kZXRlcm1pbmFudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEqdGhpcy5kLXRoaXMuYip0aGlzLmN9LGIuc3BsaXQ9ZnVuY3Rpb24oKXt2YXIgYj17fTtiLmR4PXRoaXMuZSxiLmR5PXRoaXMuZjt2YXIgZT1bW3RoaXMuYSx0aGlzLmJdLFt0aGlzLmMsdGhpcy5kXV07Yi5zY2FsZXg9aS5zcXJ0KGMoZVswXSkpLGQoZVswXSksYi5zaGVhcj1lWzBdWzBdKmVbMV1bMF0rZVswXVsxXSplWzFdWzFdLGVbMV09W2VbMV1bMF0tZVswXVswXSpiLnNoZWFyLGVbMV1bMV0tZVswXVsxXSpiLnNoZWFyXSxiLnNjYWxleT1pLnNxcnQoYyhlWzFdKSksZChlWzFdKSxiLnNoZWFyLz1iLnNjYWxleSx0aGlzLmRldGVybWluYW50KCk8MCYmKGIuc2NhbGV4PS1iLnNjYWxleCk7dmFyIGY9ZVswXVsxXSxnPWVbMV1bMV07cmV0dXJuIDA+Zz8oYi5yb3RhdGU9YS5kZWcoaS5hY29zKGcpKSwwPmYmJihiLnJvdGF0ZT0zNjAtYi5yb3RhdGUpKTpiLnJvdGF0ZT1hLmRlZyhpLmFzaW4oZikpLGIuaXNTaW1wbGU9ISgrYi5zaGVhci50b0ZpeGVkKDkpfHxiLnNjYWxleC50b0ZpeGVkKDkpIT1iLnNjYWxleS50b0ZpeGVkKDkpJiZiLnJvdGF0ZSksYi5pc1N1cGVyU2ltcGxlPSErYi5zaGVhci50b0ZpeGVkKDkpJiZiLnNjYWxleC50b0ZpeGVkKDkpPT1iLnNjYWxleS50b0ZpeGVkKDkpJiYhYi5yb3RhdGUsYi5ub1JvdGF0aW9uPSErYi5zaGVhci50b0ZpeGVkKDkpJiYhYi5yb3RhdGUsYn0sYi50b1RyYW5zZm9ybVN0cmluZz1mdW5jdGlvbihhKXt2YXIgYj1hfHx0aGlzLnNwbGl0KCk7cmV0dXJuK2Iuc2hlYXIudG9GaXhlZCg5KT8ibSIrW3RoaXMuZ2V0KDApLHRoaXMuZ2V0KDEpLHRoaXMuZ2V0KDIpLHRoaXMuZ2V0KDMpLHRoaXMuZ2V0KDQpLHRoaXMuZ2V0KDUpXTooYi5zY2FsZXg9K2Iuc2NhbGV4LnRvRml4ZWQoNCksYi5zY2FsZXk9K2Iuc2NhbGV5LnRvRml4ZWQoNCksYi5yb3RhdGU9K2Iucm90YXRlLnRvRml4ZWQoNCksKGIuZHh8fGIuZHk/InQiK1srYi5keC50b0ZpeGVkKDQpLCtiLmR5LnRvRml4ZWQoNCldOmopKyhiLnJvdGF0ZT8iciIrWytiLnJvdGF0ZS50b0ZpeGVkKDQpLDAsMF06aikrKDEhPWIuc2NhbGV4fHwxIT1iLnNjYWxleT8icyIrW2Iuc2NhbGV4LGIuc2NhbGV5LDAsMF06aikpfX0oZi5wcm90b3R5cGUpLGEuTWF0cml4PWYsYS5tYXRyaXg9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe3JldHVybiBuZXcgZihhLGIsYyxkLGUsZyl9fSksZC5wbHVnaW4oZnVuY3Rpb24oYSxjLGQsZSxmKXtmdW5jdGlvbiBnKGQpe3JldHVybiBmdW5jdGlvbihlKXtpZihiLnN0b3AoKSxlIGluc3RhbmNlb2YgZiYmMT09ZS5ub2RlLmNoaWxkTm9kZXMubGVuZ3RoJiYoInJhZGlhbEdyYWRpZW50Ij09ZS5ub2RlLmZpcnN0Q2hpbGQudGFnTmFtZXx8ImxpbmVhckdyYWRpZW50Ij09ZS5ub2RlLmZpcnN0Q2hpbGQudGFnTmFtZXx8InBhdHRlcm4iPT1lLm5vZGUuZmlyc3RDaGlsZC50YWdOYW1lKSYmKGU9ZS5ub2RlLmZpcnN0Q2hpbGQsbih0aGlzKS5hcHBlbmRDaGlsZChlKSxlPWwoZSkpLGUgaW5zdGFuY2VvZiBjKWlmKCJyYWRpYWxHcmFkaWVudCI9PWUudHlwZXx8ImxpbmVhckdyYWRpZW50Ij09ZS50eXBlfHwicGF0dGVybiI9PWUudHlwZSl7ZS5ub2RlLmlkfHxwKGUubm9kZSx7aWQ6ZS5pZH0pO3ZhciBnPXEoZS5ub2RlLmlkKX1lbHNlIGc9ZS5hdHRyKGQpO2Vsc2UgaWYoZz1hLmNvbG9yKGUpLGcuZXJyb3Ipe3ZhciBoPWEobih0aGlzKS5vd25lclNWR0VsZW1lbnQpLmdyYWRpZW50KGUpO2g/KGgubm9kZS5pZHx8cChoLm5vZGUse2lkOmguaWR9KSxnPXEoaC5ub2RlLmlkKSk6Zz1lfWVsc2UgZz1yKGcpO3ZhciBpPXt9O2lbZF09ZyxwKHRoaXMubm9kZSxpKSx0aGlzLm5vZGUuc3R5bGVbZF09dH19ZnVuY3Rpb24gaChhKXtiLnN0b3AoKSxhPT0rYSYmKGErPSJweCIpLHRoaXMubm9kZS5zdHlsZS5mb250U2l6ZT1hfWZ1bmN0aW9uIGkoYSl7Zm9yKHZhciBiPVtdLGM9YS5jaGlsZE5vZGVzLGQ9MCxlPWMubGVuZ3RoO2U+ZDtkKyspe3ZhciBmPWNbZF07Mz09Zi5ub2RlVHlwZSYmYi5wdXNoKGYubm9kZVZhbHVlKSwidHNwYW4iPT1mLnRhZ05hbWUmJigxPT1mLmNoaWxkTm9kZXMubGVuZ3RoJiYzPT1mLmZpcnN0Q2hpbGQubm9kZVR5cGU/Yi5wdXNoKGYuZmlyc3RDaGlsZC5ub2RlVmFsdWUpOmIucHVzaChpKGYpKSl9cmV0dXJuIGJ9ZnVuY3Rpb24gaigpe3JldHVybiBiLnN0b3AoKSx0aGlzLm5vZGUuc3R5bGUuZm9udFNpemV9dmFyIGs9YS5fLm1ha2UsbD1hLl8ud3JhcCxtPWEuaXMsbj1hLl8uZ2V0U29tZURlZnMsbz0vXnVybFwoKFsnIl0/KShbXildKylcMVwpJC8scD1hLl8uJCxxPWEudXJsLHI9U3RyaW5nLHM9YS5fLnNlcGFyYXRvcix0PSIiO2EuZGV1cmw9ZnVuY3Rpb24oYSl7dmFyIGI9U3RyaW5nKGEpLm1hdGNoKG8pO3JldHVybiBiP2JbMl06YX0sYi5vbigic25hcC51dGlsLmF0dHIubWFzayIsZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGN8fGEgaW5zdGFuY2VvZiBmKXtpZihiLnN0b3AoKSxhIGluc3RhbmNlb2YgZiYmMT09YS5ub2RlLmNoaWxkTm9kZXMubGVuZ3RoJiYoYT1hLm5vZGUuZmlyc3RDaGlsZCxuKHRoaXMpLmFwcGVuZENoaWxkKGEpLGE9bChhKSksIm1hc2siPT1hLnR5cGUpdmFyIGQ9YTtlbHNlIGQ9aygibWFzayIsbih0aGlzKSksZC5ub2RlLmFwcGVuZENoaWxkKGEubm9kZSk7IWQubm9kZS5pZCYmcChkLm5vZGUse2lkOmQuaWR9KSxwKHRoaXMubm9kZSx7bWFzazpxKGQuaWQpfSl9fSksZnVuY3Rpb24oYSl7Yi5vbigic25hcC51dGlsLmF0dHIuY2xpcCIsYSksYi5vbigic25hcC51dGlsLmF0dHIuY2xpcC1wYXRoIixhKSxiLm9uKCJzbmFwLnV0aWwuYXR0ci5jbGlwUGF0aCIsYSl9KGZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBjfHxhIGluc3RhbmNlb2YgZil7Yi5zdG9wKCk7Zm9yKHZhciBkLGU9YS5ub2RlO2U7KXtpZigiY2xpcFBhdGgiPT09ZS5ub2RlTmFtZSl7ZD1uZXcgYyhlKTticmVha31pZigic3ZnIj09PWUubm9kZU5hbWUpe2Q9dm9pZCAwO2JyZWFrfWU9ZS5wYXJlbnROb2RlfWR8fChkPWsoImNsaXBQYXRoIixuKHRoaXMpKSxkLm5vZGUuYXBwZW5kQ2hpbGQoYS5ub2RlKSwhZC5ub2RlLmlkJiZwKGQubm9kZSx7aWQ6ZC5pZH0pKSxwKHRoaXMubm9kZSx7ImNsaXAtcGF0aCI6cShkLm5vZGUuaWR8fGQuaWQpfSl9fSksYi5vbigic25hcC51dGlsLmF0dHIuZmlsbCIsZygiZmlsbCIpKSxiLm9uKCJzbmFwLnV0aWwuYXR0ci5zdHJva2UiLGcoInN0cm9rZSIpKTt2YXIgdT0vXihbbHJdKSg/OlwoKFteKV0qKVwpKT8oLiopJC9pO2Iub24oInNuYXAudXRpbC5ncmFkLnBhcnNlIixmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYil7Zm9yKHZhciBjPShiLWgpLyhhLWkpLGQ9aTthPmQ7ZCsrKWZbZF0ub2Zmc2V0PSsoK2grYyooZC1pKSkudG9GaXhlZCgyKTtpPWEsaD1ifWE9cihhKTt2YXIgYz1hLm1hdGNoKHUpO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWNbMV0sZT1jWzJdLGY9Y1szXTtlPWUuc3BsaXQoL1xzKixccyovKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuK2E9PWE/K2E6YX0pLDE9PWUubGVuZ3RoJiYwPT1lWzBdJiYoZT1bXSksZj1mLnNwbGl0KCItIiksZj1mLm1hcChmdW5jdGlvbihhKXthPWEuc3BsaXQoIjoiKTt2YXIgYj17Y29sb3I6YVswXX07cmV0dXJuIGFbMV0mJihiLm9mZnNldD1wYXJzZUZsb2F0KGFbMV0pKSxifSk7dmFyIGc9Zi5sZW5ndGgsaD0wLGk9MDtnLS07Zm9yKHZhciBqPTA7Zz5qO2orKykib2Zmc2V0ImluIGZbal0mJmIoaixmW2pdLm9mZnNldCk7cmV0dXJuIGZbZ10ub2Zmc2V0PWZbZ10ub2Zmc2V0fHwxMDAsYihnLGZbZ10ub2Zmc2V0KSx7dHlwZTpkLHBhcmFtczplLHN0b3BzOmZ9fSksYi5vbigic25hcC51dGlsLmF0dHIuZCIsZnVuY3Rpb24oYyl7Yi5zdG9wKCksbShjLCJhcnJheSIpJiZtKGNbMF0sImFycmF5IikmJihjPWEucGF0aC50b1N0cmluZy5jYWxsKGMpKSxjPXIoYyksYy5tYXRjaCgvW3J1b10vaSkmJihjPWEucGF0aC50b0Fic29sdXRlKGMpKSxwKHRoaXMubm9kZSx7ZDpjfSl9KSgtMSksYi5vbigic25hcC51dGlsLmF0dHIuI3RleHQiLGZ1bmN0aW9uKGEpe2Iuc3RvcCgpLGE9cihhKTtmb3IodmFyIGM9ZS5kb2MuY3JlYXRlVGV4dE5vZGUoYSk7dGhpcy5ub2RlLmZpcnN0Q2hpbGQ7KXRoaXMubm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUuZmlyc3RDaGlsZCk7dGhpcy5ub2RlLmFwcGVuZENoaWxkKGMpfSkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLnBhdGgiLGZ1bmN0aW9uKGEpe2Iuc3RvcCgpLHRoaXMuYXR0cih7ZDphfSl9KSgtMSksYi5vbigic25hcC51dGlsLmF0dHIuY2xhc3MiLGZ1bmN0aW9uKGEpe2Iuc3RvcCgpLHRoaXMubm9kZS5jbGFzc05hbWUuYmFzZVZhbD1hfSkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLnZpZXdCb3giLGZ1bmN0aW9uKGEpe3ZhciBjO2M9bShhLCJvYmplY3QiKSYmIngiaW4gYT9bYS54LGEueSxhLndpZHRoLGEuaGVpZ2h0XS5qb2luKCIgIik6bShhLCJhcnJheSIpP2Euam9pbigiICIpOmEscCh0aGlzLm5vZGUse3ZpZXdCb3g6Y30pLGIuc3RvcCgpfSkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLnRyYW5zZm9ybSIsZnVuY3Rpb24oYSl7dGhpcy50cmFuc2Zvcm0oYSksYi5zdG9wKCl9KSgtMSksYi5vbigic25hcC51dGlsLmF0dHIuciIsZnVuY3Rpb24oYSl7InJlY3QiPT10aGlzLnR5cGUmJihiLnN0b3AoKSxwKHRoaXMubm9kZSx7cng6YSxyeTphfSkpfSkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLnRleHRwYXRoIixmdW5jdGlvbihhKXtpZihiLnN0b3AoKSwidGV4dCI9PXRoaXMudHlwZSl7dmFyIGQsZSxmO2lmKCFhJiZ0aGlzLnRleHRQYXRoKXtmb3IoZT10aGlzLnRleHRQYXRoO2Uubm9kZS5maXJzdENoaWxkOyl0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoZS5ub2RlLmZpcnN0Q2hpbGQpO3JldHVybiBlLnJlbW92ZSgpLHZvaWQgZGVsZXRlIHRoaXMudGV4dFBhdGh9aWYobShhLCJzdHJpbmciKSl7dmFyIGc9bih0aGlzKSxoPWwoZy5wYXJlbnROb2RlKS5wYXRoKGEpO2cuYXBwZW5kQ2hpbGQoaC5ub2RlKSxkPWguaWQsaC5hdHRyKHtpZDpkfSl9ZWxzZSBhPWwoYSksYSBpbnN0YW5jZW9mIGMmJihkPWEuYXR0cigiaWQiKSxkfHwoZD1hLmlkLGEuYXR0cih7aWQ6ZH0pKSk7aWYoZClpZihlPXRoaXMudGV4dFBhdGgsZj10aGlzLm5vZGUsZSllLmF0dHIoeyJ4bGluazpocmVmIjoiIyIrZH0pO2Vsc2V7Zm9yKGU9cCgidGV4dFBhdGgiLHsieGxpbms6aHJlZiI6IiMiK2R9KTtmLmZpcnN0Q2hpbGQ7KWUuYXBwZW5kQ2hpbGQoZi5maXJzdENoaWxkKTtmLmFwcGVuZENoaWxkKGUpLHRoaXMudGV4dFBhdGg9bChlKX19fSkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLnRleHQiLGZ1bmN0aW9uKGEpe2lmKCJ0ZXh0Ij09dGhpcy50eXBlKXtmb3IodmFyIGM9dGhpcy5ub2RlLGQ9ZnVuY3Rpb24oYSl7dmFyIGI9cCgidHNwYW4iKTtpZihtKGEsImFycmF5IikpZm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYi5hcHBlbmRDaGlsZChkKGFbY10pKTtlbHNlIGIuYXBwZW5kQ2hpbGQoZS5kb2MuY3JlYXRlVGV4dE5vZGUoYSkpO3JldHVybiBiLm5vcm1hbGl6ZSYmYi5ub3JtYWxpemUoKSxifTtjLmZpcnN0Q2hpbGQ7KWMucmVtb3ZlQ2hpbGQoYy5maXJzdENoaWxkKTtmb3IodmFyIGY9ZChhKTtmLmZpcnN0Q2hpbGQ7KWMuYXBwZW5kQ2hpbGQoZi5maXJzdENoaWxkKX1iLnN0b3AoKX0pKC0xKSxiLm9uKCJzbmFwLnV0aWwuYXR0ci5mb250U2l6ZSIsaCkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLmZvbnQtc2l6ZSIsaCkoLTEpLGIub24oInNuYXAudXRpbC5nZXRhdHRyLnRyYW5zZm9ybSIsZnVuY3Rpb24oKXtyZXR1cm4gYi5zdG9wKCksdGhpcy50cmFuc2Zvcm0oKX0pKC0xKSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ci50ZXh0cGF0aCIsZnVuY3Rpb24oKXtyZXR1cm4gYi5zdG9wKCksdGhpcy50ZXh0UGF0aH0pKC0xKSxmdW5jdGlvbigpe2Z1bmN0aW9uIGMoYyl7cmV0dXJuIGZ1bmN0aW9uKCl7Yi5zdG9wKCk7dmFyIGQ9ZS5kb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5vZGUsbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgibWFya2VyLSIrYyk7cmV0dXJuIm5vbmUiPT1kP2Q6YShlLmRvYy5nZXRFbGVtZW50QnlJZChkLm1hdGNoKG8pWzFdKSl9fWZ1bmN0aW9uIGQoYSl7cmV0dXJuIGZ1bmN0aW9uKGMpe2Iuc3RvcCgpO3ZhciBkPSJtYXJrZXIiK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7aWYoIiI9PWN8fCFjKXJldHVybiB2b2lkKHRoaXMubm9kZS5zdHlsZVtkXT0ibm9uZSIpO2lmKCJtYXJrZXIiPT1jLnR5cGUpe3ZhciBlPWMubm9kZS5pZDtyZXR1cm4gZXx8cChjLm5vZGUse2lkOmMuaWR9KSx2b2lkKHRoaXMubm9kZS5zdHlsZVtkXT1xKGUpKX19fWIub24oInNuYXAudXRpbC5nZXRhdHRyLm1hcmtlci1lbmQiLGMoImVuZCIpKSgtMSksYi5vbigic25hcC51dGlsLmdldGF0dHIubWFya2VyRW5kIixjKCJlbmQiKSkoLTEpLGIub24oInNuYXAudXRpbC5nZXRhdHRyLm1hcmtlci1zdGFydCIsYygic3RhcnQiKSkoLTEpLGIub24oInNuYXAudXRpbC5nZXRhdHRyLm1hcmtlclN0YXJ0IixjKCJzdGFydCIpKSgtMSksYi5vbigic25hcC51dGlsLmdldGF0dHIubWFya2VyLW1pZCIsYygibWlkIikpKC0xKSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ci5tYXJrZXJNaWQiLGMoIm1pZCIpKSgtMSksYi5vbigic25hcC51dGlsLmF0dHIubWFya2VyLWVuZCIsZCgiZW5kIikpKC0xKSxiLm9uKCJzbmFwLnV0aWwuYXR0ci5tYXJrZXJFbmQiLGQoImVuZCIpKSgtMSksYi5vbigic25hcC51dGlsLmF0dHIubWFya2VyLXN0YXJ0IixkKCJzdGFydCIpKSgtMSksYi5vbigic25hcC51dGlsLmF0dHIubWFya2VyU3RhcnQiLGQoInN0YXJ0IikpKC0xKSxiLm9uKCJzbmFwLnV0aWwuYXR0ci5tYXJrZXItbWlkIixkKCJtaWQiKSkoLTEpLGIub24oInNuYXAudXRpbC5hdHRyLm1hcmtlck1pZCIsZCgibWlkIikpKC0xKX0oKSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ci5yIixmdW5jdGlvbigpe3JldHVybiJyZWN0Ij09dGhpcy50eXBlJiZwKHRoaXMubm9kZSwicngiKT09cCh0aGlzLm5vZGUsInJ5Iik/KGIuc3RvcCgpLHAodGhpcy5ub2RlLCJyeCIpKTp2b2lkIDB9KSgtMSksYi5vbigic25hcC51dGlsLmdldGF0dHIudGV4dCIsZnVuY3Rpb24oKXtpZigidGV4dCI9PXRoaXMudHlwZXx8InRzcGFuIj09dGhpcy50eXBlKXtiLnN0b3AoKTt2YXIgYT1pKHRoaXMubm9kZSk7cmV0dXJuIDE9PWEubGVuZ3RoP2FbMF06YX19KSgtMSksYi5vbigic25hcC51dGlsLmdldGF0dHIuI3RleHQiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS50ZXh0Q29udGVudH0pKC0xKSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ci5maWxsIixmdW5jdGlvbihjKXtpZighYyl7Yi5zdG9wKCk7dmFyIGQ9Yigic25hcC51dGlsLmdldGF0dHIuZmlsbCIsdGhpcywhMCkuZmlyc3REZWZpbmVkKCk7cmV0dXJuIGEoYS5kZXVybChkKSl8fGR9fSkoLTEpLGIub24oInNuYXAudXRpbC5nZXRhdHRyLnN0cm9rZSIsZnVuY3Rpb24oYyl7aWYoIWMpe2Iuc3RvcCgpO3ZhciBkPWIoInNuYXAudXRpbC5nZXRhdHRyLnN0cm9rZSIsdGhpcywhMCkuZmlyc3REZWZpbmVkKCk7cmV0dXJuIGEoYS5kZXVybChkKSl8fGR9fSkoLTEpLGIub24oInNuYXAudXRpbC5nZXRhdHRyLnZpZXdCb3giLGZ1bmN0aW9uKCl7Yi5zdG9wKCk7dmFyIGM9cCh0aGlzLm5vZGUsInZpZXdCb3giKTtyZXR1cm4gYz8oYz1jLnNwbGl0KHMpLGEuXy5ib3goK2NbMF0sK2NbMV0sK2NbMl0sK2NbM10pKTp2b2lkIDB9KSgtMSksYi5vbigic25hcC51dGlsLmdldGF0dHIucG9pbnRzIixmdW5jdGlvbigpe3ZhciBhPXAodGhpcy5ub2RlLCJwb2ludHMiKTtyZXR1cm4gYi5zdG9wKCksYT9hLnNwbGl0KHMpOnZvaWQgMH0pKC0xKSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ci5wYXRoIixmdW5jdGlvbigpe3ZhciBhPXAodGhpcy5ub2RlLCJkIik7cmV0dXJuIGIuc3RvcCgpLGF9KSgtMSksYi5vbigic25hcC51dGlsLmdldGF0dHIuY2xhc3MiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5jbGFzc05hbWUuYmFzZVZhbH0pKC0xKSxiLm9uKCJzbmFwLnV0aWwuZ2V0YXR0ci5mb250U2l6ZSIsaikoLTEpLGIub24oInNuYXAudXRpbC5nZXRhdHRyLmZvbnQtc2l6ZSIsaikoLTEpfSksZC5wbHVnaW4oZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj0vXFMrL2csZz1TdHJpbmcsaD1iLnByb3RvdHlwZTtoLmFkZENsYXNzPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGg9ZyhhfHwiIikubWF0Y2goZil8fFtdLGk9dGhpcy5ub2RlLGo9aS5jbGFzc05hbWUuYmFzZVZhbCxrPWoubWF0Y2goZil8fFtdO2lmKGgubGVuZ3RoKXtmb3IoYj0wO2Q9aFtiKytdOyljPWsuaW5kZXhPZihkKSx+Y3x8ay5wdXNoKGQpO2U9ay5qb2luKCIgIiksaiE9ZSYmKGkuY2xhc3NOYW1lLmJhc2VWYWw9ZSl9cmV0dXJuIHRoaXN9LGgucmVtb3ZlQ2xhc3M9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsaD1nKGF8fCIiKS5tYXRjaChmKXx8W10saT10aGlzLm5vZGUsaj1pLmNsYXNzTmFtZS5iYXNlVmFsLGs9ai5tYXRjaChmKXx8W107aWYoay5sZW5ndGgpe2ZvcihiPTA7ZD1oW2IrK107KWM9ay5pbmRleE9mKGQpLH5jJiZrLnNwbGljZShjLDEpO2U9ay5qb2luKCIgIiksaiE9ZSYmKGkuY2xhc3NOYW1lLmJhc2VWYWw9ZSl9cmV0dXJuIHRoaXN9LGguaGFzQ2xhc3M9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5ub2RlLGM9Yi5jbGFzc05hbWUuYmFzZVZhbCxkPWMubWF0Y2goZil8fFtdO3JldHVybiEhfmQuaW5kZXhPZihhKX0saC50b2dnbGVDbGFzcz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpcmV0dXJuIGI/dGhpcy5hZGRDbGFzcyhhKTp0aGlzLnJlbW92ZUNsYXNzKGEpO3ZhciBjLGQsZSxnLGg9KGF8fCIiKS5tYXRjaChmKXx8W10saT10aGlzLm5vZGUsaj1pLmNsYXNzTmFtZS5iYXNlVmFsLGs9ai5tYXRjaChmKXx8W107Zm9yKGM9MDtlPWhbYysrXTspZD1rLmluZGV4T2YoZSksfmQ/ay5zcGxpY2UoZCwxKTprLnB1c2goZSk7cmV0dXJuIGc9ay5qb2luKCIgIiksaiE9ZyYmKGkuY2xhc3NOYW1lLmJhc2VWYWw9ZyksdGhpc319KSxkLnBsdWdpbihmdW5jdGlvbihhLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gaChhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuK2IudG9GaXhlZCgzKSthfX12YXIgaT17IisiOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGErYn0sIi0iOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEtYn0sIi8iOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEvYn0sIioiOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEqYn19LGo9U3RyaW5nLGs9L1thLXpdKyQvaSxsPS9eXHMqKFsrXC1cLypdKVxzKj1ccyooW1xkLmVFK1wtXSspXHMqKFteXGRcc10rKT9ccyokLztiLm9uKCJzbmFwLnV0aWwuYXR0ciIsZnVuY3Rpb24oYSl7dmFyIGM9aihhKS5tYXRjaChsKTtpZihjKXt2YXIgZD1iLm50KCksZT1kLnN1YnN0cmluZyhkLmxhc3RJbmRleE9mKCIuIikrMSksZj10aGlzLmF0dHIoZSksZz17fTtiLnN0b3AoKTt2YXIgaD1jWzNdfHwiIixtPWYubWF0Y2goayksbj1pW2NbMV1dO2lmKG0mJm09PWg/YT1uKHBhcnNlRmxvYXQoZiksK2NbMl0pOihmPXRoaXMuYXNQWChlKSxhPW4odGhpcy5hc1BYKGUpLHRoaXMuYXNQWChlLGNbMl0raCkpKSxpc05hTihmKXx8aXNOYU4oYSkpcmV0dXJuO2dbZV09YSx0aGlzLmF0dHIoZyl9fSkoLTEwKSxiLm9uKCJzbmFwLnV0aWwuZXF1YWwiLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9aih0aGlzLmF0dHIoYSl8fCIiKSxlPWooYykubWF0Y2gobCk7aWYoZSl7Yi5zdG9wKCk7dmFyIGY9ZVszXXx8IiIsbT1kLm1hdGNoKGspLG49aVtlWzFdXTtyZXR1cm4gbSYmbT09Zj97ZnJvbTpwYXJzZUZsb2F0KGQpLHRvOm4ocGFyc2VGbG9hdChkKSwrZVsyXSksZjpoKG0pfTooZD10aGlzLmFzUFgoYSkse2Zyb206ZCx0bzpuKGQsdGhpcy5hc1BYKGEsZVsyXStmKSksZjpnfSl9fSkoLTEwKX0pLGQucGx1Z2luKGZ1bmN0aW9uKGMsZCxlLGYsZyl7dmFyIGg9ZS5wcm90b3R5cGUsaT1jLmlzO2gucmVjdD1mdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc7cmV0dXJuIG51bGw9PWYmJihmPWUpLGkoYSwib2JqZWN0IikmJiJbb2JqZWN0IE9iamVjdF0iPT1hP2c9YTpudWxsIT1hJiYoZz17eDphLHk6Yix3aWR0aDpjLGhlaWdodDpkfSxudWxsIT1lJiYoZy5yeD1lLGcucnk9ZikpLHRoaXMuZWwoInJlY3QiLGcpfSxoLmNpcmNsZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGkoYSwib2JqZWN0IikmJiJbb2JqZWN0IE9iamVjdF0iPT1hP2Q9YTpudWxsIT1hJiYoZD17Y3g6YSxjeTpiLHI6Y30pLHRoaXMuZWwoImNpcmNsZSIsZCl9O3ZhciBqPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3RoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKX1yZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD1mLmRvYy5jcmVhdGVFbGVtZW50KCJpbWciKSxlPWYuZG9jLmJvZHk7ZC5zdHlsZS5jc3NUZXh0PSJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi05OTk5ZW07dG9wOi05OTk5ZW0iLGQub25sb2FkPWZ1bmN0aW9uKCl7Yy5jYWxsKGQpLGQub25sb2FkPWQub25lcnJvcj1udWxsLGUucmVtb3ZlQ2hpbGQoZCl9LGQub25lcnJvcj1hLGUuYXBwZW5kQ2hpbGQoZCksZC5zcmM9Yn19KCk7aC5pbWFnZT1mdW5jdGlvbihhLGIsZCxlLGYpe3ZhciBnPXRoaXMuZWwoImltYWdlIik7aWYoaShhLCJvYmplY3QiKSYmInNyYyJpbiBhKWcuYXR0cihhKTtlbHNlIGlmKG51bGwhPWEpe3ZhciBoPXsieGxpbms6aHJlZiI6YSxwcmVzZXJ2ZUFzcGVjdFJhdGlvOiJub25lIn07bnVsbCE9YiYmbnVsbCE9ZCYmKGgueD1iLGgueT1kKSxudWxsIT1lJiZudWxsIT1mPyhoLndpZHRoPWUsaC5oZWlnaHQ9Zik6aihhLGZ1bmN0aW9uKCl7Yy5fLiQoZy5ub2RlLHt3aWR0aDp0aGlzLm9mZnNldFdpZHRoLGhlaWdodDp0aGlzLm9mZnNldEhlaWdodH0pfSksYy5fLiQoZy5ub2RlLGgpfXJldHVybiBnfSxoLmVsbGlwc2U9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7cmV0dXJuIGkoYSwib2JqZWN0IikmJiJbb2JqZWN0IE9iamVjdF0iPT1hP2U9YTpudWxsIT1hJiYoZT17Y3g6YSxjeTpiLHJ4OmMscnk6ZH0pLHRoaXMuZWwoImVsbGlwc2UiLGUpfSxoLnBhdGg9ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIGkoYSwib2JqZWN0IikmJiFpKGEsImFycmF5Iik/Yj1hOmEmJihiPXtkOmF9KSx0aGlzLmVsKCJwYXRoIixiKX0saC5ncm91cD1oLmc9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbCgiZyIpO3JldHVybiAxPT1hcmd1bWVudHMubGVuZ3RoJiZhJiYhYS50eXBlP2IuYXR0cihhKTphcmd1bWVudHMubGVuZ3RoJiZiLmFkZChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCkpLGJ9LGguc3ZnPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7dmFyIGo9e307cmV0dXJuIGkoYSwib2JqZWN0IikmJm51bGw9PWI/aj1hOihudWxsIT1hJiYoai54PWEpLG51bGwhPWImJihqLnk9YiksbnVsbCE9YyYmKGoud2lkdGg9YyksbnVsbCE9ZCYmKGouaGVpZ2h0PWQpLG51bGwhPWUmJm51bGwhPWYmJm51bGwhPWcmJm51bGwhPWgmJihqLnZpZXdCb3g9W2UsZixnLGhdKSksdGhpcy5lbCgic3ZnIixqKX0saC5tYXNrPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWwoIm1hc2siKTtyZXR1cm4gMT09YXJndW1lbnRzLmxlbmd0aCYmYSYmIWEudHlwZT9iLmF0dHIoYSk6YXJndW1lbnRzLmxlbmd0aCYmYi5hZGQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApKSxifSxoLnB0cm49ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoKXtpZihpKGEsIm9iamVjdCIpKXZhciBqPWE7ZWxzZSBqPXtwYXR0ZXJuVW5pdHM6InVzZXJTcGFjZU9uVXNlIn0sYSYmKGoueD1hKSxiJiYoai55PWIpLG51bGwhPWMmJihqLndpZHRoPWMpLG51bGwhPWQmJihqLmhlaWdodD1kKSxudWxsIT1lJiZudWxsIT1mJiZudWxsIT1nJiZudWxsIT1oP2oudmlld0JveD1bZSxmLGcsaF06ai52aWV3Qm94PVthfHwwLGJ8fDAsY3x8MCxkfHwwXTtyZXR1cm4gdGhpcy5lbCgicGF0dGVybiIsail9LGgudXNlPWZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hPyhhIGluc3RhbmNlb2YgZCYmKGEuYXR0cigiaWQiKXx8YS5hdHRyKHtpZDpjLl8uaWQoYSl9KSxhPWEuYXR0cigiaWQiKSksIiMiPT1TdHJpbmcoYSkuY2hhckF0KCkmJihhPWEuc3Vic3RyaW5nKDEpKSx0aGlzLmVsKCJ1c2UiLHsieGxpbms6aHJlZiI6IiMiK2F9KSk6ZC5wcm90b3R5cGUudXNlLmNhbGwodGhpcyl9LGguc3ltYm9sPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXt9O3JldHVybiBudWxsIT1hJiZudWxsIT1iJiZudWxsIT1jJiZudWxsIT1kJiYoZS52aWV3Qm94PVthLGIsYyxkXSksdGhpcy5lbCgic3ltYm9sIixlKX0saC50ZXh0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD17fTtyZXR1cm4gaShhLCJvYmplY3QiKT9kPWE6bnVsbCE9YSYmKGQ9e3g6YSx5OmIsdGV4dDpjfHwiIn0pLHRoaXMuZWwoInRleHQiLGQpfSxoLmxpbmU9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9e307cmV0dXJuIGkoYSwib2JqZWN0Iik/ZT1hOm51bGwhPWEmJihlPXt4MTphLHgyOmMseTE6Yix5MjpkfSksdGhpcy5lbCgibGluZSIsZSl9LGgucG9seWxpbmU9ZnVuY3Rpb24oYSl7YXJndW1lbnRzLmxlbmd0aD4xJiYoYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCkpO3ZhciBiPXt9O3JldHVybiBpKGEsIm9iamVjdCIpJiYhaShhLCJhcnJheSIpP2I9YTpudWxsIT1hJiYoYj17cG9pbnRzOmF9KSx0aGlzLmVsKCJwb2x5bGluZSIsYil9LGgucG9seWdvbj1mdW5jdGlvbihhKXthcmd1bWVudHMubGVuZ3RoPjEmJihhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSk7dmFyIGI9e307cmV0dXJuIGkoYSwib2JqZWN0IikmJiFpKGEsImFycmF5Iik/Yj1hOm51bGwhPWEmJihiPXtwb2ludHM6YX0pLHRoaXMuZWwoInBvbHlnb24iLGIpfSxmdW5jdGlvbigpe2Z1bmN0aW9uIGQoKXtyZXR1cm4gdGhpcy5zZWxlY3RBbGwoInN0b3AiKX1mdW5jdGlvbiBlKGEsYil7dmFyIGQ9bCgic3RvcCIpLGU9e29mZnNldDorYisiJSJ9O2E9Yy5jb2xvcihhKSxlWyJzdG9wLWNvbG9yIl09YS5oZXgsYS5vcGFjaXR5PDEmJihlWyJzdG9wLW9wYWNpdHkiXT1hLm9wYWNpdHkpLGwoZCxlKTtmb3IodmFyIGYsZz10aGlzLnN0b3BzKCksaD0wO2g8Zy5sZW5ndGg7aCsrKXt2YXIgaT1wYXJzZUZsb2F0KGdbaF0uYXR0cigib2Zmc2V0IikpO2lmKGk+Yil7dGhpcy5ub2RlLmluc2VydEJlZm9yZShkLGdbaF0ubm9kZSksZj0hMDticmVha319cmV0dXJuIGZ8fHRoaXMubm9kZS5hcHBlbmRDaGlsZChkKSx0aGlzfWZ1bmN0aW9uIGYoKXtpZigibGluZWFyR3JhZGllbnQiPT10aGlzLnR5cGUpe3ZhciBhPWwodGhpcy5ub2RlLCJ4MSIpfHwwLGI9bCh0aGlzLm5vZGUsIngyIil8fDEsZD1sKHRoaXMubm9kZSwieTEiKXx8MCxlPWwodGhpcy5ub2RlLCJ5MiIpfHwwO3JldHVybiBjLl8uYm94KGEsZCxtYXRoLmFicyhiLWEpLG1hdGguYWJzKGUtZCkpfXZhciBmPXRoaXMubm9kZS5jeHx8LjUsZz10aGlzLm5vZGUuY3l8fC41LGg9dGhpcy5ub2RlLnJ8fDA7cmV0dXJuIGMuXy5ib3goZi1oLGctaCwyKmgsMipoKX1mdW5jdGlvbiBnKGEpe3ZhciBkPWEsZT10aGlzLnN0b3BzKCk7aWYoInN0cmluZyI9PXR5cGVvZiBhJiYoZD1iKCJzbmFwLnV0aWwuZ3JhZC5wYXJzZSIsbnVsbCwibCgwLDAsMCwxKSIrYSkuZmlyc3REZWZpbmVkKCkuc3RvcHMpLGMuaXMoZCwiYXJyYXkiKSl7Zm9yKHZhciBmPTA7ZjxlLmxlbmd0aDtmKyspaWYoZFtmXSl7dmFyIGc9Yy5jb2xvcihkW2ZdLmNvbG9yKSxoPXtvZmZzZXQ6ZFtmXS5vZmZzZXQrIiUifTtoWyJzdG9wLWNvbG9yIl09Zy5oZXgsZy5vcGFjaXR5PDEmJihoWyJzdG9wLW9wYWNpdHkiXT1nLm9wYWNpdHkpLGVbZl0uYXR0cihoKX1lbHNlIGVbZl0ucmVtb3ZlKCk7Zm9yKGY9ZS5sZW5ndGg7ZjxkLmxlbmd0aDtmKyspdGhpcy5hZGRTdG9wKGRbZl0uY29sb3IsZFtmXS5vZmZzZXQpO3JldHVybiB0aGlzfX1mdW5jdGlvbiBpKGEsYyl7dmFyIGQsZT1iKCJzbmFwLnV0aWwuZ3JhZC5wYXJzZSIsbnVsbCxjKS5maXJzdERlZmluZWQoKTtpZighZSlyZXR1cm4gbnVsbDtlLnBhcmFtcy51bnNoaWZ0KGEpLGQ9ImwiPT1lLnR5cGUudG9Mb3dlckNhc2UoKT9qLmFwcGx5KDAsZS5wYXJhbXMpOmsuYXBwbHkoMCxlLnBhcmFtcyksZS50eXBlIT1lLnR5cGUudG9Mb3dlckNhc2UoKSYmbChkLm5vZGUse2dyYWRpZW50VW5pdHM6InVzZXJTcGFjZU9uVXNlIn0pO2Zvcih2YXIgZj1lLnN0b3BzLGc9Zi5sZW5ndGgsaD0wO2c+aDtoKyspe3ZhciBpPWZbaF07ZC5hZGRTdG9wKGkuY29sb3IsaS5vZmZzZXQpfXJldHVybiBkfWZ1bmN0aW9uIGooYSxiLGgsaSxqKXt2YXIgaz1jLl8ubWFrZSgibGluZWFyR3JhZGllbnQiLGEpO3JldHVybiBrLnN0b3BzPWQsay5hZGRTdG9wPWUsay5nZXRCQm94PWYsay5zZXRTdG9wcz1nLG51bGwhPWImJmwoay5ub2RlLHt4MTpiLHkxOmgseDI6aSx5MjpqfSksa31mdW5jdGlvbiBrKGEsYixnLGgsaSxqKXt2YXIgaz1jLl8ubWFrZSgicmFkaWFsR3JhZGllbnQiLGEpO3JldHVybiBrLnN0b3BzPWQsay5hZGRTdG9wPWUsay5nZXRCQm94PWYsbnVsbCE9YiYmbChrLm5vZGUse2N4OmIsY3k6ZyxyOmh9KSxudWxsIT1pJiZudWxsIT1qJiZsKGsubm9kZSx7Zng6aSxmeTpqfSksa312YXIgbD1jLl8uJDtoLmdyYWRpZW50PWZ1bmN0aW9uKGEpe3JldHVybiBpKHRoaXMuZGVmcyxhKX0saC5ncmFkaWVudExpbmVhcj1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gaih0aGlzLmRlZnMsYSxiLGMsZCl9LGguZ3JhZGllbnRSYWRpYWw9ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gayh0aGlzLmRlZnMsYSxiLGMsZCxlKX0saC50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhLGI9dGhpcy5ub2RlLm93bmVyRG9jdW1lbnQsZD1iLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxlPWIuY3JlYXRlRWxlbWVudCgiZGl2IiksZj10aGlzLm5vZGUuY2xvbmVOb2RlKCEwKTtyZXR1cm4gZC5hcHBlbmRDaGlsZChlKSxlLmFwcGVuZENoaWxkKGYpLGMuXy4kKGYse3htbG5zOiJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyJ9KSxhPWUuaW5uZXJIVE1MLGQucmVtb3ZlQ2hpbGQoZC5maXJzdENoaWxkKSxhfSxoLnRvRGF0YVVSTD1mdW5jdGlvbigpe3JldHVybiBhJiZhLmJ0b2E/ImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh0aGlzKSkpOnZvaWQgMH0saC5jbGVhcj1mdW5jdGlvbigpe2Zvcih2YXIgYSxiPXRoaXMubm9kZS5maXJzdENoaWxkO2I7KWE9Yi5uZXh0U2libGluZywiZGVmcyIhPWIudGFnTmFtZT9iLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6aC5jbGVhci5jYWxsKHtub2RlOmJ9KSxiPWF9fSgpfSksZC5wbHVnaW4oZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShhKXt2YXIgYj1lLnBzPWUucHN8fHt9O3JldHVybiBiW2FdP2JbYV0uc2xlZXA9MTAwOmJbYV09e3NsZWVwOjEwMH0sc2V0VGltZW91dChmdW5jdGlvbigpe2Zvcih2YXIgYyBpbiBiKWJbTV0oYykmJmMhPWEmJihiW2NdLnNsZWVwLS0sIWJbY10uc2xlZXAmJmRlbGV0ZSBiW2NdKX0pLGJbYV19ZnVuY3Rpb24gZihhLGIsYyxkKXtyZXR1cm4gbnVsbD09YSYmKGE9Yj1jPWQ9MCksbnVsbD09YiYmKGI9YS55LGM9YS53aWR0aCxkPWEuaGVpZ2h0LGE9YS54KSx7eDphLHk6Yix3aWR0aDpjLHc6YyxoZWlnaHQ6ZCxoOmQseDI6YStjLHkyOmIrZCxjeDphK2MvMixjeTpiK2QvMixyMTpQLm1pbihjLGQpLzIscjI6UC5tYXgoYyxkKS8yLHIwOlAuc3FydChjKmMrZCpkKS8yLHBhdGg6eShhLGIsYyxkKSx2YjpbYSxiLGMsZF0uam9pbigiICIpfX1mdW5jdGlvbiBnKCl7cmV0dXJuIHRoaXMuam9pbigiLCIpLnJlcGxhY2UoTiwiJDEiKX1mdW5jdGlvbiBoKGEpe3ZhciBiPUwoYSk7cmV0dXJuIGIudG9TdHJpbmc9ZyxifWZ1bmN0aW9uIGkoYSxiLGMsZCxlLGYsZyxoLGkpe3JldHVybiBudWxsPT1pP3AoYSxiLGMsZCxlLGYsZyxoKTprKGEsYixjLGQsZSxmLGcsaCxxKGEsYixjLGQsZSxmLGcsaCxpKSl9ZnVuY3Rpb24gaihjLGQpe2Z1bmN0aW9uIGUoYSl7cmV0dXJuKygrYSkudG9GaXhlZCgzKX1yZXR1cm4gYS5fLmNhY2hlcihmdW5jdGlvbihhLGYsZyl7YSBpbnN0YW5jZW9mIGImJihhPWEuYXR0cigiZCIpKSxhPUcoYSk7Zm9yKHZhciBoLGosbCxtLG4sbz0iIixwPXt9LHE9MCxyPTAscz1hLmxlbmd0aDtzPnI7cisrKXtpZihsPWFbcl0sIk0iPT1sWzBdKWg9K2xbMV0saj0rbFsyXTtlbHNle2lmKG09aShoLGosbFsxXSxsWzJdLGxbM10sbFs0XSxsWzVdLGxbNl0pLHErbT5mKXtpZihkJiYhcC5zdGFydCl7aWYobj1pKGgsaixsWzFdLGxbMl0sbFszXSxsWzRdLGxbNV0sbFs2XSxmLXEpLG8rPVsiQyIrZShuLnN0YXJ0LngpLGUobi5zdGFydC55KSxlKG4ubS54KSxlKG4ubS55KSxlKG4ueCksZShuLnkpXSxnKXJldHVybiBvO3Auc3RhcnQ9byxvPVsiTSIrZShuLngpLGUobi55KSsiQyIrZShuLm4ueCksZShuLm4ueSksZShuLmVuZC54KSxlKG4uZW5kLnkpLGUobFs1XSksZShsWzZdKV0uam9pbigpLHErPW0saD0rbFs1XSxqPStsWzZdO2NvbnRpbnVlfWlmKCFjJiYhZClyZXR1cm4gbj1pKGgsaixsWzFdLGxbMl0sbFszXSxsWzRdLGxbNV0sbFs2XSxmLXEpfXErPW0saD0rbFs1XSxqPStsWzZdfW8rPWwuc2hpZnQoKStsfXJldHVybiBwLmVuZD1vLG49Yz9xOmQ/cDprKGgsaixsWzBdLGxbMV0sbFsyXSxsWzNdLGxbNF0sbFs1XSwxKX0sbnVsbCxhLl8uY2xvbmUpfWZ1bmN0aW9uIGsoYSxiLGMsZCxlLGYsZyxoLGkpe3ZhciBqPTEtaSxrPVQoaiwzKSxsPVQoaiwyKSxtPWkqaSxuPW0qaSxvPWsqYSszKmwqaSpjKzMqaippKmkqZStuKmcscD1rKmIrMypsKmkqZCszKmoqaSppKmYrbipoLHE9YSsyKmkqKGMtYSkrbSooZS0yKmMrYSkscj1iKzIqaSooZC1iKSttKihmLTIqZCtiKSxzPWMrMippKihlLWMpK20qKGctMiplK2MpLHQ9ZCsyKmkqKGYtZCkrbSooaC0yKmYrZCksdT1qKmEraSpjLHY9aipiK2kqZCx3PWoqZStpKmcseD1qKmYraSpoLHk9OTAtMTgwKlAuYXRhbjIocS1zLHItdCkvUTtyZXR1cm57eDpvLHk6cCxtOnt4OnEseTpyfSxuOnt4OnMseTp0fSxzdGFydDp7eDp1LHk6dn0sZW5kOnt4OncseTp4fSxhbHBoYTp5fX1mdW5jdGlvbiBsKGIsYyxkLGUsZyxoLGksail7YS5pcyhiLCJhcnJheSIpfHwoYj1bYixjLGQsZSxnLGgsaSxqXSk7dmFyIGs9Ri5hcHBseShudWxsLGIpO3JldHVybiBmKGsubWluLngsay5taW4ueSxrLm1heC54LWsubWluLngsay5tYXgueS1rLm1pbi55KX1mdW5jdGlvbiBtKGEsYixjKXtyZXR1cm4gYj49YS54JiZiPD1hLngrYS53aWR0aCYmYz49YS55JiZjPD1hLnkrYS5oZWlnaHR9ZnVuY3Rpb24gbihhLGIpe3JldHVybiBhPWYoYSksYj1mKGIpLG0oYixhLngsYS55KXx8bShiLGEueDIsYS55KXx8bShiLGEueCxhLnkyKXx8bShiLGEueDIsYS55Mil8fG0oYSxiLngsYi55KXx8bShhLGIueDIsYi55KXx8bShhLGIueCxiLnkyKXx8bShhLGIueDIsYi55Mil8fChhLng8Yi54MiYmYS54PmIueHx8Yi54PGEueDImJmIueD5hLngpJiYoYS55PGIueTImJmEueT5iLnl8fGIueTxhLnkyJiZiLnk+YS55KX1mdW5jdGlvbiBvKGEsYixjLGQsZSl7dmFyIGY9LTMqYis5KmMtOSpkKzMqZSxnPWEqZis2KmItMTIqYys2KmQ7cmV0dXJuIGEqZy0zKmIrMypjfWZ1bmN0aW9uIHAoYSxiLGMsZCxlLGYsZyxoLGkpe251bGw9PWkmJihpPTEpLGk9aT4xPzE6MD5pPzA6aTtmb3IodmFyIGo9aS8yLGs9MTIsbD1bLS4xMjUyLC4xMjUyLC0uMzY3OCwuMzY3OCwtLjU4NzMsLjU4NzMsLS43Njk5LC43Njk5LC0uOTA0MSwuOTA0MSwtLjk4MTYsLjk4MTZdLG09Wy4yNDkxLC4yNDkxLC4yMzM1LC4yMzM1LC4yMDMyLC4yMDMyLC4xNjAxLC4xNjAxLC4xMDY5LC4xMDY5LC4wNDcyLC4wNDcyXSxuPTAscD0wO2s+cDtwKyspe3ZhciBxPWoqbFtwXStqLHI9byhxLGEsYyxlLGcpLHM9byhxLGIsZCxmLGgpLHQ9cipyK3MqcztuKz1tW3BdKlAuc3FydCh0KX1yZXR1cm4gaipufWZ1bmN0aW9uIHEoYSxiLGMsZCxlLGYsZyxoLGkpe2lmKCEoMD5pfHxwKGEsYixjLGQsZSxmLGcsaCk8aSkpe3ZhciBqLGs9MSxsPWsvMixtPWstbCxuPS4wMTtmb3Ioaj1wKGEsYixjLGQsZSxmLGcsaCxtKTtVKGotaSk+bjspbC89MixtKz0oaT5qPzE6LTEpKmwsaj1wKGEsYixjLGQsZSxmLGcsaCxtKTtyZXR1cm4gbX19ZnVuY3Rpb24gcihhLGIsYyxkLGUsZixnLGgpe2lmKCEoUyhhLGMpPFIoZSxnKXx8UihhLGMpPlMoZSxnKXx8UyhiLGQpPFIoZixoKXx8UihiLGQpPlMoZixoKSkpe3ZhciBpPShhKmQtYipjKSooZS1nKS0oYS1jKSooZSpoLWYqZyksaj0oYSpkLWIqYykqKGYtaCktKGItZCkqKGUqaC1mKmcpLGs9KGEtYykqKGYtaCktKGItZCkqKGUtZyk7aWYoayl7dmFyIGw9aS9rLG09ai9rLG49K2wudG9GaXhlZCgyKSxvPSttLnRvRml4ZWQoMik7aWYoIShuPCtSKGEsYykudG9GaXhlZCgyKXx8bj4rUyhhLGMpLnRvRml4ZWQoMil8fG48K1IoZSxnKS50b0ZpeGVkKDIpfHxuPitTKGUsZykudG9GaXhlZCgyKXx8bzwrUihiLGQpLnRvRml4ZWQoMil8fG8+K1MoYixkKS50b0ZpeGVkKDIpfHxvPCtSKGYsaCkudG9GaXhlZCgyKXx8bz4rUyhmLGgpLnRvRml4ZWQoMikpKXJldHVybnt4OmwseTptfX19fWZ1bmN0aW9uIHMoYSxiLGMpe3ZhciBkPWwoYSksZT1sKGIpO2lmKCFuKGQsZSkpcmV0dXJuIGM/MDpbXTtmb3IodmFyIGY9cC5hcHBseSgwLGEpLGc9cC5hcHBseSgwLGIpLGg9fn4oZi84KSxpPX5+KGcvOCksaj1bXSxtPVtdLG89e30scT1jPzA6W10scz0wO2grMT5zO3MrKyl7dmFyIHQ9ay5hcHBseSgwLGEuY29uY2F0KHMvaCkpO2oucHVzaCh7eDp0LngseTp0LnksdDpzL2h9KX1mb3Iocz0wO2krMT5zO3MrKyl0PWsuYXBwbHkoMCxiLmNvbmNhdChzL2kpKSxtLnB1c2goe3g6dC54LHk6dC55LHQ6cy9pfSk7Zm9yKHM9MDtoPnM7cysrKWZvcih2YXIgdT0wO2k+dTt1Kyspe3ZhciB2PWpbc10sdz1qW3MrMV0seD1tW3VdLHk9bVt1KzFdLHo9VSh3Lngtdi54KTwuMDAxPyJ5IjoieCIsQT1VKHkueC14LngpPC4wMDE/InkiOiJ4IixCPXIodi54LHYueSx3Lngsdy55LHgueCx4LnkseS54LHkueSk7aWYoQil7aWYob1tCLngudG9GaXhlZCg0KV09PUIueS50b0ZpeGVkKDQpKWNvbnRpbnVlO29bQi54LnRvRml4ZWQoNCldPUIueS50b0ZpeGVkKDQpO3ZhciBDPXYudCtVKChCW3pdLXZbel0pLyh3W3pdLXZbel0pKSoody50LXYudCksRD14LnQrVSgoQltBXS14W0FdKS8oeVtBXS14W0FdKSkqKHkudC14LnQpO0M+PTAmJjE+PUMmJkQ+PTAmJjE+PUQmJihjP3ErKzpxLnB1c2goe3g6Qi54LHk6Qi55LHQxOkMsdDI6RH0pKX19cmV0dXJuIHF9ZnVuY3Rpb24gdChhLGIpe3JldHVybiB2KGEsYil9ZnVuY3Rpb24gdShhLGIpe3JldHVybiB2KGEsYiwxKX1mdW5jdGlvbiB2KGEsYixjKXthPUcoYSksYj1HKGIpO2Zvcih2YXIgZCxlLGYsZyxoLGksaixrLGwsbSxuPWM/MDpbXSxvPTAscD1hLmxlbmd0aDtwPm87bysrKXt2YXIgcT1hW29dO2lmKCJNIj09cVswXSlkPWg9cVsxXSxlPWk9cVsyXTtlbHNleyJDIj09cVswXT8obD1bZCxlXS5jb25jYXQocS5zbGljZSgxKSksZD1sWzZdLGU9bFs3XSk6KGw9W2QsZSxkLGUsaCxpLGgsaV0sZD1oLGU9aSk7Zm9yKHZhciByPTAsdD1iLmxlbmd0aDt0PnI7cisrKXt2YXIgdT1iW3JdO2lmKCJNIj09dVswXSlmPWo9dVsxXSxnPWs9dVsyXTtlbHNleyJDIj09dVswXT8obT1bZixnXS5jb25jYXQodS5zbGljZSgxKSksZj1tWzZdLGc9bVs3XSk6KG09W2YsZyxmLGcsaixrLGosa10sZj1qLGc9ayk7dmFyIHY9cyhsLG0sYyk7aWYoYyluKz12O2Vsc2V7Zm9yKHZhciB3PTAseD12Lmxlbmd0aDt4Pnc7dysrKXZbd10uc2VnbWVudDE9byx2W3ddLnNlZ21lbnQyPXIsdlt3XS5iZXoxPWwsdlt3XS5iZXoyPW07bj1uLmNvbmNhdCh2KX19fX19cmV0dXJuIG59ZnVuY3Rpb24gdyhhLGIsYyl7dmFyIGQ9eChhKTtyZXR1cm4gbShkLGIsYykmJnYoYSxbWyJNIixiLGNdLFsiSCIsZC54MisxMF1dLDEpJTI9PTF9ZnVuY3Rpb24geChhKXt2YXIgYj1lKGEpO2lmKGIuYmJveClyZXR1cm4gTChiLmJib3gpO2lmKCFhKXJldHVybiBmKCk7YT1HKGEpO2Zvcih2YXIgYyxkPTAsZz0wLGg9W10saT1bXSxqPTAsaz1hLmxlbmd0aDtrPmo7aisrKWlmKGM9YVtqXSwiTSI9PWNbMF0pZD1jWzFdLGc9Y1syXSxoLnB1c2goZCksaS5wdXNoKGcpO2Vsc2V7dmFyIGw9RihkLGcsY1sxXSxjWzJdLGNbM10sY1s0XSxjWzVdLGNbNl0pO2g9aC5jb25jYXQobC5taW4ueCxsLm1heC54KSxpPWkuY29uY2F0KGwubWluLnksbC5tYXgueSksZD1jWzVdLGc9Y1s2XX12YXIgbT1SLmFwcGx5KDAsaCksbj1SLmFwcGx5KDAsaSksbz1TLmFwcGx5KDAsaCkscD1TLmFwcGx5KDAsaSkscT1mKG0sbixvLW0scC1uKTtyZXR1cm4gYi5iYm94PUwocSkscX1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoZSlyZXR1cm5bWyJNIiwrYSsgK2UsYl0sWyJsIixjLTIqZSwwXSxbImEiLGUsZSwwLDAsMSxlLGVdLFsibCIsMCxkLTIqZV0sWyJhIixlLGUsMCwwLDEsLWUsZV0sWyJsIiwyKmUtYywwXSxbImEiLGUsZSwwLDAsMSwtZSwtZV0sWyJsIiwwLDIqZS1kXSxbImEiLGUsZSwwLDAsMSxlLC1lXSxbInoiXV07dmFyIGY9W1siTSIsYSxiXSxbImwiLGMsMF0sWyJsIiwwLGRdLFsibCIsLWMsMF0sWyJ6Il1dO3JldHVybiBmLnRvU3RyaW5nPWcsZn1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYobnVsbD09ZSYmbnVsbD09ZCYmKGQ9YyksYT0rYSxiPStiLGM9K2MsZD0rZCxudWxsIT1lKXZhciBmPU1hdGguUEkvMTgwLGg9YStjKk1hdGguY29zKC1kKmYpLGk9YStjKk1hdGguY29zKC1lKmYpLGo9YitjKk1hdGguc2luKC1kKmYpLGs9YitjKk1hdGguc2luKC1lKmYpLGw9W1siTSIsaCxqXSxbIkEiLGMsYywwLCsoZS1kPjE4MCksMCxpLGtdXTtlbHNlIGw9W1siTSIsYSxiXSxbIm0iLDAsLWRdLFsiYSIsYyxkLDAsMSwxLDAsMipkXSxbImEiLGMsZCwwLDEsMSwwLC0yKmRdLFsieiJdXTtyZXR1cm4gbC50b1N0cmluZz1nLGx9ZnVuY3Rpb24gQShiKXt2YXIgYz1lKGIpLGQ9U3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZTtpZihjLnJlbClyZXR1cm4gaChjLnJlbCk7YS5pcyhiLCJhcnJheSIpJiZhLmlzKGImJmJbMF0sImFycmF5Iil8fChiPWEucGFyc2VQYXRoU3RyaW5nKGIpKTt2YXIgZj1bXSxpPTAsaj0wLGs9MCxsPTAsbT0wOyJNIj09YlswXVswXSYmKGk9YlswXVsxXSxqPWJbMF1bMl0saz1pLGw9aixtKyssZi5wdXNoKFsiTSIsaSxqXSkpO2Zvcih2YXIgbj1tLG89Yi5sZW5ndGg7bz5uO24rKyl7dmFyIHA9ZltuXT1bXSxxPWJbbl07aWYocVswXSE9ZC5jYWxsKHFbMF0pKXN3aXRjaChwWzBdPWQuY2FsbChxWzBdKSxwWzBdKXtjYXNlImEiOnBbMV09cVsxXSxwWzJdPXFbMl0scFszXT1xWzNdLHBbNF09cVs0XSxwWzVdPXFbNV0scFs2XT0rKHFbNl0taSkudG9GaXhlZCgzKSxwWzddPSsocVs3XS1qKS50b0ZpeGVkKDMpO2JyZWFrO2Nhc2UidiI6cFsxXT0rKHFbMV0taikudG9GaXhlZCgzKTticmVhaztjYXNlIm0iOms9cVsxXSxsPXFbMl07ZGVmYXVsdDpmb3IodmFyIHI9MSxzPXEubGVuZ3RoO3M+cjtyKyspcFtyXT0rKHFbcl0tKHIlMj9pOmopKS50b0ZpeGVkKDMpfWVsc2V7cD1mW25dPVtdLCJtIj09cVswXSYmKGs9cVsxXStpLGw9cVsyXStqKTtmb3IodmFyIHQ9MCx1PXEubGVuZ3RoO3U+dDt0KyspZltuXVt0XT1xW3RdfXZhciB2PWZbbl0ubGVuZ3RoO3N3aXRjaChmW25dWzBdKXtjYXNlInoiOmk9ayxqPWw7YnJlYWs7Y2FzZSJoIjppKz0rZltuXVt2LTFdO2JyZWFrO2Nhc2UidiI6ais9K2Zbbl1bdi0xXTticmVhaztkZWZhdWx0OmkrPStmW25dW3YtMl0sais9K2Zbbl1bdi0xXX19cmV0dXJuIGYudG9TdHJpbmc9ZyxjLnJlbD1oKGYpLGZ9ZnVuY3Rpb24gQihiKXt2YXIgYz1lKGIpO2lmKGMuYWJzKXJldHVybiBoKGMuYWJzKTtpZihLKGIsImFycmF5IikmJksoYiYmYlswXSwiYXJyYXkiKXx8KGI9YS5wYXJzZVBhdGhTdHJpbmcoYikpLCFifHwhYi5sZW5ndGgpcmV0dXJuW1siTSIsMCwwXV07dmFyIGQsZj1bXSxpPTAsaj0wLGs9MCxsPTAsbT0wOyJNIj09YlswXVswXSYmKGk9K2JbMF1bMV0saj0rYlswXVsyXSxrPWksbD1qLG0rKyxmWzBdPVsiTSIsaSxqXSk7Zm9yKHZhciBuLG8scD0zPT1iLmxlbmd0aCYmIk0iPT1iWzBdWzBdJiYiUiI9PWJbMV1bMF0udG9VcHBlckNhc2UoKSYmIloiPT1iWzJdWzBdLnRvVXBwZXJDYXNlKCkscT1tLHI9Yi5sZW5ndGg7cj5xO3ErKyl7aWYoZi5wdXNoKG49W10pLG89YltxXSxkPW9bMF0sZCE9ZC50b1VwcGVyQ2FzZSgpKXN3aXRjaChuWzBdPWQudG9VcHBlckNhc2UoKSxuWzBdKXtjYXNlIkEiOm5bMV09b1sxXSxuWzJdPW9bMl0sblszXT1vWzNdLG5bNF09b1s0XSxuWzVdPW9bNV0sbls2XT0rb1s2XStpLG5bN109K29bN10rajticmVhaztjYXNlIlYiOm5bMV09K29bMV0rajticmVhaztjYXNlIkgiOm5bMV09K29bMV0raTticmVhaztjYXNlIlIiOmZvcih2YXIgcz1baSxqXS5jb25jYXQoby5zbGljZSgxKSksdD0yLHU9cy5sZW5ndGg7dT50O3QrKylzW3RdPStzW3RdK2ksc1srK3RdPStzW3RdK2o7Zi5wb3AoKSxmPWYuY29uY2F0KEkocyxwKSk7YnJlYWs7Y2FzZSJPIjpmLnBvcCgpLHM9eihpLGosb1sxXSxvWzJdKSxzLnB1c2goc1swXSksZj1mLmNvbmNhdChzKTticmVhaztjYXNlIlUiOmYucG9wKCksZj1mLmNvbmNhdCh6KGksaixvWzFdLG9bMl0sb1szXSkpLG49WyJVIl0uY29uY2F0KGZbZi5sZW5ndGgtMV0uc2xpY2UoLTIpKTticmVhaztjYXNlIk0iOms9K29bMV0raSxsPStvWzJdK2o7ZGVmYXVsdDpmb3IodD0xLHU9by5sZW5ndGg7dT50O3QrKyluW3RdPStvW3RdKyh0JTI/aTpqKX1lbHNlIGlmKCJSIj09ZClzPVtpLGpdLmNvbmNhdChvLnNsaWNlKDEpKSxmLnBvcCgpLGY9Zi5jb25jYXQoSShzLHApKSxuPVsiUiJdLmNvbmNhdChvLnNsaWNlKC0yKSk7ZWxzZSBpZigiTyI9PWQpZi5wb3AoKSxzPXooaSxqLG9bMV0sb1syXSkscy5wdXNoKHNbMF0pLGY9Zi5jb25jYXQocyk7ZWxzZSBpZigiVSI9PWQpZi5wb3AoKSxmPWYuY29uY2F0KHooaSxqLG9bMV0sb1syXSxvWzNdKSksbj1bIlUiXS5jb25jYXQoZltmLmxlbmd0aC0xXS5zbGljZSgtMikpO2Vsc2UgZm9yKHZhciB2PTAsdz1vLmxlbmd0aDt3PnY7disrKW5bdl09b1t2XTtpZihkPWQudG9VcHBlckNhc2UoKSwiTyIhPWQpc3dpdGNoKG5bMF0pe2Nhc2UiWiI6aT0rayxqPStsO2JyZWFrO2Nhc2UiSCI6aT1uWzFdO2JyZWFrO2Nhc2UiViI6aj1uWzFdO2JyZWFrO2Nhc2UiTSI6az1uW24ubGVuZ3RoLTJdLGw9bltuLmxlbmd0aC0xXTtkZWZhdWx0Omk9bltuLmxlbmd0aC0yXSxqPW5bbi5sZW5ndGgtMV19fXJldHVybiBmLnRvU3RyaW5nPWcsYy5hYnM9aChmKSxmfWZ1bmN0aW9uIEMoYSxiLGMsZCl7cmV0dXJuW2EsYixjLGQsYyxkXX1mdW5jdGlvbiBEKGEsYixjLGQsZSxmKXt2YXIgZz0xLzMsaD0yLzM7cmV0dXJuW2cqYStoKmMsZypiK2gqZCxnKmUraCpjLGcqZitoKmQsZSxmXX1mdW5jdGlvbiBFKGIsYyxkLGUsZixnLGgsaSxqLGspe3ZhciBsLG09MTIwKlEvMTgwLG49US8xODAqKCtmfHwwKSxvPVtdLHA9YS5fLmNhY2hlcihmdW5jdGlvbihhLGIsYyl7dmFyIGQ9YSpQLmNvcyhjKS1iKlAuc2luKGMpLGU9YSpQLnNpbihjKStiKlAuY29zKGMpO3JldHVybnt4OmQseTplfX0pO2lmKCFkfHwhZSlyZXR1cm5bYixjLGksaixpLGpdO2lmKGspeT1rWzBdLHo9a1sxXSx3PWtbMl0seD1rWzNdO2Vsc2V7bD1wKGIsYywtbiksYj1sLngsYz1sLnksbD1wKGksaiwtbiksaT1sLngsaj1sLnk7dmFyIHE9KFAuY29zKFEvMTgwKmYpLFAuc2luKFEvMTgwKmYpLChiLWkpLzIpLHI9KGMtaikvMixzPXEqcS8oZCpkKStyKnIvKGUqZSk7cz4xJiYocz1QLnNxcnQocyksZD1zKmQsZT1zKmUpO3ZhciB0PWQqZCx1PWUqZSx2PShnPT1oPy0xOjEpKlAuc3FydChVKCh0KnUtdCpyKnItdSpxKnEpLyh0KnIqcit1KnEqcSkpKSx3PXYqZCpyL2UrKGIraSkvMix4PXYqLWUqcS9kKyhjK2opLzIseT1QLmFzaW4oKChjLXgpL2UpLnRvRml4ZWQoOSkpLHo9UC5hc2luKCgoai14KS9lKS50b0ZpeGVkKDkpKTt5PXc+Yj9RLXk6eSx6PXc+aT9RLXo6eiwwPnkmJih5PTIqUSt5KSwwPnomJih6PTIqUSt6KSxoJiZ5PnomJih5LT0yKlEpLCFoJiZ6PnkmJih6LT0yKlEpfXZhciBBPXoteTtpZihVKEEpPm0pe3ZhciBCPXosQz1pLEQ9ajt6PXkrbSooaCYmej55PzE6LTEpLGk9dytkKlAuY29zKHopLGo9eCtlKlAuc2luKHopLG89RShpLGosZCxlLGYsMCxoLEMsRCxbeixCLHcseF0pfUE9ei15O3ZhciBGPVAuY29zKHkpLEc9UC5zaW4oeSksSD1QLmNvcyh6KSxJPVAuc2luKHopLEo9UC50YW4oQS80KSxLPTQvMypkKkosTD00LzMqZSpKLE09W2IsY10sTj1bYitLKkcsYy1MKkZdLE89W2krSypJLGotTCpIXSxSPVtpLGpdO2lmKE5bMF09MipNWzBdLU5bMF0sTlsxXT0yKk1bMV0tTlsxXSxrKXJldHVybltOLE8sUl0uY29uY2F0KG8pO289W04sTyxSXS5jb25jYXQobykuam9pbigpLnNwbGl0KCIsIik7Zm9yKHZhciBTPVtdLFQ9MCxWPW8ubGVuZ3RoO1Y+VDtUKyspU1tUXT1UJTI/cChvW1QtMV0sb1tUXSxuKS55OnAob1tUXSxvW1QrMV0sbikueDtyZXR1cm4gU31mdW5jdGlvbiBGKGEsYixjLGQsZSxmLGcsaCl7Zm9yKHZhciBpLGosayxsLG0sbixvLHAscT1bXSxyPVtbXSxbXV0scz0wOzI+czsrK3MpaWYoMD09cz8oaj02KmEtMTIqYys2KmUsaT0tMyphKzkqYy05KmUrMypnLGs9MypjLTMqYSk6KGo9NipiLTEyKmQrNipmLGk9LTMqYis5KmQtOSpmKzMqaCxrPTMqZC0zKmIpLFUoaSk8MWUtMTIpe2lmKFUoaik8MWUtMTIpY29udGludWU7bD0tay9qLGw+MCYmMT5sJiZxLnB1c2gobCl9ZWxzZSBvPWoqai00KmsqaSxwPVAuc3FydChvKSwwPm98fChtPSgtaitwKS8oMippKSxtPjAmJjE+bSYmcS5wdXNoKG0pLG49KC1qLXApLygyKmkpLG4+MCYmMT5uJiZxLnB1c2gobikpO2Zvcih2YXIgdCx1PXEubGVuZ3RoLHY9dTt1LS07KWw9cVt1XSx0PTEtbCxyWzBdW3VdPXQqdCp0KmErMyp0KnQqbCpjKzMqdCpsKmwqZStsKmwqbCpnLHJbMV1bdV09dCp0KnQqYiszKnQqdCpsKmQrMyp0KmwqbCpmK2wqbCpsKmg7cmV0dXJuIHJbMF1bdl09YSxyWzFdW3ZdPWIsclswXVt2KzFdPWcsclsxXVt2KzFdPWgsclswXS5sZW5ndGg9clsxXS5sZW5ndGg9disyLHttaW46e3g6Ui5hcHBseSgwLHJbMF0pLHk6Ui5hcHBseSgwLHJbMV0pfSxtYXg6e3g6Uy5hcHBseSgwLHJbMF0pLHk6Uy5hcHBseSgwLHJbMV0pfX19ZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSFiJiZlKGEpO2lmKCFiJiZjLmN1cnZlKXJldHVybiBoKGMuY3VydmUpO2Zvcih2YXIgZD1CKGEpLGY9YiYmQihiKSxnPXt4OjAseTowLGJ4OjAsYnk6MCxYOjAsWTowLHF4Om51bGwscXk6bnVsbH0saT17eDowLHk6MCxieDowLGJ5OjAsWDowLFk6MCxxeDpudWxsLHF5Om51bGx9LGo9KGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlO2lmKCFhKXJldHVyblsiQyIsYi54LGIueSxiLngsYi55LGIueCxiLnldO3N3aXRjaCghKGFbMF1pbntUOjEsUToxfSkmJihiLnF4PWIucXk9bnVsbCksYVswXSl7Y2FzZSJNIjpiLlg9YVsxXSxiLlk9YVsyXTticmVhaztjYXNlIkEiOmE9WyJDIl0uY29uY2F0KEUuYXBwbHkoMCxbYi54LGIueV0uY29uY2F0KGEuc2xpY2UoMSkpKSk7YnJlYWs7Y2FzZSJTIjoiQyI9PWN8fCJTIj09Yz8oZD0yKmIueC1iLmJ4LGU9MipiLnktYi5ieSk6KGQ9Yi54LGU9Yi55KSxhPVsiQyIsZCxlXS5jb25jYXQoYS5zbGljZSgxKSk7YnJlYWs7Y2FzZSJUIjoiUSI9PWN8fCJUIj09Yz8oYi5xeD0yKmIueC1iLnF4LGIucXk9MipiLnktYi5xeSk6KGIucXg9Yi54LGIucXk9Yi55KSxhPVsiQyJdLmNvbmNhdChEKGIueCxiLnksYi5xeCxiLnF5LGFbMV0sYVsyXSkpO2JyZWFrO2Nhc2UiUSI6Yi5xeD1hWzFdLGIucXk9YVsyXSxhPVsiQyJdLmNvbmNhdChEKGIueCxiLnksYVsxXSxhWzJdLGFbM10sYVs0XSkpO2JyZWFrO2Nhc2UiTCI6YT1bIkMiXS5jb25jYXQoQyhiLngsYi55LGFbMV0sYVsyXSkpO2JyZWFrO2Nhc2UiSCI6YT1bIkMiXS5jb25jYXQoQyhiLngsYi55LGFbMV0sYi55KSk7YnJlYWs7Y2FzZSJWIjphPVsiQyJdLmNvbmNhdChDKGIueCxiLnksYi54LGFbMV0pKTticmVhaztjYXNlIloiOmE9WyJDIl0uY29uY2F0KEMoYi54LGIueSxiLlgsYi5ZKSl9cmV0dXJuIGF9KSxrPWZ1bmN0aW9uKGEsYil7aWYoYVtiXS5sZW5ndGg+Nyl7YVtiXS5zaGlmdCgpO2Zvcih2YXIgYz1hW2JdO2MubGVuZ3RoOyltW2JdPSJBIixmJiYobltiXT0iQSIpLGEuc3BsaWNlKGIrKywwLFsiQyJdLmNvbmNhdChjLnNwbGljZSgwLDYpKSk7YS5zcGxpY2UoYiwxKSxyPVMoZC5sZW5ndGgsZiYmZi5sZW5ndGh8fDApfX0sbD1mdW5jdGlvbihhLGIsYyxlLGcpe2EmJmImJiJNIj09YVtnXVswXSYmIk0iIT1iW2ddWzBdJiYoYi5zcGxpY2UoZywwLFsiTSIsZS54LGUueV0pLGMuYng9MCxjLmJ5PTAsYy54PWFbZ11bMV0sYy55PWFbZ11bMl0scj1TKGQubGVuZ3RoLGYmJmYubGVuZ3RofHwwKSl9LG09W10sbj1bXSxvPSIiLHA9IiIscT0wLHI9UyhkLmxlbmd0aCxmJiZmLmxlbmd0aHx8MCk7cj5xO3ErKyl7ZFtxXSYmKG89ZFtxXVswXSksIkMiIT1vJiYobVtxXT1vLHEmJihwPW1bcS0xXSkpLGRbcV09aihkW3FdLGcscCksIkEiIT1tW3FdJiYiQyI9PW8mJihtW3FdPSJDIiksayhkLHEpLGYmJihmW3FdJiYobz1mW3FdWzBdKSwiQyIhPW8mJihuW3FdPW8scSYmKHA9bltxLTFdKSksZltxXT1qKGZbcV0saSxwKSwiQSIhPW5bcV0mJiJDIj09byYmKG5bcV09IkMiKSxrKGYscSkpLGwoZCxmLGcsaSxxKSxsKGYsZCxpLGcscSk7dmFyIHM9ZFtxXSx0PWYmJmZbcV0sdT1zLmxlbmd0aCx2PWYmJnQubGVuZ3RoO2cueD1zW3UtMl0sZy55PXNbdS0xXSxnLmJ4PU8oc1t1LTRdKXx8Zy54LGcuYnk9TyhzW3UtM10pfHxnLnksaS5ieD1mJiYoTyh0W3YtNF0pfHxpLngpLGkuYnk9ZiYmKE8odFt2LTNdKXx8aS55KSxpLng9ZiYmdFt2LTJdLGkueT1mJiZ0W3YtMV19cmV0dXJuIGZ8fChjLmN1cnZlPWgoZCkpLGY/W2QsZl06ZH1mdW5jdGlvbiBIKGEsYil7aWYoIWIpcmV0dXJuIGE7dmFyIGMsZCxlLGYsZyxoLGk7Zm9yKGE9RyhhKSxlPTAsZz1hLmxlbmd0aDtnPmU7ZSsrKWZvcihpPWFbZV0sZj0xLGg9aS5sZW5ndGg7aD5mO2YrPTIpYz1iLngoaVtmXSxpW2YrMV0pLGQ9Yi55KGlbZl0saVtmKzFdKSxpW2ZdPWMsaVtmKzFdPWQ7cmV0dXJuIGF9ZnVuY3Rpb24gSShhLGIpe2Zvcih2YXIgYz1bXSxkPTAsZT1hLmxlbmd0aDtlLTIqIWI+ZDtkKz0yKXt2YXIgZj1be3g6K2FbZC0yXSx5OithW2QtMV19LHt4OithW2RdLHk6K2FbZCsxXX0se3g6K2FbZCsyXSx5OithW2QrM119LHt4OithW2QrNF0seTorYVtkKzVdfV07Yj9kP2UtND09ZD9mWzNdPXt4OithWzBdLHk6K2FbMV19OmUtMj09ZCYmKGZbMl09e3g6K2FbMF0seTorYVsxXX0sZlszXT17eDorYVsyXSx5OithWzNdfSk6ZlswXT17eDorYVtlLTJdLHk6K2FbZS0xXX06ZS00PT1kP2ZbM109ZlsyXTpkfHwoZlswXT17eDorYVtkXSx5OithW2QrMV19KSxjLnB1c2goWyJDIiwoLWZbMF0ueCs2KmZbMV0ueCtmWzJdLngpLzYsKC1mWzBdLnkrNipmWzFdLnkrZlsyXS55KS82LChmWzFdLngrNipmWzJdLngtZlszXS54KS82LChmWzFdLnkrNipmWzJdLnktZlszXS55KS82LGZbMl0ueCxmWzJdLnldKX1yZXR1cm4gY312YXIgSj1iLnByb3RvdHlwZSxLPWEuaXMsTD1hLl8uY2xvbmUsTT0iaGFzT3duUHJvcGVydHkiLE49Lyw/KFthLXpdKSw/L2dpLE89cGFyc2VGbG9hdCxQPU1hdGgsUT1QLlBJLFI9UC5taW4sUz1QLm1heCxUPVAucG93LFU9UC5hYnMsVj1qKDEpLFc9aigpLFg9aigwLDEpLFk9YS5fdW5pdDJweCxaPXtwYXRoOmZ1bmN0aW9uKGEpe3JldHVybiBhLmF0dHIoInBhdGgiKX0sY2lyY2xlOmZ1bmN0aW9uKGEpe3ZhciBiPVkoYSk7cmV0dXJuIHooYi5jeCxiLmN5LGIucil9LGVsbGlwc2U6ZnVuY3Rpb24oYSl7dmFyIGI9WShhKTtyZXR1cm4geihiLmN4fHwwLGIuY3l8fDAsYi5yeCxiLnJ5KTsKfSxyZWN0OmZ1bmN0aW9uKGEpe3ZhciBiPVkoYSk7cmV0dXJuIHkoYi54fHwwLGIueXx8MCxiLndpZHRoLGIuaGVpZ2h0LGIucngsYi5yeSl9LGltYWdlOmZ1bmN0aW9uKGEpe3ZhciBiPVkoYSk7cmV0dXJuIHkoYi54fHwwLGIueXx8MCxiLndpZHRoLGIuaGVpZ2h0KX0sbGluZTpmdW5jdGlvbihhKXtyZXR1cm4iTSIrW2EuYXR0cigieDEiKXx8MCxhLmF0dHIoInkxIil8fDAsYS5hdHRyKCJ4MiIpLGEuYXR0cigieTIiKV19LHBvbHlsaW5lOmZ1bmN0aW9uKGEpe3JldHVybiJNIithLmF0dHIoInBvaW50cyIpfSxwb2x5Z29uOmZ1bmN0aW9uKGEpe3JldHVybiJNIithLmF0dHIoInBvaW50cyIpKyJ6In0sZGVmbHQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlLmdldEJCb3goKTtyZXR1cm4geShiLngsYi55LGIud2lkdGgsYi5oZWlnaHQpfX07YS5wYXRoPWUsYS5wYXRoLmdldFRvdGFsTGVuZ3RoPVYsYS5wYXRoLmdldFBvaW50QXRMZW5ndGg9VyxhLnBhdGguZ2V0U3VicGF0aD1mdW5jdGlvbihhLGIsYyl7aWYodGhpcy5nZXRUb3RhbExlbmd0aChhKS1jPDFlLTYpcmV0dXJuIFgoYSxiKS5lbmQ7dmFyIGQ9WChhLGMsMSk7cmV0dXJuIGI/WChkLGIpLmVuZDpkfSxKLmdldFRvdGFsTGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5nZXRUb3RhbExlbmd0aD90aGlzLm5vZGUuZ2V0VG90YWxMZW5ndGgoKTp2b2lkIDB9LEouZ2V0UG9pbnRBdExlbmd0aD1mdW5jdGlvbihhKXtyZXR1cm4gVyh0aGlzLmF0dHIoImQiKSxhKX0sSi5nZXRTdWJwYXRoPWZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEucGF0aC5nZXRTdWJwYXRoKHRoaXMuYXR0cigiZCIpLGIsYyl9LGEuXy5ib3g9ZixhLnBhdGguZmluZERvdHNBdFNlZ21lbnQ9ayxhLnBhdGguYmV6aWVyQkJveD1sLGEucGF0aC5pc1BvaW50SW5zaWRlQkJveD1tLGEuY2xvc2VzdD1mdW5jdGlvbihiLGMsZCxlKXtmb3IodmFyIGc9MTAwLGg9ZihiLWcvMixjLWcvMixnLGcpLGk9W10saj1kWzBdLmhhc093blByb3BlcnR5KCJ4Iik/ZnVuY3Rpb24oYSl7cmV0dXJue3g6ZFthXS54LHk6ZFthXS55fX06ZnVuY3Rpb24oYSl7cmV0dXJue3g6ZFthXSx5OmVbYV19fSxrPTA7MWU2Pj1nJiYhazspe2Zvcih2YXIgbD0wLG49ZC5sZW5ndGg7bj5sO2wrKyl7dmFyIG89aihsKTtpZihtKGgsby54LG8ueSkpe2srKyxpLnB1c2gobyk7YnJlYWt9fWt8fChnKj0yLGg9ZihiLWcvMixjLWcvMixnLGcpKX1pZigxZTYhPWcpe3ZhciBwLHE9MS8wO2ZvcihsPTAsbj1pLmxlbmd0aDtuPmw7bCsrKXt2YXIgcj1hLmxlbihiLGMsaVtsXS54LGlbbF0ueSk7cT5yJiYocT1yLGlbbF0ubGVuPXIscD1pW2xdKX1yZXR1cm4gcH19LGEucGF0aC5pc0JCb3hJbnRlcnNlY3Q9bixhLnBhdGguaW50ZXJzZWN0aW9uPXQsYS5wYXRoLmludGVyc2VjdGlvbk51bWJlcj11LGEucGF0aC5pc1BvaW50SW5zaWRlPXcsYS5wYXRoLmdldEJCb3g9eCxhLnBhdGguZ2V0PVosYS5wYXRoLnRvUmVsYXRpdmU9QSxhLnBhdGgudG9BYnNvbHV0ZT1CLGEucGF0aC50b0N1YmljPUcsYS5wYXRoLm1hcD1ILGEucGF0aC50b1N0cmluZz1nLGEucGF0aC5jbG9uZT1ofSksZC5wbHVnaW4oZnVuY3Rpb24oYSxkLGUsZil7dmFyIGc9TWF0aC5tYXgsaD1NYXRoLm1pbixpPWZ1bmN0aW9uKGEpe2lmKHRoaXMuaXRlbXM9W10sdGhpcy5iaW5kaW5ncz17fSx0aGlzLmxlbmd0aD0wLHRoaXMudHlwZT0ic2V0IixhKWZvcih2YXIgYj0wLGM9YS5sZW5ndGg7Yz5iO2IrKylhW2JdJiYodGhpc1t0aGlzLml0ZW1zLmxlbmd0aF09dGhpcy5pdGVtc1t0aGlzLml0ZW1zLmxlbmd0aF09YVtiXSx0aGlzLmxlbmd0aCsrKX0saj1pLnByb3RvdHlwZTtqLnB1c2g9ZnVuY3Rpb24oKXtmb3IodmFyIGEsYixjPTAsZD1hcmd1bWVudHMubGVuZ3RoO2Q+YztjKyspYT1hcmd1bWVudHNbY10sYSYmKGI9dGhpcy5pdGVtcy5sZW5ndGgsdGhpc1tiXT10aGlzLml0ZW1zW2JdPWEsdGhpcy5sZW5ndGgrKyk7cmV0dXJuIHRoaXN9LGoucG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGVuZ3RoJiZkZWxldGUgdGhpc1t0aGlzLmxlbmd0aC0tXSx0aGlzLml0ZW1zLnBvcCgpfSxqLmZvckVhY2g9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPXRoaXMuaXRlbXMubGVuZ3RoO2Q+YztjKyspaWYoYS5jYWxsKGIsdGhpcy5pdGVtc1tjXSxjKT09PSExKXJldHVybiB0aGlzO3JldHVybiB0aGlzfSxqLmFuaW1hdGU9ZnVuY3Rpb24oZCxlLGYsZyl7ImZ1bmN0aW9uIiE9dHlwZW9mIGZ8fGYubGVuZ3RofHwoZz1mLGY9Yy5saW5lYXIpLGQgaW5zdGFuY2VvZiBhLl8uQW5pbWF0aW9uJiYoZz1kLmNhbGxiYWNrLGY9ZC5lYXNpbmcsZT1mLmR1cixkPWQuYXR0cik7dmFyIGg9YXJndW1lbnRzO2lmKGEuaXMoZCwiYXJyYXkiKSYmYS5pcyhoW2gubGVuZ3RoLTFdLCJhcnJheSIpKXZhciBpPSEwO3ZhciBqLGs9ZnVuY3Rpb24oKXtqP3RoaXMuYj1qOmo9dGhpcy5ifSxsPTAsbT10aGlzLG49ZyYmZnVuY3Rpb24oKXsrK2w9PW0ubGVuZ3RoJiZnLmNhbGwodGhpcyl9O3JldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24oYSxjKXtiLm9uY2UoInNuYXAuYW5pbWNyZWF0ZWQuIithLmlkLGspLGk/aFtjXSYmYS5hbmltYXRlLmFwcGx5KGEsaFtjXSk6YS5hbmltYXRlKGQsZSxmLG4pfSl9LGoucmVtb3ZlPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmxlbmd0aDspdGhpcy5wb3AoKS5yZW1vdmUoKTtyZXR1cm4gdGhpc30sai5iaW5kPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD17fTtpZigiZnVuY3Rpb24iPT10eXBlb2YgYil0aGlzLmJpbmRpbmdzW2FdPWI7ZWxzZXt2YXIgZT1jfHxhO3RoaXMuYmluZGluZ3NbYV09ZnVuY3Rpb24oYSl7ZFtlXT1hLGIuYXR0cihkKX19cmV0dXJuIHRoaXN9LGouYXR0cj1mdW5jdGlvbihhKXt2YXIgYj17fTtmb3IodmFyIGMgaW4gYSl0aGlzLmJpbmRpbmdzW2NdP3RoaXMuYmluZGluZ3NbY10oYVtjXSk6YltjXT1hW2NdO2Zvcih2YXIgZD0wLGU9dGhpcy5pdGVtcy5sZW5ndGg7ZT5kO2QrKyl0aGlzLml0ZW1zW2RdLmF0dHIoYik7cmV0dXJuIHRoaXN9LGouY2xlYXI9ZnVuY3Rpb24oKXtmb3IoO3RoaXMubGVuZ3RoOyl0aGlzLnBvcCgpfSxqLnNwbGljZT1mdW5jdGlvbihhLGIsYyl7YT0wPmE/Zyh0aGlzLmxlbmd0aCthLDApOmEsYj1nKDAsaCh0aGlzLmxlbmd0aC1hLGIpKTt2YXIgZCxlPVtdLGY9W10saj1bXTtmb3IoZD0yO2Q8YXJndW1lbnRzLmxlbmd0aDtkKyspai5wdXNoKGFyZ3VtZW50c1tkXSk7Zm9yKGQ9MDtiPmQ7ZCsrKWYucHVzaCh0aGlzW2ErZF0pO2Zvcig7ZDx0aGlzLmxlbmd0aC1hO2QrKyllLnB1c2godGhpc1thK2RdKTt2YXIgaz1qLmxlbmd0aDtmb3IoZD0wO2Q8aytlLmxlbmd0aDtkKyspdGhpcy5pdGVtc1thK2RdPXRoaXNbYStkXT1rPmQ/altkXTplW2Qta107Zm9yKGQ9dGhpcy5pdGVtcy5sZW5ndGg9dGhpcy5sZW5ndGgtPWItazt0aGlzW2RdOylkZWxldGUgdGhpc1tkKytdO3JldHVybiBuZXcgaShmKX0sai5leGNsdWRlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9dGhpcy5sZW5ndGg7Yz5iO2IrKylpZih0aGlzW2JdPT1hKXJldHVybiB0aGlzLnNwbGljZShiLDEpLCEwO3JldHVybiExfSxqLmluc2VydEFmdGVyPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLml0ZW1zLmxlbmd0aDtiLS07KXRoaXMuaXRlbXNbYl0uaW5zZXJ0QWZ0ZXIoYSk7cmV0dXJuIHRoaXN9LGouZ2V0QkJveD1mdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPVtdLGM9W10sZD1bXSxlPXRoaXMuaXRlbXMubGVuZ3RoO2UtLTspaWYoIXRoaXMuaXRlbXNbZV0ucmVtb3ZlZCl7dmFyIGY9dGhpcy5pdGVtc1tlXS5nZXRCQm94KCk7YS5wdXNoKGYueCksYi5wdXNoKGYueSksYy5wdXNoKGYueCtmLndpZHRoKSxkLnB1c2goZi55K2YuaGVpZ2h0KX1yZXR1cm4gYT1oLmFwcGx5KDAsYSksYj1oLmFwcGx5KDAsYiksYz1nLmFwcGx5KDAsYyksZD1nLmFwcGx5KDAsZCkse3g6YSx5OmIseDI6Yyx5MjpkLHdpZHRoOmMtYSxoZWlnaHQ6ZC1iLGN4OmErKGMtYSkvMixjeTpiKyhkLWIpLzJ9fSxqLmNsb25lPWZ1bmN0aW9uKGEpe2E9bmV3IGk7Zm9yKHZhciBiPTAsYz10aGlzLml0ZW1zLmxlbmd0aDtjPmI7YisrKWEucHVzaCh0aGlzLml0ZW1zW2JdLmNsb25lKCkpO3JldHVybiBhfSxqLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIlNuYXDigJhzIHNldCJ9LGoudHlwZT0ic2V0IixhLlNldD1pLGEuc2V0PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGk7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJmEucHVzaC5hcHBseShhLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSksYX19KSxkLnBsdWdpbihmdW5jdGlvbihhLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBiPWFbMF07c3dpdGNoKGIudG9Mb3dlckNhc2UoKSl7Y2FzZSJ0IjpyZXR1cm5bYiwwLDBdO2Nhc2UibSI6cmV0dXJuW2IsMSwwLDAsMSwwLDBdO2Nhc2UiciI6cmV0dXJuIDQ9PWEubGVuZ3RoP1tiLDAsYVsyXSxhWzNdXTpbYiwwXTtjYXNlInMiOnJldHVybiA1PT1hLmxlbmd0aD9bYiwxLDEsYVszXSxhWzRdXTozPT1hLmxlbmd0aD9bYiwxLDFdOltiLDFdfX1mdW5jdGlvbiBnKGIsYyxkKXtiPWJ8fG5ldyBhLk1hdHJpeCxjPWN8fG5ldyBhLk1hdHJpeCxiPWEucGFyc2VUcmFuc2Zvcm1TdHJpbmcoYi50b1RyYW5zZm9ybVN0cmluZygpKXx8W10sYz1hLnBhcnNlVHJhbnNmb3JtU3RyaW5nKGMudG9UcmFuc2Zvcm1TdHJpbmcoKSl8fFtdO2Zvcih2YXIgZSxnLGgsaSxqPU1hdGgubWF4KGIubGVuZ3RoLGMubGVuZ3RoKSxrPVtdLG49W10sbz0wO2o+bztvKyspe2lmKGg9YltvXXx8ZihjW29dKSxpPWNbb118fGYoaCksaFswXSE9aVswXXx8InIiPT1oWzBdLnRvTG93ZXJDYXNlKCkmJihoWzJdIT1pWzJdfHxoWzNdIT1pWzNdKXx8InMiPT1oWzBdLnRvTG93ZXJDYXNlKCkmJihoWzNdIT1pWzNdfHxoWzRdIT1pWzRdKSl7Yj1hLl8udHJhbnNmb3JtMm1hdHJpeChiLGQoKSksYz1hLl8udHJhbnNmb3JtMm1hdHJpeChjLGQoKSksaz1bWyJtIixiLmEsYi5iLGIuYyxiLmQsYi5lLGIuZl1dLG49W1sibSIsYy5hLGMuYixjLmMsYy5kLGMuZSxjLmZdXTticmVha31mb3Ioa1tvXT1bXSxuW29dPVtdLGU9MCxnPU1hdGgubWF4KGgubGVuZ3RoLGkubGVuZ3RoKTtnPmU7ZSsrKWUgaW4gaCYmKGtbb11bZV09aFtlXSksZSBpbiBpJiYobltvXVtlXT1pW2VdKX1yZXR1cm57ZnJvbTptKGspLHRvOm0obiksZjpsKGspfX1mdW5jdGlvbiBoKGEpe3JldHVybiBhfWZ1bmN0aW9uIGkoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybitiLnRvRml4ZWQoMykrYX19ZnVuY3Rpb24gaihhKXtyZXR1cm4gYS5qb2luKCIgIil9ZnVuY3Rpb24gayhiKXtyZXR1cm4gYS5yZ2IoYlswXSxiWzFdLGJbMl0sYlszXSl9ZnVuY3Rpb24gbChhKXt2YXIgYixjLGQsZSxmLGcsaD0wLGk9W107Zm9yKGI9MCxjPWEubGVuZ3RoO2M+YjtiKyspe2ZvcihmPSJbIixnPVsnIicrYVtiXVswXSsnIiddLGQ9MSxlPWFbYl0ubGVuZ3RoO2U+ZDtkKyspZ1tkXT0idmFsWyIraCsrICsiXSI7Zis9ZysiXSIsaVtiXT1mfXJldHVybiBGdW5jdGlvbigidmFsIiwicmV0dXJuIFNuYXAucGF0aC50b1N0cmluZy5jYWxsKFsiK2krIl0pIil9ZnVuY3Rpb24gbShhKXtmb3IodmFyIGI9W10sYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKylmb3IodmFyIGU9MSxmPWFbY10ubGVuZ3RoO2Y+ZTtlKyspYi5wdXNoKGFbY11bZV0pO3JldHVybiBifWZ1bmN0aW9uIG4oYSl7cmV0dXJuIGlzRmluaXRlKGEpfWZ1bmN0aW9uIG8oYixjKXtyZXR1cm4gYS5pcyhiLCJhcnJheSIpJiZhLmlzKGMsImFycmF5Iik/Yi50b1N0cmluZygpPT1jLnRvU3RyaW5nKCk6ITF9dmFyIHA9e30scT0vWyVhLXpdKyQvaSxyPVN0cmluZztwLnN0cm9rZT1wLmZpbGw9ImNvbG91ciIsYy5wcm90b3R5cGUuZXF1YWw9ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYigic25hcC51dGlsLmVxdWFsIix0aGlzLGEsYykuZmlyc3REZWZpbmVkKCl9LGIub24oInNuYXAudXRpbC5lcXVhbCIsZnVuY3Rpb24oYixjKXt2YXIgZCxlLGY9cih0aGlzLmF0dHIoYil8fCIiKSxzPXRoaXM7aWYoImNvbG91ciI9PXBbYl0pcmV0dXJuIGQ9YS5jb2xvcihmKSxlPWEuY29sb3IoYykse2Zyb206W2QucixkLmcsZC5iLGQub3BhY2l0eV0sdG86W2UucixlLmcsZS5iLGUub3BhY2l0eV0sZjprfTtpZigidmlld0JveCI9PWIpcmV0dXJuIGQ9dGhpcy5hdHRyKGIpLnZiLnNwbGl0KCIgIikubWFwKE51bWJlciksZT1jLnNwbGl0KCIgIikubWFwKE51bWJlcikse2Zyb206ZCx0bzplLGY6an07aWYoInRyYW5zZm9ybSI9PWJ8fCJncmFkaWVudFRyYW5zZm9ybSI9PWJ8fCJwYXR0ZXJuVHJhbnNmb3JtIj09YilyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGMmJihjPXIoYykucmVwbGFjZSgvXC57M318XHUyMDI2L2csZikpLGY9dGhpcy5tYXRyaXgsYz1hLl8ucmdUcmFuc2Zvcm0udGVzdChjKT9hLl8udHJhbnNmb3JtMm1hdHJpeChjLHRoaXMuZ2V0QkJveCgpKTphLl8udHJhbnNmb3JtMm1hdHJpeChhLl8uc3ZnVHJhbnNmb3JtMnN0cmluZyhjKSx0aGlzLmdldEJCb3goKSksZyhmLGMsZnVuY3Rpb24oKXtyZXR1cm4gcy5nZXRCQm94KDEpfSk7aWYoImQiPT1ifHwicGF0aCI9PWIpcmV0dXJuIGQ9YS5wYXRoLnRvQ3ViaWMoZixjKSx7ZnJvbTptKGRbMF0pLHRvOm0oZFsxXSksZjpsKGRbMF0pfTtpZigicG9pbnRzIj09YilyZXR1cm4gZD1yKGYpLnNwbGl0KGEuXy5zZXBhcmF0b3IpLGU9cihjKS5zcGxpdChhLl8uc2VwYXJhdG9yKSx7ZnJvbTpkLHRvOmUsZjpmdW5jdGlvbihhKXtyZXR1cm4gYX19O2lmKG4oZikmJm4oYykpcmV0dXJue2Zyb206cGFyc2VGbG9hdChmKSx0bzpwYXJzZUZsb2F0KGMpLGY6aH07dmFyIHQ9Zi5tYXRjaChxKSx1PXIoYykubWF0Y2gocSk7cmV0dXJuIHQmJm8odCx1KT97ZnJvbTpwYXJzZUZsb2F0KGYpLHRvOnBhcnNlRmxvYXQoYyksZjppKHQpfTp7ZnJvbTp0aGlzLmFzUFgoYiksdG86dGhpcy5hc1BYKGIsYyksZjpofX0pfSksZC5wbHVnaW4oZnVuY3Rpb24oYSxjLGQsZSl7Zm9yKHZhciBmPWMucHJvdG90eXBlLGc9Imhhc093blByb3BlcnR5IixoPSgiY3JlYXRlVG91Y2giaW4gZS5kb2MpLGk9WyJjbGljayIsImRibGNsaWNrIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2VvdXQiLCJtb3VzZW92ZXIiLCJtb3VzZXVwIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwidG91Y2hjYW5jZWwiXSxqPXttb3VzZWRvd246InRvdWNoc3RhcnQiLG1vdXNlbW92ZToidG91Y2htb3ZlIixtb3VzZXVwOiJ0b3VjaGVuZCJ9LGs9KGZ1bmN0aW9uKGEsYil7dmFyIGM9InkiPT1hPyJzY3JvbGxUb3AiOiJzY3JvbGxMZWZ0IixkPWImJmIubm9kZT9iLm5vZGUub3duZXJEb2N1bWVudDplLmRvYztyZXR1cm4gZFtjIGluIGQuZG9jdW1lbnRFbGVtZW50PyJkb2N1bWVudEVsZW1lbnQiOiJib2R5Il1bY119KSxsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpfSxtPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKX0sbj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1oJiZqW2JdP2pbYl06YixmPWZ1bmN0aW9uKGUpe3ZhciBmPWsoInkiLGQpLGk9aygieCIsZCk7aWYoaCYmaltnXShiKSlmb3IodmFyIG49MCxvPWUudGFyZ2V0VG91Y2hlcyYmZS50YXJnZXRUb3VjaGVzLmxlbmd0aDtvPm47bisrKWlmKGUudGFyZ2V0VG91Y2hlc1tuXS50YXJnZXQ9PWF8fGEuY29udGFpbnMoZS50YXJnZXRUb3VjaGVzW25dLnRhcmdldCkpe3ZhciBwPWU7ZT1lLnRhcmdldFRvdWNoZXNbbl0sZS5vcmlnaW5hbEV2ZW50PXAsZS5wcmV2ZW50RGVmYXVsdD1sLGUuc3RvcFByb3BhZ2F0aW9uPW07YnJlYWt9dmFyIHE9ZS5jbGllbnRYK2kscj1lLmNsaWVudFkrZjtyZXR1cm4gYy5jYWxsKGQsZSxxLHIpfTtyZXR1cm4gYiE9PWUmJmEuYWRkRXZlbnRMaXN0ZW5lcihiLGYsITEpLGEuYWRkRXZlbnRMaXN0ZW5lcihlLGYsITEpLGZ1bmN0aW9uKCl7cmV0dXJuIGIhPT1lJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixmLCExKSxhLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxmLCExKSwhMH19LG89W10scD1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD1hLmNsaWVudFgsZT1hLmNsaWVudFksZj1rKCJ5IiksZz1rKCJ4IiksaT1vLmxlbmd0aDtpLS07KXtpZihjPW9baV0saCl7Zm9yKHZhciBqLGw9YS50b3VjaGVzJiZhLnRvdWNoZXMubGVuZ3RoO2wtLTspaWYoaj1hLnRvdWNoZXNbbF0sai5pZGVudGlmaWVyPT1jLmVsLl9kcmFnLmlkfHxjLmVsLm5vZGUuY29udGFpbnMoai50YXJnZXQpKXtkPWouY2xpZW50WCxlPWouY2xpZW50WSwoYS5vcmlnaW5hbEV2ZW50P2Eub3JpZ2luYWxFdmVudDphKS5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrfX1lbHNlIGEucHJldmVudERlZmF1bHQoKTt2YXIgbT1jLmVsLm5vZGU7bS5uZXh0U2libGluZyxtLnBhcmVudE5vZGUsbS5zdHlsZS5kaXNwbGF5O2QrPWcsZSs9ZixiKCJzbmFwLmRyYWcubW92ZS4iK2MuZWwuaWQsYy5tb3ZlX3Njb3BlfHxjLmVsLGQtYy5lbC5fZHJhZy54LGUtYy5lbC5fZHJhZy55LGQsZSxhKX19LHE9ZnVuY3Rpb24oYyl7YS51bm1vdXNlbW92ZShwKS51bm1vdXNldXAocSk7Zm9yKHZhciBkLGU9by5sZW5ndGg7ZS0tOylkPW9bZV0sZC5lbC5fZHJhZz17fSxiKCJzbmFwLmRyYWcuZW5kLiIrZC5lbC5pZCxkLmVuZF9zY29wZXx8ZC5zdGFydF9zY29wZXx8ZC5tb3ZlX3Njb3BlfHxkLmVsLGMpLGIub2ZmKCJzbmFwLmRyYWcuKi4iK2QuZWwuaWQpO289W119LHI9aS5sZW5ndGg7ci0tOykhZnVuY3Rpb24oYil7YVtiXT1mW2JdPWZ1bmN0aW9uKGMsZCl7aWYoYS5pcyhjLCJmdW5jdGlvbiIpKXRoaXMuZXZlbnRzPXRoaXMuZXZlbnRzfHxbXSx0aGlzLmV2ZW50cy5wdXNoKHtuYW1lOmIsZjpjLHVuYmluZDpuKHRoaXMubm9kZXx8ZG9jdW1lbnQsYixjLGR8fHRoaXMpfSk7ZWxzZSBmb3IodmFyIGU9MCxmPXRoaXMuZXZlbnRzLmxlbmd0aDtmPmU7ZSsrKWlmKHRoaXMuZXZlbnRzW2VdLm5hbWU9PWIpdHJ5e3RoaXMuZXZlbnRzW2VdLmYuY2FsbCh0aGlzKX1jYXRjaChnKXt9cmV0dXJuIHRoaXN9LGFbInVuIitiXT1mWyJ1biIrYl09ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPXRoaXMuZXZlbnRzfHxbXSxkPWMubGVuZ3RoO2QtLTspaWYoY1tkXS5uYW1lPT1iJiYoY1tkXS5mPT1hfHwhYSkpcmV0dXJuIGNbZF0udW5iaW5kKCksYy5zcGxpY2UoZCwxKSwhYy5sZW5ndGgmJmRlbGV0ZSB0aGlzLmV2ZW50cyx0aGlzO3JldHVybiB0aGlzfX0oaVtyXSk7Zi5ob3Zlcj1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5tb3VzZW92ZXIoYSxjKS5tb3VzZW91dChiLGR8fGMpfSxmLnVuaG92ZXI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy51bm1vdXNlb3ZlcihhKS51bm1vdXNlb3V0KGIpfTt2YXIgcz1bXTtmLmRyYWc9ZnVuY3Rpb24oYyxkLGUsZixnLGgpe2Z1bmN0aW9uIGkoaSxqLGwpeyhpLm9yaWdpbmFsRXZlbnR8fGkpLnByZXZlbnREZWZhdWx0KCksay5fZHJhZy54PWosay5fZHJhZy55PWwsay5fZHJhZy5pZD1pLmlkZW50aWZpZXIsIW8ubGVuZ3RoJiZhLm1vdXNlbW92ZShwKS5tb3VzZXVwKHEpLG8ucHVzaCh7ZWw6ayxtb3ZlX3Njb3BlOmYsc3RhcnRfc2NvcGU6ZyxlbmRfc2NvcGU6aH0pLGQmJmIub24oInNuYXAuZHJhZy5zdGFydC4iK2suaWQsZCksYyYmYi5vbigic25hcC5kcmFnLm1vdmUuIitrLmlkLGMpLGUmJmIub24oInNuYXAuZHJhZy5lbmQuIitrLmlkLGUpLGIoInNuYXAuZHJhZy5zdGFydC4iK2suaWQsZ3x8Znx8ayxqLGwsaSl9ZnVuY3Rpb24gaihhLGMsZCl7Yigic25hcC5kcmFnaW5pdC4iK2suaWQsayxhLGMsZCl9dmFyIGs9dGhpcztpZighYXJndW1lbnRzLmxlbmd0aCl7dmFyIGw7cmV0dXJuIGsuZHJhZyhmdW5jdGlvbihhLGIpe3RoaXMuYXR0cih7dHJhbnNmb3JtOmwrKGw/IlQiOiJ0IikrW2EsYl19KX0sZnVuY3Rpb24oKXtsPXRoaXMudHJhbnNmb3JtKCkubG9jYWx9KX1yZXR1cm4gYi5vbigic25hcC5kcmFnaW5pdC4iK2suaWQsaSksay5fZHJhZz17fSxzLnB1c2goe2VsOmssc3RhcnQ6aSxpbml0Omp9KSxrLm1vdXNlZG93bihqKSxrfSxmLnVuZHJhZz1mdW5jdGlvbigpe2Zvcih2YXIgYz1zLmxlbmd0aDtjLS07KXNbY10uZWw9PXRoaXMmJih0aGlzLnVubW91c2Vkb3duKHNbY10uaW5pdCkscy5zcGxpY2UoYywxKSxiLnVuYmluZCgic25hcC5kcmFnLiouIit0aGlzLmlkKSxiLnVuYmluZCgic25hcC5kcmFnaW5pdC4iK3RoaXMuaWQpKTtyZXR1cm4hcy5sZW5ndGgmJmEudW5tb3VzZW1vdmUocCkudW5tb3VzZXVwKHEpLHRoaXN9fSksZC5wbHVnaW4oZnVuY3Rpb24oYSxjLGQsZSl7dmFyIGY9KGMucHJvdG90eXBlLGQucHJvdG90eXBlKSxnPS9eXHMqdXJsXCgoLispXCkvLGg9U3RyaW5nLGk9YS5fLiQ7YS5maWx0ZXI9e30sZi5maWx0ZXI9ZnVuY3Rpb24oYil7dmFyIGQ9dGhpczsic3ZnIiE9ZC50eXBlJiYoZD1kLnBhcGVyKTt2YXIgZT1hLnBhcnNlKGgoYikpLGY9YS5fLmlkKCksZz0oZC5ub2RlLm9mZnNldFdpZHRoLGQubm9kZS5vZmZzZXRIZWlnaHQsaSgiZmlsdGVyIikpO3JldHVybiBpKGcse2lkOmYsZmlsdGVyVW5pdHM6InVzZXJTcGFjZU9uVXNlIn0pLGcuYXBwZW5kQ2hpbGQoZS5ub2RlKSxkLmRlZnMuYXBwZW5kQ2hpbGQoZyksbmV3IGMoZyl9LGIub24oInNuYXAudXRpbC5nZXRhdHRyLmZpbHRlciIsZnVuY3Rpb24oKXtiLnN0b3AoKTt2YXIgYz1pKHRoaXMubm9kZSwiZmlsdGVyIik7aWYoYyl7dmFyIGQ9aChjKS5tYXRjaChnKTtyZXR1cm4gZCYmYS5zZWxlY3QoZFsxXSl9fSksYi5vbigic25hcC51dGlsLmF0dHIuZmlsdGVyIixmdW5jdGlvbihkKXtpZihkIGluc3RhbmNlb2YgYyYmImZpbHRlciI9PWQudHlwZSl7Yi5zdG9wKCk7dmFyIGU9ZC5ub2RlLmlkO2V8fChpKGQubm9kZSx7aWQ6ZC5pZH0pLGU9ZC5pZCksaSh0aGlzLm5vZGUse2ZpbHRlcjphLnVybChlKX0pfWQmJiJub25lIiE9ZHx8KGIuc3RvcCgpLHRoaXMubm9kZS5yZW1vdmVBdHRyaWJ1dGUoImZpbHRlciIpKX0pLGEuZmlsdGVyLmJsdXI9ZnVuY3Rpb24oYixjKXtudWxsPT1iJiYoYj0yKTt2YXIgZD1udWxsPT1jP2I6W2IsY107cmV0dXJuIGEuZm9ybWF0KCc8ZmVHYXVzc2lhbkJsdXIgc3RkRGV2aWF0aW9uPSJ7ZGVmfSIvPicse2RlZjpkfSl9LGEuZmlsdGVyLmJsdXIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcygpfSxhLmZpbHRlci5zaGFkb3c9ZnVuY3Rpb24oYixjLGQsZSxmKXtyZXR1cm4gbnVsbD09ZiYmKG51bGw9PWU/KGY9ZCxkPTQsZT0iIzAwMCIpOihmPWUsZT1kLGQ9NCkpLG51bGw9PWQmJihkPTQpLG51bGw9PWYmJihmPTEpLG51bGw9PWImJihiPTAsYz0yKSxudWxsPT1jJiYoYz1iKSxlPWEuY29sb3IoZSksYS5mb3JtYXQoJzxmZUdhdXNzaWFuQmx1ciBpbj0iU291cmNlQWxwaGEiIHN0ZERldmlhdGlvbj0ie2JsdXJ9Ii8+PGZlT2Zmc2V0IGR4PSJ7ZHh9IiBkeT0ie2R5fSIgcmVzdWx0PSJvZmZzZXRibHVyIi8+PGZlRmxvb2QgZmxvb2QtY29sb3I9Intjb2xvcn0iLz48ZmVDb21wb3NpdGUgaW4yPSJvZmZzZXRibHVyIiBvcGVyYXRvcj0iaW4iLz48ZmVDb21wb25lbnRUcmFuc2Zlcj48ZmVGdW5jQSB0eXBlPSJsaW5lYXIiIHNsb3BlPSJ7b3BhY2l0eX0iLz48L2ZlQ29tcG9uZW50VHJhbnNmZXI+PGZlTWVyZ2U+PGZlTWVyZ2VOb2RlLz48ZmVNZXJnZU5vZGUgaW49IlNvdXJjZUdyYXBoaWMiLz48L2ZlTWVyZ2U+Jyx7Y29sb3I6ZSxkeDpiLGR5OmMsYmx1cjpkLG9wYWNpdHk6Zn0pfSxhLmZpbHRlci5zaGFkb3cudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcygpfSxhLmZpbHRlci5ncmF5c2NhbGU9ZnVuY3Rpb24oYil7cmV0dXJuIG51bGw9PWImJihiPTEpLGEuZm9ybWF0KCc8ZmVDb2xvck1hdHJpeCB0eXBlPSJtYXRyaXgiIHZhbHVlcz0ie2F9IHtifSB7Y30gMCAwIHtkfSB7ZX0ge2Z9IDAgMCB7Z30ge2J9IHtofSAwIDAgMCAwIDAgMSAwIi8+Jyx7YTouMjEyNisuNzg3NCooMS1iKSxiOi43MTUyLS43MTUyKigxLWIpLGM6LjA3MjItLjA3MjIqKDEtYiksZDouMjEyNi0uMjEyNiooMS1iKSxlOi43MTUyKy4yODQ4KigxLWIpLGY6LjA3MjItLjA3MjIqKDEtYiksZzouMjEyNi0uMjEyNiooMS1iKSxoOi4wNzIyKy45Mjc4KigxLWIpfSl9LGEuZmlsdGVyLmdyYXlzY2FsZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzKCl9LGEuZmlsdGVyLnNlcGlhPWZ1bmN0aW9uKGIpe3JldHVybiBudWxsPT1iJiYoYj0xKSxhLmZvcm1hdCgnPGZlQ29sb3JNYXRyaXggdHlwZT0ibWF0cml4IiB2YWx1ZXM9InthfSB7Yn0ge2N9IDAgMCB7ZH0ge2V9IHtmfSAwIDAge2d9IHtofSB7aX0gMCAwIDAgMCAwIDEgMCIvPicse2E6LjM5MysuNjA3KigxLWIpLGI6Ljc2OS0uNzY5KigxLWIpLGM6LjE4OS0uMTg5KigxLWIpLGQ6LjM0OS0uMzQ5KigxLWIpLGU6LjY4NisuMzE0KigxLWIpLGY6LjE2OC0uMTY4KigxLWIpLGc6LjI3Mi0uMjcyKigxLWIpLGg6LjUzNC0uNTM0KigxLWIpLGk6LjEzMSsuODY5KigxLWIpfSl9LGEuZmlsdGVyLnNlcGlhLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMoKX0sYS5maWx0ZXIuc2F0dXJhdGU9ZnVuY3Rpb24oYil7cmV0dXJuIG51bGw9PWImJihiPTEpLGEuZm9ybWF0KCc8ZmVDb2xvck1hdHJpeCB0eXBlPSJzYXR1cmF0ZSIgdmFsdWVzPSJ7YW1vdW50fSIvPicse2Ftb3VudDoxLWJ9KX0sYS5maWx0ZXIuc2F0dXJhdGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcygpfSxhLmZpbHRlci5odWVSb3RhdGU9ZnVuY3Rpb24oYil7cmV0dXJuIGI9Ynx8MCxhLmZvcm1hdCgnPGZlQ29sb3JNYXRyaXggdHlwZT0iaHVlUm90YXRlIiB2YWx1ZXM9InthbmdsZX0iLz4nLHthbmdsZTpifSl9LGEuZmlsdGVyLmh1ZVJvdGF0ZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzKCl9LGEuZmlsdGVyLmludmVydD1mdW5jdGlvbihiKXtyZXR1cm4gbnVsbD09YiYmKGI9MSksYS5mb3JtYXQoJzxmZUNvbXBvbmVudFRyYW5zZmVyPjxmZUZ1bmNSIHR5cGU9InRhYmxlIiB0YWJsZVZhbHVlcz0ie2Ftb3VudH0ge2Ftb3VudDJ9Ii8+PGZlRnVuY0cgdHlwZT0idGFibGUiIHRhYmxlVmFsdWVzPSJ7YW1vdW50fSB7YW1vdW50Mn0iLz48ZmVGdW5jQiB0eXBlPSJ0YWJsZSIgdGFibGVWYWx1ZXM9InthbW91bnR9IHthbW91bnQyfSIvPjwvZmVDb21wb25lbnRUcmFuc2Zlcj4nLHthbW91bnQ6YixhbW91bnQyOjEtYn0pfSxhLmZpbHRlci5pbnZlcnQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcygpfSxhLmZpbHRlci5icmlnaHRuZXNzPWZ1bmN0aW9uKGIpe3JldHVybiBudWxsPT1iJiYoYj0xKSxhLmZvcm1hdCgnPGZlQ29tcG9uZW50VHJhbnNmZXI+PGZlRnVuY1IgdHlwZT0ibGluZWFyIiBzbG9wZT0ie2Ftb3VudH0iLz48ZmVGdW5jRyB0eXBlPSJsaW5lYXIiIHNsb3BlPSJ7YW1vdW50fSIvPjxmZUZ1bmNCIHR5cGU9ImxpbmVhciIgc2xvcGU9InthbW91bnR9Ii8+PC9mZUNvbXBvbmVudFRyYW5zZmVyPicse2Ftb3VudDpifSl9LGEuZmlsdGVyLmJyaWdodG5lc3MudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcygpfSxhLmZpbHRlci5jb250cmFzdD1mdW5jdGlvbihiKXtyZXR1cm4gbnVsbD09YiYmKGI9MSksYS5mb3JtYXQoJzxmZUNvbXBvbmVudFRyYW5zZmVyPjxmZUZ1bmNSIHR5cGU9ImxpbmVhciIgc2xvcGU9InthbW91bnR9IiBpbnRlcmNlcHQ9InthbW91bnQyfSIvPjxmZUZ1bmNHIHR5cGU9ImxpbmVhciIgc2xvcGU9InthbW91bnR9IiBpbnRlcmNlcHQ9InthbW91bnQyfSIvPjxmZUZ1bmNCIHR5cGU9ImxpbmVhciIgc2xvcGU9InthbW91bnR9IiBpbnRlcmNlcHQ9InthbW91bnQyfSIvPjwvZmVDb21wb25lbnRUcmFuc2Zlcj4nLHthbW91bnQ6YixhbW91bnQyOi41LWIvMn0pfSxhLmZpbHRlci5jb250cmFzdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzKCl9fSksZC5wbHVnaW4oZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLl8uYm94LGc9YS5pcyxoPS9eW15hLXpdKihbdGJtbHJjXSkvaSxpPWZ1bmN0aW9uKCl7cmV0dXJuIlQiK3RoaXMuZHgrIiwiK3RoaXMuZHl9O2IucHJvdG90eXBlLmdldEFsaWduPWZ1bmN0aW9uKGEsYil7bnVsbD09YiYmZyhhLCJzdHJpbmciKSYmKGI9YSxhPW51bGwpLGE9YXx8dGhpcy5wYXBlcjt2YXIgYz1hLmdldEJCb3g/YS5nZXRCQm94KCk6ZihhKSxkPXRoaXMuZ2V0QkJveCgpLGU9e307c3dpdGNoKGI9YiYmYi5tYXRjaChoKSxiPWI/YlsxXS50b0xvd2VyQ2FzZSgpOiJjIil7Y2FzZSJ0IjplLmR4PTAsZS5keT1jLnktZC55O2JyZWFrO2Nhc2UiYiI6ZS5keD0wLGUuZHk9Yy55Mi1kLnkyO2JyZWFrO2Nhc2UibSI6ZS5keD0wLGUuZHk9Yy5jeS1kLmN5O2JyZWFrO2Nhc2UibCI6ZS5keD1jLngtZC54LGUuZHk9MDticmVhaztjYXNlInIiOmUuZHg9Yy54Mi1kLngyLGUuZHk9MDticmVhaztkZWZhdWx0OmUuZHg9Yy5jeC1kLmN4LGUuZHk9MH1yZXR1cm4gZS50b1N0cmluZz1pLGV9LGIucHJvdG90eXBlLmFsaWduPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMudHJhbnNmb3JtKCIuLi4iK3RoaXMuZ2V0QWxpZ24oYSxiKSl9fSksZC5wbHVnaW4oZnVuY3Rpb24oYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthPWEuc3BsaXQoLyg/PSMpLyk7dmFyIGI9bmV3IFN0cmluZyhhWzVdKTtyZXR1cm4gYls1MF09YVswXSxiWzEwMF09YVsxXSxiWzIwMF09YVsyXSxiWzMwMF09YVszXSxiWzQwMF09YVs0XSxiWzUwMF09YVs1XSxiWzYwMF09YVs2XSxiWzcwMF09YVs3XSxiWzgwMF09YVs4XSxiWzkwMF09YVs5XSxhWzEwXSYmKGIuQTEwMD1hWzEwXSxiLkEyMDA9YVsxMV0sYi5BNDAwPWFbMTJdLGIuQTcwMD1hWzEzXSksYn12YXIgZz0iI2ZmZWJlZSNmZmNkZDIjZWY5YTlhI2U1NzM3MyNlZjUzNTAjZjQ0MzM2I2U1MzkzNSNkMzJmMmYjYzYyODI4I2I3MWMxYyNmZjhhODAjZmY1MjUyI2ZmMTc0NCNkNTAwMDAiLGg9IiNGQ0U0RUMjRjhCQkQwI0Y0OEZCMSNGMDYyOTIjRUM0MDdBI0U5MUU2MyNEODFCNjAjQzIxODVCI0FEMTQ1NyM4ODBFNEYjRkY4MEFCI0ZGNDA4MSNGNTAwNTcjQzUxMTYyIixpPSIjRjNFNUY1I0UxQkVFNyNDRTkzRDgjQkE2OEM4I0FCNDdCQyM5QzI3QjAjOEUyNEFBIzdCMUZBMiM2QTFCOUEjNEExNDhDI0VBODBGQyNFMDQwRkIjRDUwMEY5I0FBMDBGRiIsaj0iI0VERTdGNiNEMUM0RTkjQjM5RERCIzk1NzVDRCM3RTU3QzIjNjczQUI3IzVFMzVCMSM1MTJEQTgjNDUyN0EwIzMxMUI5MiNCMzg4RkYjN0M0REZGIzY1MUZGRiM2MjAwRUEiLGs9IiNFOEVBRjYjQzVDQUU5IzlGQThEQSM3OTg2Q0IjNUM2QkMwIzNGNTFCNSMzOTQ5QUIjMzAzRjlGIzI4MzU5MyMxQTIzN0UjOEM5RUZGIzUzNkRGRSMzRDVBRkUjMzA0RkZFIixsPSIjRTNGMkZEI0JCREVGQiM5MENBRjkjNjRCNUY2IzY0QjVGNiMyMTk2RjMjMUU4OEU1IzE5NzZEMiMxNTY1QzAjMEQ0N0ExIzgyQjFGRiM0NDhBRkYjMjk3OUZGIzI5NjJGRiIsbT0iI0UxRjVGRSNCM0U1RkMjODFENEZBIzRGQzNGNyMyOUI2RjYjMDNBOUY0IzAzOUJFNSMwMjg4RDEjMDI3N0JEIzAxNTc5QiM4MEQ4RkYjNDBDNEZGIzAwQjBGRiMwMDkxRUEiLG49IiNFMEY3RkEjQjJFQkYyIzgwREVFQSM0REQwRTEjMjZDNkRBIzAwQkNENCMwMEFDQzEjMDA5N0E3IzAwODM4RiMwMDYwNjQjODRGRkZGIzE4RkZGRiMwMEU1RkYjMDBCOEQ0IixvPSIjRTBGMkYxI0IyREZEQiM4MENCQzQjNERCNkFDIzI2QTY5QSMwMDk2ODgjMDA4OTdCIzAwNzk2QiMwMDY5NUMjMDA0RDQwI0E3RkZFQiM2NEZGREEjMURFOUI2IzAwQkZBNSIscD0iI0U4RjVFOSNDOEU2QzkjQTVENkE3IzgxQzc4NCM2NkJCNkEjNENBRjUwIzQzQTA0NyMzODhFM0MjMkU3RDMyIzFCNUUyMCNCOUY2Q0EjNjlGMEFFIzAwRTY3NiMwMEM4NTMiLHE9IiNGMUY4RTkjRENFREM4I0M1RTFBNSNBRUQ1ODEjOUNDQzY1IzhCQzM0QSM3Q0IzNDIjNjg5RjM4IzU1OEIyRiMzMzY5MUUjQ0NGRjkwI0IyRkY1OSM3NkZGMDMjNjRERDE3IixyPSIjRjlGQkU3I0YwRjRDMyNFNkVFOUMjRENFNzc1I0Q0RTE1NyNDRERDMzkjQzBDQTMzI0FGQjQyQiM5RTlEMjQjODI3NzE3I0Y0RkY4MSNFRUZGNDEjQzZGRjAwI0FFRUEwMCIscz0iI0ZGRkRFNyNGRkY5QzQjRkZGNTlEI0ZGRjE3NiNGRkVFNTgjRkZFQjNCI0ZERDgzNSNGQkMwMkQjRjlBODI1I0Y1N0YxNyNGRkZGOEQjRkZGRjAwI0ZGRUEwMCNGRkQ2MDAiLHQ9IiNGRkY4RTEjRkZFQ0IzI0ZGRTA4MiNGRkQ1NEYjRkZDQTI4I0ZGQzEwNyNGRkIzMDAjRkZBMDAwI0ZGOEYwMCNGRjZGMDAjRkZFNTdGI0ZGRDc0MCNGRkM0MDAjRkZBQjAwIix1PSIjRkZGM0UwI0ZGRTBCMiNGRkNDODAjRkZCNzREI0ZGQTcyNiNGRjk4MDAjRkI4QzAwI0Y1N0MwMCNFRjZDMDAjRTY1MTAwI0ZGRDE4MCNGRkFCNDAjRkY5MTAwI0ZGNkQwMCIsdj0iI0ZCRTlFNyNGRkNDQkMjRkZBQjkxI0ZGOEE2NSNGRjcwNDMjRkY1NzIyI0Y0NTExRSNFNjRBMTkjRDg0MzE1I0JGMzYwQyNGRjlFODAjRkY2RTQwI0ZGM0QwMCNERDJDMDAiLHc9IiNFRkVCRTkjRDdDQ0M4I0JDQUFBNCNBMTg4N0YjOEQ2RTYzIzc5NTU0OCM2RDRDNDEjNUQ0MDM3IzRFMzQyRSMzRTI3MjMiLHg9IiNGQUZBRkEjRjVGNUY1I0VFRUVFRSNFMEUwRTAjQkRCREJEIzlFOUU5RSM3NTc1NzUjNjE2MTYxIzQyNDI0MiMyMTIxMjEiLHk9IiNFQ0VGRjEjQ0ZEOERDI0IwQkVDNSM5MEE0QUUjNzg5MDlDIzYwN0Q4QiM1NDZFN0EjNDU1QTY0IzM3NDc0RiMyNjMyMzgiO2IubXVpPXt9LGIuZmxhdD17fSxiLm11aS5yZWQ9ZihnKSxiLm11aS5waW5rPWYoaCksYi5tdWkucHVycGxlPWYoaSksYi5tdWkuZGVlcHB1cnBsZT1mKGopLGIubXVpLmluZGlnbz1mKGspLGIubXVpLmJsdWU9ZihsKSxiLm11aS5saWdodGJsdWU9ZihtKSxiLm11aS5jeWFuPWYobiksYi5tdWkudGVhbD1mKG8pLGIubXVpLmdyZWVuPWYocCksYi5tdWkubGlnaHRncmVlbj1mKHEpLGIubXVpLmxpbWU9ZihyKSxiLm11aS55ZWxsb3c9ZihzKSxiLm11aS5hbWJlcj1mKHQpLGIubXVpLm9yYW5nZT1mKHUpLGIubXVpLmRlZXBvcmFuZ2U9Zih2KSxiLm11aS5icm93bj1mKHcpLGIubXVpLmdyZXk9Zih4KSxiLm11aS5ibHVlZ3JleT1mKHkpLGIuZmxhdC50dXJxdW9pc2U9IiMxYWJjOWMiLGIuZmxhdC5ncmVlbnNlYT0iIzE2YTA4NSIsYi5mbGF0LnN1bmZsb3dlcj0iI2YxYzQwZiIsYi5mbGF0Lm9yYW5nZT0iI2YzOWMxMiIsYi5mbGF0LmVtZXJsYW5kPSIjMmVjYzcxIixiLmZsYXQubmVwaHJpdGlzPSIjMjdhZTYwIixiLmZsYXQuY2Fycm90PSIjZTY3ZTIyIixiLmZsYXQucHVtcGtpbj0iI2QzNTQwMCIsYi5mbGF0LnBldGVycml2ZXI9IiMzNDk4ZGIiLGIuZmxhdC5iZWxpemVob2xlPSIjMjk4MGI5IixiLmZsYXQuYWxpemFyaW49IiNlNzRjM2MiLGIuZmxhdC5wb21lZ3JhbmF0ZT0iI2MwMzkyYiIsYi5mbGF0LmFtZXRoeXN0PSIjOWI1OWI2IixiLmZsYXQud2lzdGVyaWE9IiM4ZTQ0YWQiLGIuZmxhdC5jbG91ZHM9IiNlY2YwZjEiLGIuZmxhdC5zaWx2ZXI9IiNiZGMzYzciLGIuZmxhdC53ZXRhc3BoYWx0PSIjMzQ0OTVlIixiLmZsYXQubWlkbmlnaHRibHVlPSIjMmMzZTUwIixiLmZsYXQuY29uY3JldGU9IiM5NWE1YTYiLGIuZmxhdC5hc2Jlc3Rvcz0iIzdmOGM4ZCIsYi5pbXBvcnRNVUlDb2xvcnM9ZnVuY3Rpb24oKXtmb3IodmFyIGMgaW4gYi5tdWkpYi5tdWkuaGFzT3duUHJvcGVydHkoYykmJihhW2NdPWIubXVpW2NdKX19KSxkfSk7"}]},{"name":"Github 增强 - 高速下载","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://github.com/*","*://hub.fastgit.org/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"xiu2_menu_raw_fast":"n3"},"ts":1631245412746},"enabled":false,"position":10,"file_url":"https://greasyfork.org/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD/code/Github%20%E5%A2%9E%E5%BC%BA%20-%20%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD.user.js","uuid":"b2494f88-aa30-49c0-9f14-157b5dc46863","source":""},{"name":"知乎免登录","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["api.zhihu.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.zhihu.com/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1632384840772,"data":{}},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/396171-%E7%9F%A5%E4%B9%8E%E5%85%8D%E7%99%BB%E5%BD%95/code/%E7%9F%A5%E4%B9%8E%E5%85%8D%E7%99%BB%E5%BD%95.user.js","uuid":"171c7156-710a-42df-a590-8279f9236863","source":""},{"name":"百度网盘文件高速下载，无需SVIP超级会员","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://pan.baidu.com/*","*://yun.baidu.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1642390204661,"data":{}},"enabled":true,"position":12,"uuid":"6ae85477-ba87-4438-b2c1-e7a841ade4e8","source":"","requires":[{"meta":{"name":"sweetalert.min.js","url":"https://unpkg.com/sweetalert/dist/sweetalert.min.js","ts":1642390207021,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.min.js","url":"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js","ts":1642390204927,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"clipboard.min.js","url":"https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/clipboard.min.js","ts":1642390204917,"mimetype":"text/javascript"},"source":""}]},{"name":"解析腾讯，优酷，爱奇艺等全网会员视频，vip视频，添加百度网盘超级会员账号共享","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"run_at":null,"override":{"use_includes":[],"orig_includes":["*://v.youku.com/v_*","*://m.youku.com/v*","*://m.youku.com/a*","*://*.iqiyi.com/v_*","*://*.iqiyi.com/w_*","*://*.iqiyi.com/a_*","*://*.iqiyi.com/dianying/*","*://*.le.com/ptv/vplay/*","*v.qq.com/x/cover/*","*v.qq.com/x/page/*","*v.qq.com/play*","*://pan.baidu.com/*","*://*.tudou.com/listplay/*","*://*.tudou.com/albumplay/*","*://*.tudou.com/programs/view/*","*://*.mgtv.com/b/*","*://film.sohu.com/album/*","*://tv.sohu.com/*","*://*.bilibili.com/video/*","*://*.bilibili.com/anime/*","*://*.bilibili.com/bangumi/play/*","*://vip.pptv.com/show/*","*://v.pptv.com/show/*","*://*.baofeng.com/play/*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://vip.1905.com/play/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1642390231462,"data":{}},"enabled":true,"position":13,"uuid":"2d27556b-a026-48ef-aa24-a2fbdbfde369","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js","ts":1642390231777,"mimetype":"text/javascript"},"source":"LyohIGpRdWVyeSB2MS4xMi40IHwgKGMpIGpRdWVyeSBGb3VuZGF0aW9uIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovCiFmdW5jdGlvbihhLGIpeyJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWEuZG9jdW1lbnQ/YihhLCEwKTpmdW5jdGlvbihhKXtpZighYS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQiKTtyZXR1cm4gYihhKX06YihhKX0oInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPWEuZG9jdW1lbnQsZT1jLnNsaWNlLGY9Yy5jb25jYXQsZz1jLnB1c2gsaD1jLmluZGV4T2YsaT17fSxqPWkudG9TdHJpbmcsaz1pLmhhc093blByb3BlcnR5LGw9e30sbT0iMS4xMi40IixuPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBuLmZuLmluaXQoYSxiKX0sbz0vXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2cscD0vXi1tcy0vLHE9Ly0oW1xkYS16XSkvZ2kscj1mdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9O24uZm49bi5wcm90b3R5cGU9e2pxdWVyeTptLGNvbnN0cnVjdG9yOm4sc2VsZWN0b3I6IiIsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT8wPmE/dGhpc1thK3RoaXMubGVuZ3RoXTp0aGlzW2FdOmUuY2FsbCh0aGlzKX0scHVzaFN0YWNrOmZ1bmN0aW9uKGEpe3ZhciBiPW4ubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGEpO3JldHVybiBiLnByZXZPYmplY3Q9dGhpcyxiLmNvbnRleHQ9dGhpcy5jb250ZXh0LGJ9LGVhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIG4uZWFjaCh0aGlzLGEpfSxtYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4ubWFwKHRoaXMsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS5jYWxsKGIsYyxiKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCxjPSthKygwPmE/YjowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soYz49MCYmYj5jP1t0aGlzW2NdXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDpnLHNvcnQ6Yy5zb3J0LHNwbGljZTpjLnNwbGljZX0sbi5leHRlbmQ9bi5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZz1hcmd1bWVudHNbMF18fHt9LGg9MSxpPWFyZ3VtZW50cy5sZW5ndGgsaj0hMTtmb3IoImJvb2xlYW4iPT10eXBlb2YgZyYmKGo9ZyxnPWFyZ3VtZW50c1toXXx8e30saCsrKSwib2JqZWN0Ij09dHlwZW9mIGd8fG4uaXNGdW5jdGlvbihnKXx8KGc9e30pLGg9PT1pJiYoZz10aGlzLGgtLSk7aT5oO2grKylpZihudWxsIT0oZT1hcmd1bWVudHNbaF0pKWZvcihkIGluIGUpYT1nW2RdLGM9ZVtkXSxnIT09YyYmKGomJmMmJihuLmlzUGxhaW5PYmplY3QoYyl8fChiPW4uaXNBcnJheShjKSkpPyhiPyhiPSExLGY9YSYmbi5pc0FycmF5KGEpP2E6W10pOmY9YSYmbi5pc1BsYWluT2JqZWN0KGEpP2E6e30sZ1tkXT1uLmV4dGVuZChqLGYsYykpOnZvaWQgMCE9PWMmJihnW2RdPWMpKTtyZXR1cm4gZ30sbi5leHRlbmQoe2V4cGFuZG86ImpRdWVyeSIrKG0rTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXEQvZywiIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoYSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuImZ1bmN0aW9uIj09PW4udHlwZShhKX0saXNBcnJheTpBcnJheS5pc0FycmF5fHxmdW5jdGlvbihhKXtyZXR1cm4iYXJyYXkiPT09bi50eXBlKGEpfSxpc1dpbmRvdzpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YSYmYT09YS53aW5kb3d9LGlzTnVtZXJpYzpmdW5jdGlvbihhKXt2YXIgYj1hJiZhLnRvU3RyaW5nKCk7cmV0dXJuIW4uaXNBcnJheShhKSYmYi1wYXJzZUZsb2F0KGIpKzE+PTB9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7Zm9yKGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH0saXNQbGFpbk9iamVjdDpmdW5jdGlvbihhKXt2YXIgYjtpZighYXx8Im9iamVjdCIhPT1uLnR5cGUoYSl8fGEubm9kZVR5cGV8fG4uaXNXaW5kb3coYSkpcmV0dXJuITE7dHJ5e2lmKGEuY29uc3RydWN0b3ImJiFrLmNhbGwoYSwiY29uc3RydWN0b3IiKSYmIWsuY2FsbChhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwiaXNQcm90b3R5cGVPZiIpKXJldHVybiExfWNhdGNoKGMpe3JldHVybiExfWlmKCFsLm93bkZpcnN0KWZvcihiIGluIGEpcmV0dXJuIGsuY2FsbChhLGIpO2ZvcihiIGluIGEpO3JldHVybiB2b2lkIDA9PT1ifHxrLmNhbGwoYSxiKX0sdHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9hKyIiOiJvYmplY3QiPT10eXBlb2YgYXx8ImZ1bmN0aW9uIj09dHlwZW9mIGE/aVtqLmNhbGwoYSldfHwib2JqZWN0Ijp0eXBlb2YgYX0sZ2xvYmFsRXZhbDpmdW5jdGlvbihiKXtiJiZuLnRyaW0oYikmJihhLmV4ZWNTY3JpcHR8fGZ1bmN0aW9uKGIpe2EuZXZhbC5jYWxsKGEsYil9KShiKX0sY2FtZWxDYXNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UocCwibXMtIikucmVwbGFjZShxLHIpfSxub2RlTmFtZTpmdW5jdGlvbihhLGIpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTA7aWYocyhhKSl7Zm9yKGM9YS5sZW5ndGg7Yz5kO2QrKylpZihiLmNhbGwoYVtkXSxkLGFbZF0pPT09ITEpYnJlYWt9ZWxzZSBmb3IoZCBpbiBhKWlmKGIuY2FsbChhW2RdLGQsYVtkXSk9PT0hMSlicmVhaztyZXR1cm4gYX0sdHJpbTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8iIjooYSsiIikucmVwbGFjZShvLCIiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8W107cmV0dXJuIG51bGwhPWEmJihzKE9iamVjdChhKSk/bi5tZXJnZShjLCJzdHJpbmciPT10eXBlb2YgYT9bYV06YSk6Zy5jYWxsKGMsYSkpLGN9LGluQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKGIpe2lmKGgpcmV0dXJuIGguY2FsbChiLGEsYyk7Zm9yKGQ9Yi5sZW5ndGgsYz1jPzA+Yz9NYXRoLm1heCgwLGQrYyk6YzowO2Q+YztjKyspaWYoYyBpbiBiJiZiW2NdPT09YSlyZXR1cm4gY31yZXR1cm4tMX0sbWVyZ2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz0rYi5sZW5ndGgsZD0wLGU9YS5sZW5ndGg7d2hpbGUoYz5kKWFbZSsrXT1iW2QrK107aWYoYyE9PWMpd2hpbGUodm9pZCAwIT09YltkXSlhW2UrK109YltkKytdO3JldHVybiBhLmxlbmd0aD1lLGF9LGdyZXA6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZCxlPVtdLGY9MCxnPWEubGVuZ3RoLGg9IWM7Zz5mO2YrKylkPSFiKGFbZl0sZiksZCE9PWgmJmUucHVzaChhW2ZdKTtyZXR1cm4gZX0sbWFwOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGc9MCxoPVtdO2lmKHMoYSkpZm9yKGQ9YS5sZW5ndGg7ZD5nO2crKyllPWIoYVtnXSxnLGMpLG51bGwhPWUmJmgucHVzaChlKTtlbHNlIGZvcihnIGluIGEpZT1iKGFbZ10sZyxjKSxudWxsIT1lJiZoLnB1c2goZSk7cmV0dXJuIGYuYXBwbHkoW10saCl9LGd1aWQ6MSxwcm94eTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZjtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGImJihmPWFbYl0sYj1hLGE9Ziksbi5pc0Z1bmN0aW9uKGEpPyhjPWUuY2FsbChhcmd1bWVudHMsMiksZD1mdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGJ8fHRoaXMsYy5jb25jYXQoZS5jYWxsKGFyZ3VtZW50cykpKX0sZC5ndWlkPWEuZ3VpZD1hLmd1aWR8fG4uZ3VpZCsrLGQpOnZvaWQgMH0sbm93OmZ1bmN0aW9uKCl7cmV0dXJuK25ldyBEYXRlfSxzdXBwb3J0Omx9KSwiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYobi5mbltTeW1ib2wuaXRlcmF0b3JdPWNbU3ltYm9sLml0ZXJhdG9yXSksbi5lYWNoKCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbCIuc3BsaXQoIiAiKSxmdW5jdGlvbihhLGIpe2lbIltvYmplY3QgIitiKyJdIl09Yi50b0xvd2VyQ2FzZSgpfSk7ZnVuY3Rpb24gcyhhKXt2YXIgYj0hIWEmJiJsZW5ndGgiaW4gYSYmYS5sZW5ndGgsYz1uLnR5cGUoYSk7cmV0dXJuImZ1bmN0aW9uIj09PWN8fG4uaXNXaW5kb3coYSk/ITE6ImFycmF5Ij09PWN8fDA9PT1ifHwibnVtYmVyIj09dHlwZW9mIGImJmI+MCYmYi0xIGluIGF9dmFyIHQ9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaSxqLGssbCxtLG4sbyxwLHEscixzLHQsdT0ic2l6emxlIisxKm5ldyBEYXRlLHY9YS5kb2N1bWVudCx3PTAseD0wLHk9Z2EoKSx6PWdhKCksQT1nYSgpLEI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWImJihsPSEwKSwwfSxDPTE8PDMxLEQ9e30uaGFzT3duUHJvcGVydHksRT1bXSxGPUUucG9wLEc9RS5wdXNoLEg9RS5wdXNoLEk9RS5zbGljZSxKPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtkPmM7YysrKWlmKGFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSxLPSJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZCIsTD0iW1xceDIwXFx0XFxyXFxuXFxmXSIsTT0iKD86XFxcXC58W1xcdy1dfFteXFx4MDAtXFx4YTBdKSsiLE49IlxcWyIrTCsiKigiK00rIikoPzoiK0wrIiooWypeJHwhfl0/PSkiK0wrIiooPzonKCg/OlxcXFwufFteXFxcXCddKSopJ3xcIigoPzpcXFxcLnxbXlxcXFxcIl0pKilcInwoIitNKyIpKXwpIitMKyIqXFxdIixPPSI6KCIrTSsiKSg/OlxcKCgoJygoPzpcXFxcLnxbXlxcXFwnXSkqKSd8XCIoKD86XFxcXC58W15cXFxcXCJdKSopXCIpfCgoPzpcXFxcLnxbXlxcXFwoKVtcXF1dfCIrTisiKSopfC4qKVxcKXwpIixQPW5ldyBSZWdFeHAoTCsiKyIsImciKSxRPW5ldyBSZWdFeHAoIl4iK0wrIit8KCg/Ol58W15cXFxcXSkoPzpcXFxcLikqKSIrTCsiKyQiLCJnIiksUj1uZXcgUmVnRXhwKCJeIitMKyIqLCIrTCsiKiIpLFM9bmV3IFJlZ0V4cCgiXiIrTCsiKihbPit+XXwiK0wrIikiK0wrIioiKSxUPW5ldyBSZWdFeHAoIj0iK0wrIiooW15cXF0nXCJdKj8pIitMKyIqXFxdIiwiZyIpLFU9bmV3IFJlZ0V4cChPKSxWPW5ldyBSZWdFeHAoIl4iK00rIiQiKSxXPXtJRDpuZXcgUmVnRXhwKCJeIygiK00rIikiKSxDTEFTUzpuZXcgUmVnRXhwKCJeXFwuKCIrTSsiKSIpLFRBRzpuZXcgUmVnRXhwKCJeKCIrTSsifFsqXSkiKSxBVFRSOm5ldyBSZWdFeHAoIl4iK04pLFBTRVVETzpuZXcgUmVnRXhwKCJeIitPKSxDSElMRDpuZXcgUmVnRXhwKCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXCgiK0wrIiooZXZlbnxvZGR8KChbKy1dfCkoXFxkKilufCkiK0wrIiooPzooWystXXwpIitMKyIqKFxcZCspfCkpIitMKyIqXFwpfCkiLCJpIiksYm9vbDpuZXcgUmVnRXhwKCJeKD86IitLKyIpJCIsImkiKSxuZWVkc0NvbnRleHQ6bmV3IFJlZ0V4cCgiXiIrTCsiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFwoIitMKyIqKCg/Oi1cXGQpP1xcZCopIitMKyIqXFwpfCkoPz1bXi1dfCQpIiwiaSIpfSxYPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksWT0vXmhcZCQvaSxaPS9eW157XStce1xzKlxbbmF0aXZlIFx3LywkPS9eKD86IyhbXHctXSspfChcdyspfFwuKFtcdy1dKykpJC8sXz0vWyt+XS8sYWE9Lyd8XFwvZyxiYT1uZXcgUmVnRXhwKCJcXFxcKFtcXGRhLWZdezEsNn0iK0wrIj98KCIrTCsiKXwuKSIsImlnIiksY2E9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPSIweCIrYi02NTUzNjtyZXR1cm4gZCE9PWR8fGM/YjowPmQ/U3RyaW5nLmZyb21DaGFyQ29kZShkKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGQ+PjEwfDU1Mjk2LDEwMjMmZHw1NjMyMCl9LGRhPWZ1bmN0aW9uKCl7bSgpfTt0cnl7SC5hcHBseShFPUkuY2FsbCh2LmNoaWxkTm9kZXMpLHYuY2hpbGROb2RlcyksRVt2LmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChlYSl7SD17YXBwbHk6RS5sZW5ndGg/ZnVuY3Rpb24oYSxiKXtHLmFwcGx5KGEsSS5jYWxsKGIpKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aCxkPTA7d2hpbGUoYVtjKytdPWJbZCsrXSk7YS5sZW5ndGg9Yy0xfX19ZnVuY3Rpb24gZmEoYSxiLGQsZSl7dmFyIGYsaCxqLGssbCxvLHIscyx3PWImJmIub3duZXJEb2N1bWVudCx4PWI/Yi5ub2RlVHlwZTo5O2lmKGQ9ZHx8W10sInN0cmluZyIhPXR5cGVvZiBhfHwhYXx8MSE9PXgmJjkhPT14JiYxMSE9PXgpcmV0dXJuIGQ7aWYoIWUmJigoYj9iLm93bmVyRG9jdW1lbnR8fGI6dikhPT1uJiZtKGIpLGI9Ynx8bixwKSl7aWYoMTEhPT14JiYobz0kLmV4ZWMoYSkpKWlmKGY9b1sxXSl7aWYoOT09PXgpe2lmKCEoaj1iLmdldEVsZW1lbnRCeUlkKGYpKSlyZXR1cm4gZDtpZihqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZSBpZih3JiYoaj13LmdldEVsZW1lbnRCeUlkKGYpKSYmdChiLGopJiZqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZXtpZihvWzJdKXJldHVybiBILmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKSksZDtpZigoZj1vWzNdKSYmYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEguYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZikpLGR9aWYoYy5xc2EmJiFBW2ErIiAiXSYmKCFxfHwhcS50ZXN0KGEpKSl7aWYoMSE9PXgpdz1iLHM9YTtlbHNlIGlmKCJvYmplY3QiIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXsoaz1iLmdldEF0dHJpYnV0ZSgiaWQiKSk/az1rLnJlcGxhY2UoYWEsIlxcJCYiKTpiLnNldEF0dHJpYnV0ZSgiaWQiLGs9dSkscj1nKGEpLGg9ci5sZW5ndGgsbD1WLnRlc3Qoayk/IiMiK2s6IltpZD0nIitrKyInXSI7d2hpbGUoaC0tKXJbaF09bCsiICIrcWEocltoXSk7cz1yLmpvaW4oIiwiKSx3PV8udGVzdChhKSYmb2EoYi5wYXJlbnROb2RlKXx8Yn1pZihzKXRyeXtyZXR1cm4gSC5hcHBseShkLHcucXVlcnlTZWxlY3RvckFsbChzKSksZH1jYXRjaCh5KXt9ZmluYWxseXtrPT09dSYmYi5yZW1vdmVBdHRyaWJ1dGUoImlkIil9fX1yZXR1cm4gaShhLnJlcGxhY2UoUSwiJDEiKSxiLGQsZSl9ZnVuY3Rpb24gZ2EoKXt2YXIgYT1bXTtmdW5jdGlvbiBiKGMsZSl7cmV0dXJuIGEucHVzaChjKyIgIik+ZC5jYWNoZUxlbmd0aCYmZGVsZXRlIGJbYS5zaGlmdCgpXSxiW2MrIiAiXT1lfXJldHVybiBifWZ1bmN0aW9uIGhhKGEpe3JldHVybiBhW3VdPSEwLGF9ZnVuY3Rpb24gaWEoYSl7dmFyIGI9bi5jcmVhdGVFbGVtZW50KCJkaXYiKTt0cnl7cmV0dXJuISFhKGIpfWNhdGNoKGMpe3JldHVybiExfWZpbmFsbHl7Yi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYiksYj1udWxsfX1mdW5jdGlvbiBqYShhLGIpe3ZhciBjPWEuc3BsaXQoInwiKSxlPWMubGVuZ3RoO3doaWxlKGUtLSlkLmF0dHJIYW5kbGVbY1tlXV09Yn1mdW5jdGlvbiBrYShhLGIpe3ZhciBjPWImJmEsZD1jJiYxPT09YS5ub2RlVHlwZSYmMT09PWIubm9kZVR5cGUmJih+Yi5zb3VyY2VJbmRleHx8QyktKH5hLnNvdXJjZUluZGV4fHxDKTtpZihkKXJldHVybiBkO2lmKGMpd2hpbGUoYz1jLm5leHRTaWJsaW5nKWlmKGM9PT1iKXJldHVybi0xO3JldHVybiBhPzE6LTF9ZnVuY3Rpb24gbGEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4iaW5wdXQiPT09YyYmYi50eXBlPT09YX19ZnVuY3Rpb24gbWEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oImlucHV0Ij09PWN8fCJidXR0b24iPT09YykmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG5hKGEpe3JldHVybiBoYShmdW5jdGlvbihiKXtyZXR1cm4gYj0rYixoYShmdW5jdGlvbihjLGQpe3ZhciBlLGY9YShbXSxjLmxlbmd0aCxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSljW2U9ZltnXV0mJihjW2VdPSEoZFtlXT1jW2VdKSl9KX0pfWZ1bmN0aW9uIG9hKGEpe3JldHVybiBhJiYidW5kZWZpbmVkIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmF9Yz1mYS5zdXBwb3J0PXt9LGY9ZmEuaXNYTUw9ZnVuY3Rpb24oYSl7dmFyIGI9YSYmKGEub3duZXJEb2N1bWVudHx8YSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiBiPyJIVE1MIiE9PWIubm9kZU5hbWU6ITF9LG09ZmEuc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZSxnPWE/YS5vd25lckRvY3VtZW50fHxhOnY7cmV0dXJuIGchPT1uJiY5PT09Zy5ub2RlVHlwZSYmZy5kb2N1bWVudEVsZW1lbnQ/KG49ZyxvPW4uZG9jdW1lbnRFbGVtZW50LHA9IWYobiksKGU9bi5kZWZhdWx0VmlldykmJmUudG9wIT09ZSYmKGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoInVubG9hZCIsZGEsITEpOmUuYXR0YWNoRXZlbnQmJmUuYXR0YWNoRXZlbnQoIm9udW5sb2FkIixkYSkpLGMuYXR0cmlidXRlcz1pYShmdW5jdGlvbihhKXtyZXR1cm4gYS5jbGFzc05hbWU9ImkiLCFhLmdldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIil9KSxjLmdldEVsZW1lbnRzQnlUYWdOYW1lPWlhKGZ1bmN0aW9uKGEpe3JldHVybiBhLmFwcGVuZENoaWxkKG4uY3JlYXRlQ29tbWVudCgiIikpLCFhLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPVoudGVzdChuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGMuZ2V0QnlJZD1pYShmdW5jdGlvbihhKXtyZXR1cm4gby5hcHBlbmRDaGlsZChhKS5pZD11LCFuLmdldEVsZW1lbnRzQnlOYW1lfHwhbi5nZXRFbGVtZW50c0J5TmFtZSh1KS5sZW5ndGh9KSxjLmdldEJ5SWQ/KGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgYi5nZXRFbGVtZW50QnlJZCYmcCl7dmFyIGM9Yi5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz9bY106W119fSxkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoYmEsY2EpO3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoImlkIik9PT1ifX0pOihkZWxldGUgZC5maW5kLklELGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShiYSxjYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPSJ1bmRlZmluZWQiIT10eXBlb2YgYS5nZXRBdHRyaWJ1dGVOb2RlJiZhLmdldEF0dHJpYnV0ZU5vZGUoImlkIik7cmV0dXJuIGMmJmMudmFsdWU9PT1ifX0pLGQuZmluZC5UQUc9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZT9mdW5jdGlvbihhLGIpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZT9iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpOmMucXNhP2IucXVlcnlTZWxlY3RvckFsbChhKTp2b2lkIDB9OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPTAsZj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO2lmKCIqIj09PWEpe3doaWxlKGM9ZltlKytdKTE9PT1jLm5vZGVUeXBlJiZkLnB1c2goYyk7cmV0dXJuIGR9cmV0dXJuIGZ9LGQuZmluZC5DTEFTUz1jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGEsYil7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJnA/Yi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpOnZvaWQgMH0scj1bXSxxPVtdLChjLnFzYT1aLnRlc3Qobi5xdWVyeVNlbGVjdG9yQWxsKSkmJihpYShmdW5jdGlvbihhKXtvLmFwcGVuZENoaWxkKGEpLmlubmVySFRNTD0iPGEgaWQ9JyIrdSsiJz48L2E+PHNlbGVjdCBpZD0nIit1KyItXHJcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD4iLGEucXVlcnlTZWxlY3RvckFsbCgiW21zYWxsb3djYXB0dXJlXj0nJ10iKS5sZW5ndGgmJnEucHVzaCgiWypeJF09IitMKyIqKD86Jyd8XCJcIikiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoIltzZWxlY3RlZF0iKS5sZW5ndGh8fHEucHVzaCgiXFxbIitMKyIqKD86dmFsdWV8IitLKyIpIiksYS5xdWVyeVNlbGVjdG9yQWxsKCJbaWR+PSIrdSsiLV0iKS5sZW5ndGh8fHEucHVzaCgifj0iKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoIjpjaGVja2VkIikubGVuZ3RofHxxLnB1c2goIjpjaGVja2VkIiksYS5xdWVyeVNlbGVjdG9yQWxsKCJhIyIrdSsiKyoiKS5sZW5ndGh8fHEucHVzaCgiLiMuK1srfl0iKX0pLGlhKGZ1bmN0aW9uKGEpe3ZhciBiPW4uY3JlYXRlRWxlbWVudCgiaW5wdXQiKTtiLnNldEF0dHJpYnV0ZSgidHlwZSIsImhpZGRlbiIpLGEuYXBwZW5kQ2hpbGQoYikuc2V0QXR0cmlidXRlKCJuYW1lIiwiRCIpLGEucXVlcnlTZWxlY3RvckFsbCgiW25hbWU9ZF0iKS5sZW5ndGgmJnEucHVzaCgibmFtZSIrTCsiKlsqXiR8IX5dPz0iKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RofHxxLnB1c2goIjplbmFibGVkIiwiOmRpc2FibGVkIiksYS5xdWVyeVNlbGVjdG9yQWxsKCIqLDp4IikscS5wdXNoKCIsLio6Iil9KSksKGMubWF0Y2hlc1NlbGVjdG9yPVoudGVzdChzPW8ubWF0Y2hlc3x8by53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fG8ubW96TWF0Y2hlc1NlbGVjdG9yfHxvLm9NYXRjaGVzU2VsZWN0b3J8fG8ubXNNYXRjaGVzU2VsZWN0b3IpKSYmaWEoZnVuY3Rpb24oYSl7Yy5kaXNjb25uZWN0ZWRNYXRjaD1zLmNhbGwoYSwiZGl2Iikscy5jYWxsKGEsIltzIT0nJ106eCIpLHIucHVzaCgiIT0iLE8pfSkscT1xLmxlbmd0aCYmbmV3IFJlZ0V4cChxLmpvaW4oInwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oInwiKSksYj1aLnRlc3Qoby5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiksdD1ifHxaLnRlc3Qoby5jb250YWlucyk/ZnVuY3Rpb24oYSxiKXt2YXIgYz05PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLGQ9YiYmYi5wYXJlbnROb2RlO3JldHVybiBhPT09ZHx8ISghZHx8MSE9PWQubm9kZVR5cGV8fCEoYy5jb250YWlucz9jLmNvbnRhaW5zKGQpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZCkpKX06ZnVuY3Rpb24oYSxiKXtpZihiKXdoaWxlKGI9Yi5wYXJlbnROb2RlKWlmKGI9PT1hKXJldHVybiEwO3JldHVybiExfSxCPWI/ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBkPSFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uLSFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiBkP2Q6KGQ9KGEub3duZXJEb2N1bWVudHx8YSk9PT0oYi5vd25lckRvY3VtZW50fHxiKT9hLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpOjEsMSZkfHwhYy5zb3J0RGV0YWNoZWQmJmIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSk9PT1kP2E9PT1ufHxhLm93bmVyRG9jdW1lbnQ9PT12JiZ0KHYsYSk/LTE6Yj09PW58fGIub3duZXJEb2N1bWVudD09PXYmJnQodixiKT8xOms/SihrLGEpLUooayxiKTowOjQmZD8tMToxKX06ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBjLGQ9MCxlPWEucGFyZW50Tm9kZSxmPWIucGFyZW50Tm9kZSxnPVthXSxoPVtiXTtpZighZXx8IWYpcmV0dXJuIGE9PT1uPy0xOmI9PT1uPzE6ZT8tMTpmPzE6az9KKGssYSktSihrLGIpOjA7aWYoZT09PWYpcmV0dXJuIGthKGEsYik7Yz1hO3doaWxlKGM9Yy5wYXJlbnROb2RlKWcudW5zaGlmdChjKTtjPWI7d2hpbGUoYz1jLnBhcmVudE5vZGUpaC51bnNoaWZ0KGMpO3doaWxlKGdbZF09PT1oW2RdKWQrKztyZXR1cm4gZD9rYShnW2RdLGhbZF0pOmdbZF09PT12Py0xOmhbZF09PT12PzE6MH0sbik6bn0sZmEubWF0Y2hlcz1mdW5jdGlvbihhLGIpe3JldHVybiBmYShhLG51bGwsbnVsbCxiKX0sZmEubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGEsYil7aWYoKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLGI9Yi5yZXBsYWNlKFQsIj0nJDEnXSIpLGMubWF0Y2hlc1NlbGVjdG9yJiZwJiYhQVtiKyIgIl0mJighcnx8IXIudGVzdChiKSkmJighcXx8IXEudGVzdChiKSkpdHJ5e3ZhciBkPXMuY2FsbChhLGIpO2lmKGR8fGMuZGlzY29ubmVjdGVkTWF0Y2h8fGEuZG9jdW1lbnQmJjExIT09YS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gZH1jYXRjaChlKXt9cmV0dXJuIGZhKGIsbixudWxsLFthXSkubGVuZ3RoPjB9LGZhLmNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLHQoYSxiKX0sZmEuYXR0cj1mdW5jdGlvbihhLGIpeyhhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKTt2YXIgZT1kLmF0dHJIYW5kbGVbYi50b0xvd2VyQ2FzZSgpXSxmPWUmJkQuY2FsbChkLmF0dHJIYW5kbGUsYi50b0xvd2VyQ2FzZSgpKT9lKGEsYiwhcCk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1mP2Y6Yy5hdHRyaWJ1dGVzfHwhcD9hLmdldEF0dHJpYnV0ZShiKTooZj1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZmLnNwZWNpZmllZD9mLnZhbHVlOm51bGx9LGZhLmVycm9yPWZ1bmN0aW9uKGEpe3Rocm93IG5ldyBFcnJvcigiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIithKX0sZmEudW5pcXVlU29ydD1mdW5jdGlvbihhKXt2YXIgYixkPVtdLGU9MCxmPTA7aWYobD0hYy5kZXRlY3REdXBsaWNhdGVzLGs9IWMuc29ydFN0YWJsZSYmYS5zbGljZSgwKSxhLnNvcnQoQiksbCl7d2hpbGUoYj1hW2YrK10pYj09PWFbZl0mJihlPWQucHVzaChmKSk7d2hpbGUoZS0tKWEuc3BsaWNlKGRbZV0sMSl9cmV0dXJuIGs9bnVsbCxhfSxlPWZhLmdldFRleHQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz0iIixkPTAsZj1hLm5vZGVUeXBlO2lmKGYpe2lmKDE9PT1mfHw5PT09Znx8MTE9PT1mKXtpZigic3RyaW5nIj09dHlwZW9mIGEudGV4dENvbnRlbnQpcmV0dXJuIGEudGV4dENvbnRlbnQ7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWMrPWUoYSl9ZWxzZSBpZigzPT09Znx8ND09PWYpcmV0dXJuIGEubm9kZVZhbHVlfWVsc2Ugd2hpbGUoYj1hW2QrK10pYys9ZShiKTtyZXR1cm4gY30sZD1mYS5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzpoYSxtYXRjaDpXLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7Ij4iOntkaXI6InBhcmVudE5vZGUiLGZpcnN0OiEwfSwiICI6e2RpcjoicGFyZW50Tm9kZSJ9LCIrIjp7ZGlyOiJwcmV2aW91c1NpYmxpbmciLGZpcnN0OiEwfSwifiI6e2RpcjoicHJldmlvdXNTaWJsaW5nIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnJlcGxhY2UoYmEsY2EpLGFbM109KGFbM118fGFbNF18fGFbNV18fCIiKS5yZXBsYWNlKGJhLGNhKSwifj0iPT09YVsyXSYmKGFbM109IiAiK2FbM10rIiAiKSxhLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0udG9Mb3dlckNhc2UoKSwibnRoIj09PWFbMV0uc2xpY2UoMCwzKT8oYVszXXx8ZmEuZXJyb3IoYVswXSksYVs0XT0rKGFbNF0/YVs1XSsoYVs2XXx8MSk6MiooImV2ZW4iPT09YVszXXx8Im9kZCI9PT1hWzNdKSksYVs1XT0rKGFbN10rYVs4XXx8Im9kZCI9PT1hWzNdKSk6YVszXSYmZmEuZXJyb3IoYVswXSksYX0sUFNFVURPOmZ1bmN0aW9uKGEpe3ZhciBiLGM9IWFbNl0mJmFbMl07cmV0dXJuIFcuQ0hJTEQudGVzdChhWzBdKT9udWxsOihhWzNdP2FbMl09YVs0XXx8YVs1XXx8IiI6YyYmVS50ZXN0KGMpJiYoYj1nKGMsITApKSYmKGI9Yy5pbmRleE9mKCIpIixjLmxlbmd0aC1iKS1jLmxlbmd0aCkmJihhWzBdPWFbMF0uc2xpY2UoMCxiKSxhWzJdPWMuc2xpY2UoMCxiKSksYS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShiYSxjYSkudG9Mb3dlckNhc2UoKTtyZXR1cm4iKiI9PT1hP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1ifX0sQ0xBU1M6ZnVuY3Rpb24oYSl7dmFyIGI9eVthKyIgIl07cmV0dXJuIGJ8fChiPW5ldyBSZWdFeHAoIihefCIrTCsiKSIrYSsiKCIrTCsifCQpIikpJiZ5KGEsZnVuY3Rpb24oYSl7cmV0dXJuIGIudGVzdCgic3RyaW5nIj09dHlwZW9mIGEuY2xhc3NOYW1lJiZhLmNsYXNzTmFtZXx8InVuZGVmaW5lZCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoImNsYXNzIil8fCIiKX0pfSxBVFRSOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU9ZmEuYXR0cihkLGEpO3JldHVybiBudWxsPT1lPyIhPSI9PT1iOmI/KGUrPSIiLCI9Ij09PWI/ZT09PWM6IiE9Ij09PWI/ZSE9PWM6Il49Ij09PWI/YyYmMD09PWUuaW5kZXhPZihjKToiKj0iPT09Yj9jJiZlLmluZGV4T2YoYyk+LTE6IiQ9Ij09PWI/YyYmZS5zbGljZSgtYy5sZW5ndGgpPT09Yzoifj0iPT09Yj8oIiAiK2UucmVwbGFjZShQLCIgIikrIiAiKS5pbmRleE9mKGMpPi0xOiJ8PSI9PT1iP2U9PT1jfHxlLnNsaWNlKDAsYy5sZW5ndGgrMSk9PT1jKyItIjohMSk6ITB9fSxDSElMRDpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPSJudGgiIT09YS5zbGljZSgwLDMpLGc9Imxhc3QiIT09YS5zbGljZSgtNCksaD0ib2YtdHlwZSI9PT1iO3JldHVybiAxPT09ZCYmMD09PWU/ZnVuY3Rpb24oYSl7cmV0dXJuISFhLnBhcmVudE5vZGV9OmZ1bmN0aW9uKGIsYyxpKXt2YXIgaixrLGwsbSxuLG8scD1mIT09Zz8ibmV4dFNpYmxpbmciOiJwcmV2aW91c1NpYmxpbmciLHE9Yi5wYXJlbnROb2RlLHI9aCYmYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHM9IWkmJiFoLHQ9ITE7aWYocSl7aWYoZil7d2hpbGUocCl7bT1iO3doaWxlKG09bVtwXSlpZihoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpcmV0dXJuITE7bz1wPSJvbmx5Ij09PWEmJiFvJiYibmV4dFNpYmxpbmcifXJldHVybiEwfWlmKG89W2c/cS5maXJzdENoaWxkOnEubGFzdENoaWxkXSxnJiZzKXttPXEsbD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLHQ9biYmalsyXSxtPW4mJnEuY2hpbGROb2Rlc1tuXTt3aGlsZShtPSsrbiYmbSYmbVtwXXx8KHQ9bj0wKXx8by5wb3AoKSlpZigxPT09bS5ub2RlVHlwZSYmKyt0JiZtPT09Yil7a1thXT1bdyxuLHRdO2JyZWFrfX1lbHNlIGlmKHMmJihtPWIsbD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLHQ9biksdD09PSExKXdoaWxlKG09KytuJiZtJiZtW3BdfHwodD1uPTApfHxvLnBvcCgpKWlmKChoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpJiYrK3QmJihzJiYobD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksa1thXT1bdyx0XSksbT09PWIpKWJyZWFrO3JldHVybiB0LT1lLHQ9PT1kfHx0JWQ9PT0wJiZ0L2Q+PTB9fX0sUFNFVURPOmZ1bmN0aW9uKGEsYil7dmFyIGMsZT1kLnBzZXVkb3NbYV18fGQuc2V0RmlsdGVyc1thLnRvTG93ZXJDYXNlKCldfHxmYS5lcnJvcigidW5zdXBwb3J0ZWQgcHNldWRvOiAiK2EpO3JldHVybiBlW3VdP2UoYik6ZS5sZW5ndGg+MT8oYz1bYSxhLCIiLGJdLGQuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShhLnRvTG93ZXJDYXNlKCkpP2hhKGZ1bmN0aW9uKGEsYyl7dmFyIGQsZj1lKGEsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pZD1KKGEsZltnXSksYVtkXT0hKGNbZF09ZltnXSl9KTpmdW5jdGlvbihhKXtyZXR1cm4gZShhLDAsYyl9KTplfX0scHNldWRvczp7bm90OmhhKGZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9W10sZD1oKGEucmVwbGFjZShRLCIkMSIpKTtyZXR1cm4gZFt1XT9oYShmdW5jdGlvbihhLGIsYyxlKXt2YXIgZixnPWQoYSxudWxsLGUsW10pLGg9YS5sZW5ndGg7d2hpbGUoaC0tKShmPWdbaF0pJiYoYVtoXT0hKGJbaF09ZikpfSk6ZnVuY3Rpb24oYSxlLGYpe3JldHVybiBiWzBdPWEsZChiLG51bGwsZixjKSxiWzBdPW51bGwsIWMucG9wKCl9fSksaGFzOmhhKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gZmEoYSxiKS5sZW5ndGg+MH19KSxjb250YWluczpoYShmdW5jdGlvbihhKXtyZXR1cm4gYT1hLnJlcGxhY2UoYmEsY2EpLGZ1bmN0aW9uKGIpe3JldHVybihiLnRleHRDb250ZW50fHxiLmlubmVyVGV4dHx8ZShiKSkuaW5kZXhPZihhKT4tMX19KSxsYW5nOmhhKGZ1bmN0aW9uKGEpe3JldHVybiBWLnRlc3QoYXx8IiIpfHxmYS5lcnJvcigidW5zdXBwb3J0ZWQgbGFuZzogIithKSxhPWEucmVwbGFjZShiYSxjYSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihiKXt2YXIgYztkbyBpZihjPXA/Yi5sYW5nOmIuZ2V0QXR0cmlidXRlKCJ4bWw6bGFuZyIpfHxiLmdldEF0dHJpYnV0ZSgibGFuZyIpKXJldHVybiBjPWMudG9Mb3dlckNhc2UoKSxjPT09YXx8MD09PWMuaW5kZXhPZihhKyItIik7d2hpbGUoKGI9Yi5wYXJlbnROb2RlKSYmMT09PWIubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihiKXt2YXIgYz1hLmxvY2F0aW9uJiZhLmxvY2F0aW9uLmhhc2g7cmV0dXJuIGMmJmMuc2xpY2UoMSk9PT1iLmlkfSxyb290OmZ1bmN0aW9uKGEpe3JldHVybiBhPT09b30sZm9jdXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1uLmFjdGl2ZUVsZW1lbnQmJighbi5oYXNGb2N1c3x8bi5oYXNGb2N1cygpKSYmISEoYS50eXBlfHxhLmhyZWZ8fH5hLnRhYkluZGV4KX0sZW5hYmxlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSExfSxkaXNhYmxlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSEwfSxjaGVja2VkOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4iaW5wdXQiPT09YiYmISFhLmNoZWNrZWR8fCJvcHRpb24iPT09YiYmISFhLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxhLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZylpZihhLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4hZC5wc2V1ZG9zLmVtcHR5KGEpfSxoZWFkZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIFkudGVzdChhLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFgudGVzdChhLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4iaW5wdXQiPT09YiYmImJ1dHRvbiI9PT1hLnR5cGV8fCJidXR0b24iPT09Yn0sdGV4dDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4iaW5wdXQiPT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYidGV4dCI9PT1hLnR5cGUmJihudWxsPT0oYj1hLmdldEF0dHJpYnV0ZSgidHlwZSIpKXx8InRleHQiPT09Yi50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6bmEoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0Om5hKGZ1bmN0aW9uKGEsYil7cmV0dXJuW2ItMV19KSxlcTpuYShmdW5jdGlvbihhLGIsYyl7cmV0dXJuWzA+Yz9jK2I6Y119KSxldmVuOm5hKGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7Yj5jO2MrPTIpYS5wdXNoKGMpO3JldHVybiBhfSksb2RkOm5hKGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTE7Yj5jO2MrPTIpYS5wdXNoKGMpO3JldHVybiBhfSksbHQ6bmEoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wPmM/YytiOmM7LS1kPj0wOylhLnB1c2goZCk7cmV0dXJuIGF9KSxndDpuYShmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA+Yz9jK2I6YzsrK2Q8YjspYS5wdXNoKGQpO3JldHVybiBhfSl9fSxkLnBzZXVkb3MubnRoPWQucHNldWRvcy5lcTtmb3IoYiBpbntyYWRpbzohMCxjaGVja2JveDohMCxmaWxlOiEwLHBhc3N3b3JkOiEwLGltYWdlOiEwfSlkLnBzZXVkb3NbYl09bGEoYik7Zm9yKGIgaW57c3VibWl0OiEwLHJlc2V0OiEwfSlkLnBzZXVkb3NbYl09bWEoYik7ZnVuY3Rpb24gcGEoKXt9cGEucHJvdG90eXBlPWQuZmlsdGVycz1kLnBzZXVkb3MsZC5zZXRGaWx0ZXJzPW5ldyBwYSxnPWZhLnRva2VuaXplPWZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmLGcsaCxpLGosaz16W2ErIiAiXTtpZihrKXJldHVybiBiPzA6ay5zbGljZSgwKTtoPWEsaT1bXSxqPWQucHJlRmlsdGVyO3doaWxlKGgpe2MmJiEoZT1SLmV4ZWMoaCkpfHwoZSYmKGg9aC5zbGljZShlWzBdLmxlbmd0aCl8fGgpLGkucHVzaChmPVtdKSksYz0hMSwoZT1TLmV4ZWMoaCkpJiYoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZVswXS5yZXBsYWNlKFEsIiAiKX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2ZvcihnIGluIGQuZmlsdGVyKSEoZT1XW2ddLmV4ZWMoaCkpfHxqW2ddJiYhKGU9altnXShlKSl8fChjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTpnLG1hdGNoZXM6ZX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2lmKCFjKWJyZWFrfXJldHVybiBiP2gubGVuZ3RoOmg/ZmEuZXJyb3IoYSk6eihhLGkpLnNsaWNlKDApfTtmdW5jdGlvbiBxYShhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoLGQ9IiI7Yz5iO2IrKylkKz1hW2JdLnZhbHVlO3JldHVybiBkfWZ1bmN0aW9uIHJhKGEsYixjKXt2YXIgZD1iLmRpcixlPWMmJiJwYXJlbnROb2RlIj09PWQsZj14Kys7cmV0dXJuIGIuZmlyc3Q/ZnVuY3Rpb24oYixjLGYpe3doaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZSlyZXR1cm4gYShiLGMsZil9OmZ1bmN0aW9uKGIsYyxnKXt2YXIgaCxpLGosaz1bdyxmXTtpZihnKXt3aGlsZShiPWJbZF0paWYoKDE9PT1iLm5vZGVUeXBlfHxlKSYmYShiLGMsZykpcmV0dXJuITB9ZWxzZSB3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGUpe2lmKGo9Ylt1XXx8KGJbdV09e30pLGk9altiLnVuaXF1ZUlEXXx8KGpbYi51bmlxdWVJRF09e30pLChoPWlbZF0pJiZoWzBdPT09dyYmaFsxXT09PWYpcmV0dXJuIGtbMl09aFsyXTtpZihpW2RdPWssa1syXT1hKGIsYyxnKSlyZXR1cm4hMH19fWZ1bmN0aW9uIHNhKGEpe3JldHVybiBhLmxlbmd0aD4xP2Z1bmN0aW9uKGIsYyxkKXt2YXIgZT1hLmxlbmd0aDt3aGlsZShlLS0paWYoIWFbZV0oYixjLGQpKXJldHVybiExO3JldHVybiEwfTphWzBdfWZ1bmN0aW9uIHRhKGEsYixjKXtmb3IodmFyIGQ9MCxlPWIubGVuZ3RoO2U+ZDtkKyspZmEoYSxiW2RdLGMpO3JldHVybiBjfWZ1bmN0aW9uIHVhKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9W10saD0wLGk9YS5sZW5ndGgsaj1udWxsIT1iO2k+aDtoKyspKGY9YVtoXSkmJihjJiYhYyhmLGQsZSl8fChnLnB1c2goZiksaiYmYi5wdXNoKGgpKSk7cmV0dXJuIGd9ZnVuY3Rpb24gdmEoYSxiLGMsZCxlLGYpe3JldHVybiBkJiYhZFt1XSYmKGQ9dmEoZCkpLGUmJiFlW3VdJiYoZT12YShlLGYpKSxoYShmdW5jdGlvbihmLGcsaCxpKXt2YXIgaixrLGwsbT1bXSxuPVtdLG89Zy5sZW5ndGgscD1mfHx0YShifHwiKiIsaC5ub2RlVHlwZT9baF06aCxbXSkscT0hYXx8IWYmJmI/cDp1YShwLG0sYSxoLGkpLHI9Yz9lfHwoZj9hOm98fGQpP1tdOmc6cTtpZihjJiZjKHEscixoLGkpLGQpe2o9dWEocixuKSxkKGosW10saCxpKSxrPWoubGVuZ3RoO3doaWxlKGstLSkobD1qW2tdKSYmKHJbbltrXV09IShxW25ba11dPWwpKX1pZihmKXtpZihlfHxhKXtpZihlKXtqPVtdLGs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiZqLnB1c2gocVtrXT1sKTtlKG51bGwscj1bXSxqLGkpfWs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiYoaj1lP0ooZixsKTptW2tdKT4tMSYmKGZbal09IShnW2pdPWwpKX19ZWxzZSByPXVhKHI9PT1nP3Iuc3BsaWNlKG8sci5sZW5ndGgpOnIpLGU/ZShudWxsLGcscixpKTpILmFwcGx5KGcscil9KX1mdW5jdGlvbiB3YShhKXtmb3IodmFyIGIsYyxlLGY9YS5sZW5ndGgsZz1kLnJlbGF0aXZlW2FbMF0udHlwZV0saD1nfHxkLnJlbGF0aXZlWyIgIl0saT1nPzE6MCxrPXJhKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0saCwhMCksbD1yYShmdW5jdGlvbihhKXtyZXR1cm4gSihiLGEpPi0xfSxoLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7dmFyIGU9IWcmJihkfHxjIT09ail8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSk7cmV0dXJuIGI9bnVsbCxlfV07Zj5pO2krKylpZihjPWQucmVsYXRpdmVbYVtpXS50eXBlXSltPVtyYShzYShtKSxjKV07ZWxzZXtpZihjPWQuZmlsdGVyW2FbaV0udHlwZV0uYXBwbHkobnVsbCxhW2ldLm1hdGNoZXMpLGNbdV0pe2ZvcihlPSsraTtmPmU7ZSsrKWlmKGQucmVsYXRpdmVbYVtlXS50eXBlXSlicmVhaztyZXR1cm4gdmEoaT4xJiZzYShtKSxpPjEmJnFhKGEuc2xpY2UoMCxpLTEpLmNvbmNhdCh7dmFsdWU6IiAiPT09YVtpLTJdLnR5cGU/IioiOiIifSkpLnJlcGxhY2UoUSwiJDEiKSxjLGU+aSYmd2EoYS5zbGljZShpLGUpKSxmPmUmJndhKGE9YS5zbGljZShlKSksZj5lJiZxYShhKSl9bS5wdXNoKGMpfXJldHVybiBzYShtKX1mdW5jdGlvbiB4YShhLGIpe3ZhciBjPWIubGVuZ3RoPjAsZT1hLmxlbmd0aD4wLGY9ZnVuY3Rpb24oZixnLGgsaSxrKXt2YXIgbCxvLHEscj0wLHM9IjAiLHQ9ZiYmW10sdT1bXSx2PWoseD1mfHxlJiZkLmZpbmQuVEFHKCIqIixrKSx5PXcrPW51bGw9PXY/MTpNYXRoLnJhbmRvbSgpfHwuMSx6PXgubGVuZ3RoO2ZvcihrJiYoaj1nPT09bnx8Z3x8ayk7cyE9PXomJm51bGwhPShsPXhbc10pO3MrKyl7aWYoZSYmbCl7bz0wLGd8fGwub3duZXJEb2N1bWVudD09PW58fChtKGwpLGg9IXApO3doaWxlKHE9YVtvKytdKWlmKHEobCxnfHxuLGgpKXtpLnB1c2gobCk7YnJlYWt9ayYmKHc9eSl9YyYmKChsPSFxJiZsKSYmci0tLGYmJnQucHVzaChsKSl9aWYocis9cyxjJiZzIT09cil7bz0wO3doaWxlKHE9YltvKytdKXEodCx1LGcsaCk7aWYoZil7aWYocj4wKXdoaWxlKHMtLSl0W3NdfHx1W3NdfHwodVtzXT1GLmNhbGwoaSkpO3U9dWEodSl9SC5hcHBseShpLHUpLGsmJiFmJiZ1Lmxlbmd0aD4wJiZyK2IubGVuZ3RoPjEmJmZhLnVuaXF1ZVNvcnQoaSl9cmV0dXJuIGsmJih3PXksaj12KSx0fTtyZXR1cm4gYz9oYShmKTpmfXJldHVybiBoPWZhLmNvbXBpbGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9W10sZj1BW2ErIiAiXTtpZighZil7Ynx8KGI9ZyhhKSksYz1iLmxlbmd0aDt3aGlsZShjLS0pZj13YShiW2NdKSxmW3VdP2QucHVzaChmKTplLnB1c2goZik7Zj1BKGEseGEoZSxkKSksZi5zZWxlY3Rvcj1hfXJldHVybiBmfSxpPWZhLnNlbGVjdD1mdW5jdGlvbihhLGIsZSxmKXt2YXIgaSxqLGssbCxtLG49ImZ1bmN0aW9uIj09dHlwZW9mIGEmJmEsbz0hZiYmZyhhPW4uc2VsZWN0b3J8fGEpO2lmKGU9ZXx8W10sMT09PW8ubGVuZ3RoKXtpZihqPW9bMF09b1swXS5zbGljZSgwKSxqLmxlbmd0aD4yJiYiSUQiPT09KGs9alswXSkudHlwZSYmYy5nZXRCeUlkJiY5PT09Yi5ub2RlVHlwZSYmcCYmZC5yZWxhdGl2ZVtqWzFdLnR5cGVdKXtpZihiPShkLmZpbmQuSUQoay5tYXRjaGVzWzBdLnJlcGxhY2UoYmEsY2EpLGIpfHxbXSlbMF0sIWIpcmV0dXJuIGU7biYmKGI9Yi5wYXJlbnROb2RlKSxhPWEuc2xpY2Uoai5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9aT1XLm5lZWRzQ29udGV4dC50ZXN0KGEpPzA6ai5sZW5ndGg7d2hpbGUoaS0tKXtpZihrPWpbaV0sZC5yZWxhdGl2ZVtsPWsudHlwZV0pYnJlYWs7aWYoKG09ZC5maW5kW2xdKSYmKGY9bShrLm1hdGNoZXNbMF0ucmVwbGFjZShiYSxjYSksXy50ZXN0KGpbMF0udHlwZSkmJm9hKGIucGFyZW50Tm9kZSl8fGIpKSl7aWYoai5zcGxpY2UoaSwxKSxhPWYubGVuZ3RoJiZxYShqKSwhYSlyZXR1cm4gSC5hcHBseShlLGYpLGU7YnJlYWt9fX1yZXR1cm4obnx8aChhLG8pKShmLGIsIXAsZSwhYnx8Xy50ZXN0KGEpJiZvYShiLnBhcmVudE5vZGUpfHxiKSxlfSxjLnNvcnRTdGFibGU9dS5zcGxpdCgiIikuc29ydChCKS5qb2luKCIiKT09PXUsYy5kZXRlY3REdXBsaWNhdGVzPSEhbCxtKCksYy5zb3J0RGV0YWNoZWQ9aWEoZnVuY3Rpb24oYSl7cmV0dXJuIDEmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuLmNyZWF0ZUVsZW1lbnQoImRpdiIpKX0pLGlhKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD0iPGEgaHJlZj0nIyc+PC9hPiIsIiMiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgiaHJlZiIpfSl8fGphKCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGM/dm9pZCAwOmEuZ2V0QXR0cmlidXRlKGIsInR5cGUiPT09Yi50b0xvd2VyQ2FzZSgpPzE6Mil9KSxjLmF0dHJpYnV0ZXMmJmlhKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD0iPGlucHV0Lz4iLGEuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoInZhbHVlIiwiIiksIiI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpfSl8fGphKCJ2YWx1ZSIsZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjfHwiaW5wdXQiIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP3ZvaWQgMDphLmRlZmF1bHRWYWx1ZX0pLGlhKGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hLmdldEF0dHJpYnV0ZSgiZGlzYWJsZWQiKX0pfHxqYShLLGZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYz92b2lkIDA6YVtiXT09PSEwP2IudG9Mb3dlckNhc2UoKTooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZkLnNwZWNpZmllZD9kLnZhbHVlOm51bGx9KSxmYX0oYSk7bi5maW5kPXQsbi5leHByPXQuc2VsZWN0b3JzLG4uZXhwclsiOiJdPW4uZXhwci5wc2V1ZG9zLG4udW5pcXVlU29ydD1uLnVuaXF1ZT10LnVuaXF1ZVNvcnQsbi50ZXh0PXQuZ2V0VGV4dCxuLmlzWE1MRG9jPXQuaXNYTUwsbi5jb250YWlucz10LmNvbnRhaW5zO3ZhciB1PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1bXSxlPXZvaWQgMCE9PWM7d2hpbGUoKGE9YVtiXSkmJjkhPT1hLm5vZGVUeXBlKWlmKDE9PT1hLm5vZGVUeXBlKXtpZihlJiZuKGEpLmlzKGMpKWJyZWFrO2QucHVzaChhKX1yZXR1cm4gZH0sdj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXTthO2E9YS5uZXh0U2libGluZykxPT09YS5ub2RlVHlwZSYmYSE9PWImJmMucHVzaChhKTtyZXR1cm4gY30sdz1uLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LHg9L148KFtcdy1dKylccypcLz8+KD86PFwvXDE+fCkkLyx5PS9eLlteOiNcW1wuLF0qJC87ZnVuY3Rpb24geihhLGIsYyl7aWYobi5pc0Z1bmN0aW9uKGIpKXJldHVybiBuLmdyZXAoYSxmdW5jdGlvbihhLGQpe3JldHVybiEhYi5jYWxsKGEsZCxhKSE9PWN9KTtpZihiLm5vZGVUeXBlKXJldHVybiBuLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYT09PWIhPT1jfSk7aWYoInN0cmluZyI9PXR5cGVvZiBiKXtpZih5LnRlc3QoYikpcmV0dXJuIG4uZmlsdGVyKGIsYSxjKTtiPW4uZmlsdGVyKGIsYSl9cmV0dXJuIG4uZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBuLmluQXJyYXkoYSxiKT4tMSE9PWN9KX1uLmZpbHRlcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YlswXTtyZXR1cm4gYyYmKGE9Ijpub3QoIithKyIpIiksMT09PWIubGVuZ3RoJiYxPT09ZC5ub2RlVHlwZT9uLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGQsYSk/W2RdOltdOm4uZmluZC5tYXRjaGVzKGEsbi5ncmVwKGIsZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfSkpfSxuLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihhKXt2YXIgYixjPVtdLGQ9dGhpcyxlPWQubGVuZ3RoO2lmKCJzdHJpbmciIT10eXBlb2YgYSlyZXR1cm4gdGhpcy5wdXNoU3RhY2sobihhKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IoYj0wO2U+YjtiKyspaWYobi5jb250YWlucyhkW2JdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihiPTA7ZT5iO2IrKyluLmZpbmQoYSxkW2JdLGMpO3JldHVybiBjPXRoaXMucHVzaFN0YWNrKGU+MT9uLnVuaXF1ZShjKTpjKSxjLnNlbGVjdG9yPXRoaXMuc2VsZWN0b3I/dGhpcy5zZWxlY3RvcisiICIrYTphLGN9LGZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soeih0aGlzLGF8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soeih0aGlzLGF8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGEpe3JldHVybiEheih0aGlzLCJzdHJpbmciPT10eXBlb2YgYSYmdy50ZXN0KGEpP24oYSk6YXx8W10sITEpLmxlbmd0aH19KTt2YXIgQSxCPS9eKD86XHMqKDxbXHdcV10rPilbXj5dKnwjKFtcdy1dKikpJC8sQz1uLmZuLmluaXQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlLGY7aWYoIWEpcmV0dXJuIHRoaXM7aWYoYz1jfHxBLCJzdHJpbmciPT10eXBlb2YgYSl7aWYoZT0iPCI9PT1hLmNoYXJBdCgwKSYmIj4iPT09YS5jaGFyQXQoYS5sZW5ndGgtMSkmJmEubGVuZ3RoPj0zP1tudWxsLGEsbnVsbF06Qi5leGVjKGEpLCFlfHwhZVsxXSYmYilyZXR1cm4hYnx8Yi5qcXVlcnk/KGJ8fGMpLmZpbmQoYSk6dGhpcy5jb25zdHJ1Y3RvcihiKS5maW5kKGEpO2lmKGVbMV0pe2lmKGI9YiBpbnN0YW5jZW9mIG4/YlswXTpiLG4ubWVyZ2UodGhpcyxuLnBhcnNlSFRNTChlWzFdLGImJmIubm9kZVR5cGU/Yi5vd25lckRvY3VtZW50fHxiOmQsITApKSx4LnRlc3QoZVsxXSkmJm4uaXNQbGFpbk9iamVjdChiKSlmb3IoZSBpbiBiKW4uaXNGdW5jdGlvbih0aGlzW2VdKT90aGlzW2VdKGJbZV0pOnRoaXMuYXR0cihlLGJbZV0pO3JldHVybiB0aGlzfWlmKGY9ZC5nZXRFbGVtZW50QnlJZChlWzJdKSxmJiZmLnBhcmVudE5vZGUpe2lmKGYuaWQhPT1lWzJdKXJldHVybiBBLmZpbmQoYSk7dGhpcy5sZW5ndGg9MSx0aGlzWzBdPWZ9cmV0dXJuIHRoaXMuY29udGV4dD1kLHRoaXMuc2VsZWN0b3I9YSx0aGlzfXJldHVybiBhLm5vZGVUeXBlPyh0aGlzLmNvbnRleHQ9dGhpc1swXT1hLHRoaXMubGVuZ3RoPTEsdGhpcyk6bi5pc0Z1bmN0aW9uKGEpPyJ1bmRlZmluZWQiIT10eXBlb2YgYy5yZWFkeT9jLnJlYWR5KGEpOmEobik6KHZvaWQgMCE9PWEuc2VsZWN0b3ImJih0aGlzLnNlbGVjdG9yPWEuc2VsZWN0b3IsdGhpcy5jb250ZXh0PWEuY29udGV4dCksbi5tYWtlQXJyYXkoYSx0aGlzKSl9O0MucHJvdG90eXBlPW4uZm4sQT1uKGQpO3ZhciBEPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEU9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07bi5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihhKXt2YXIgYixjPW4oYSx0aGlzKSxkPWMubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7ZD5iO2IrKylpZihuLmNvbnRhaW5zKHRoaXMsY1tiXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYyxkPTAsZT10aGlzLmxlbmd0aCxmPVtdLGc9dy50ZXN0KGEpfHwic3RyaW5nIiE9dHlwZW9mIGE/bihhLGJ8fHRoaXMuY29udGV4dCk6MDtlPmQ7ZCsrKWZvcihjPXRoaXNbZF07YyYmYyE9PWI7Yz1jLnBhcmVudE5vZGUpaWYoYy5ub2RlVHlwZTwxMSYmKGc/Zy5pbmRleChjKT4tMToxPT09Yy5ub2RlVHlwZSYmbi5maW5kLm1hdGNoZXNTZWxlY3RvcihjLGEpKSl7Zi5wdXNoKGMpO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjayhmLmxlbmd0aD4xP24udW5pcXVlU29ydChmKTpmKX0saW5kZXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/InN0cmluZyI9PXR5cGVvZiBhP24uaW5BcnJheSh0aGlzWzBdLG4oYSkpOm4uaW5BcnJheShhLmpxdWVyeT9hWzBdOmEsdGhpcyk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobi51bmlxdWVTb3J0KG4ubWVyZ2UodGhpcy5nZXQoKSxuKGEsYikpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWE/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoYSkpfX0pO2Z1bmN0aW9uIEYoYSxiKXtkbyBhPWFbYl07d2hpbGUoYSYmMSE9PWEubm9kZVR5cGUpO3JldHVybiBhfW4uZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmMTEhPT1iLm5vZGVUeXBlP2I6bnVsbH0scGFyZW50czpmdW5jdGlvbihhKXtyZXR1cm4gdShhLCJwYXJlbnROb2RlIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHUoYSwicGFyZW50Tm9kZSIsYyl9LG5leHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIEYoYSwibmV4dFNpYmxpbmciKX0scHJldjpmdW5jdGlvbihhKXtyZXR1cm4gRihhLCJwcmV2aW91c1NpYmxpbmciKX0sbmV4dEFsbDpmdW5jdGlvbihhKXtyZXR1cm4gdShhLCJuZXh0U2libGluZyIpfSxwcmV2QWxsOmZ1bmN0aW9uKGEpe3JldHVybiB1KGEsInByZXZpb3VzU2libGluZyIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB1KGEsIm5leHRTaWJsaW5nIixjKX0scHJldlVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdShhLCJwcmV2aW91c1NpYmxpbmciLGMpfSxzaWJsaW5nczpmdW5jdGlvbihhKXtyZXR1cm4gdigoYS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxhKX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ubm9kZU5hbWUoYSwiaWZyYW1lIik/YS5jb250ZW50RG9jdW1lbnR8fGEuY29udGVudFdpbmRvdy5kb2N1bWVudDpuLm1lcmdlKFtdLGEuY2hpbGROb2Rlcyl9fSxmdW5jdGlvbihhLGIpe24uZm5bYV09ZnVuY3Rpb24oYyxkKXt2YXIgZT1uLm1hcCh0aGlzLGIsYyk7cmV0dXJuIlVudGlsIiE9PWEuc2xpY2UoLTUpJiYoZD1jKSxkJiYic3RyaW5nIj09dHlwZW9mIGQmJihlPW4uZmlsdGVyKGQsZSkpLHRoaXMubGVuZ3RoPjEmJihFW2FdfHwoZT1uLnVuaXF1ZVNvcnQoZSkpLEQudGVzdChhKSYmKGU9ZS5yZXZlcnNlKCkpKSx0aGlzLnB1c2hTdGFjayhlKX19KTt2YXIgRz0vXFMrL2c7ZnVuY3Rpb24gSChhKXt2YXIgYj17fTtyZXR1cm4gbi5lYWNoKGEubWF0Y2goRyl8fFtdLGZ1bmN0aW9uKGEsYyl7YltjXT0hMH0pLGJ9bi5DYWxsYmFja3M9ZnVuY3Rpb24oYSl7YT0ic3RyaW5nIj09dHlwZW9mIGE/SChhKTpuLmV4dGVuZCh7fSxhKTt2YXIgYixjLGQsZSxmPVtdLGc9W10saD0tMSxpPWZ1bmN0aW9uKCl7Zm9yKGU9YS5vbmNlLGQ9Yj0hMDtnLmxlbmd0aDtoPS0xKXtjPWcuc2hpZnQoKTt3aGlsZSgrK2g8Zi5sZW5ndGgpZltoXS5hcHBseShjWzBdLGNbMV0pPT09ITEmJmEuc3RvcE9uRmFsc2UmJihoPWYubGVuZ3RoLGM9ITEpfWEubWVtb3J5fHwoYz0hMSksYj0hMSxlJiYoZj1jP1tdOiIiKX0saj17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihjJiYhYiYmKGg9Zi5sZW5ndGgtMSxnLnB1c2goYykpLGZ1bmN0aW9uIGQoYil7bi5lYWNoKGIsZnVuY3Rpb24oYixjKXtuLmlzRnVuY3Rpb24oYyk/YS51bmlxdWUmJmouaGFzKGMpfHxmLnB1c2goYyk6YyYmYy5sZW5ndGgmJiJzdHJpbmciIT09bi50eXBlKGMpJiZkKGMpfSl9KGFyZ3VtZW50cyksYyYmIWImJmkoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oYSxiKXt2YXIgYzt3aGlsZSgoYz1uLmluQXJyYXkoYixmLGMpKT4tMSlmLnNwbGljZShjLDEpLGg+PWMmJmgtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihhKXtyZXR1cm4gYT9uLmluQXJyYXkoYSxmKT4tMTpmLmxlbmd0aD4wfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBmJiYoZj1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBlPWc9W10sZj1jPSIiLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWZ9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gZT0hMCxjfHxqLmRpc2FibGUoKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWV9LGZpcmVXaXRoOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIGV8fChjPWN8fFtdLGM9W2EsYy5zbGljZT9jLnNsaWNlKCk6Y10sZy5wdXNoKGMpLGJ8fGkoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBqLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhZH19O3JldHVybiBqfSxuLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9W1sicmVzb2x2ZSIsImRvbmUiLG4uQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLCJyZXNvbHZlZCJdLFsicmVqZWN0IiwiZmFpbCIsbi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksInJlamVjdGVkIl0sWyJub3RpZnkiLCJwcm9ncmVzcyIsbi5DYWxsYmFja3MoIm1lbW9yeSIpXV0sYz0icGVuZGluZyIsZD17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gY30sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIGUuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSx0aGVuOmZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzO3JldHVybiBuLkRlZmVycmVkKGZ1bmN0aW9uKGMpe24uZWFjaChiLGZ1bmN0aW9uKGIsZil7dmFyIGc9bi5pc0Z1bmN0aW9uKGFbYl0pJiZhW2JdO2VbZlsxXV0oZnVuY3Rpb24oKXt2YXIgYT1nJiZnLmFwcGx5KHRoaXMsYXJndW1lbnRzKTthJiZuLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9hLnByb21pc2UoKS5wcm9ncmVzcyhjLm5vdGlmeSkuZG9uZShjLnJlc29sdmUpLmZhaWwoYy5yZWplY3QpOmNbZlswXSsiV2l0aCJdKHRoaXM9PT1kP2MucHJvbWlzZSgpOnRoaXMsZz9bYV06YXJndW1lbnRzKX0pfSksYT1udWxsfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hP24uZXh0ZW5kKGEsZCk6ZH19LGU9e307cmV0dXJuIGQucGlwZT1kLnRoZW4sbi5lYWNoKGIsZnVuY3Rpb24oYSxmKXt2YXIgZz1mWzJdLGg9ZlszXTtkW2ZbMV1dPWcuYWRkLGgmJmcuYWRkKGZ1bmN0aW9uKCl7Yz1ofSxiWzFeYV1bMl0uZGlzYWJsZSxiWzJdWzJdLmxvY2spLGVbZlswXV09ZnVuY3Rpb24oKXtyZXR1cm4gZVtmWzBdKyJXaXRoIl0odGhpcz09PWU/ZDp0aGlzLGFyZ3VtZW50cyksdGhpc30sZVtmWzBdKyJXaXRoIl09Zy5maXJlV2l0aH0pLGQucHJvbWlzZShlKSxhJiZhLmNhbGwoZSxlKSxlfSx3aGVuOmZ1bmN0aW9uKGEpe3ZhciBiPTAsYz1lLmNhbGwoYXJndW1lbnRzKSxkPWMubGVuZ3RoLGY9MSE9PWR8fGEmJm4uaXNGdW5jdGlvbihhLnByb21pc2UpP2Q6MCxnPTE9PT1mP2E6bi5EZWZlcnJlZCgpLGg9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmdW5jdGlvbihkKXtiW2FdPXRoaXMsY1thXT1hcmd1bWVudHMubGVuZ3RoPjE/ZS5jYWxsKGFyZ3VtZW50cyk6ZCxjPT09aT9nLm5vdGlmeVdpdGgoYixjKTotLWZ8fGcucmVzb2x2ZVdpdGgoYixjKX19LGksaixrO2lmKGQ+MSlmb3IoaT1uZXcgQXJyYXkoZCksaj1uZXcgQXJyYXkoZCksaz1uZXcgQXJyYXkoZCk7ZD5iO2IrKyljW2JdJiZuLmlzRnVuY3Rpb24oY1tiXS5wcm9taXNlKT9jW2JdLnByb21pc2UoKS5wcm9ncmVzcyhoKGIsaixpKSkuZG9uZShoKGIsayxjKSkuZmFpbChnLnJlamVjdCk6LS1mO3JldHVybiBmfHxnLnJlc29sdmVXaXRoKGssYyksZy5wcm9taXNlKCl9fSk7dmFyIEk7bi5mbi5yZWFkeT1mdW5jdGlvbihhKXtyZXR1cm4gbi5yZWFkeS5wcm9taXNlKCkuZG9uZShhKSx0aGlzfSxuLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxob2xkUmVhZHk6ZnVuY3Rpb24oYSl7YT9uLnJlYWR5V2FpdCsrOm4ucmVhZHkoITApfSxyZWFkeTpmdW5jdGlvbihhKXsoYT09PSEwPy0tbi5yZWFkeVdhaXQ6bi5pc1JlYWR5KXx8KG4uaXNSZWFkeT0hMCxhIT09ITAmJi0tbi5yZWFkeVdhaXQ+MHx8KEkucmVzb2x2ZVdpdGgoZCxbbl0pLG4uZm4udHJpZ2dlckhhbmRsZXImJihuKGQpLnRyaWdnZXJIYW5kbGVyKCJyZWFkeSIpLG4oZCkub2ZmKCJyZWFkeSIpKSkpfX0pO2Z1bmN0aW9uIEooKXtkLmFkZEV2ZW50TGlzdGVuZXI/KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsSyksYS5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIixLKSk6KGQuZGV0YWNoRXZlbnQoIm9ucmVhZHlzdGF0ZWNoYW5nZSIsSyksYS5kZXRhY2hFdmVudCgib25sb2FkIixLKSl9ZnVuY3Rpb24gSygpeyhkLmFkZEV2ZW50TGlzdGVuZXJ8fCJsb2FkIj09PWEuZXZlbnQudHlwZXx8ImNvbXBsZXRlIj09PWQucmVhZHlTdGF0ZSkmJihKKCksbi5yZWFkeSgpKX1uLnJlYWR5LnByb21pc2U9ZnVuY3Rpb24oYil7aWYoIUkpaWYoST1uLkRlZmVycmVkKCksImNvbXBsZXRlIj09PWQucmVhZHlTdGF0ZXx8ImxvYWRpbmciIT09ZC5yZWFkeVN0YXRlJiYhZC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwpYS5zZXRUaW1lb3V0KG4ucmVhZHkpO2Vsc2UgaWYoZC5hZGRFdmVudExpc3RlbmVyKWQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsSyksYS5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixLKTtlbHNle2QuYXR0YWNoRXZlbnQoIm9ucmVhZHlzdGF0ZWNoYW5nZSIsSyksYS5hdHRhY2hFdmVudCgib25sb2FkIixLKTt2YXIgYz0hMTt0cnl7Yz1udWxsPT1hLmZyYW1lRWxlbWVudCYmZC5kb2N1bWVudEVsZW1lbnR9Y2F0Y2goZSl7fWMmJmMuZG9TY3JvbGwmJiFmdW5jdGlvbiBmKCl7aWYoIW4uaXNSZWFkeSl7dHJ5e2MuZG9TY3JvbGwoImxlZnQiKX1jYXRjaChiKXtyZXR1cm4gYS5zZXRUaW1lb3V0KGYsNTApfUooKSxuLnJlYWR5KCl9fSgpfXJldHVybiBJLnByb21pc2UoYil9LG4ucmVhZHkucHJvbWlzZSgpO3ZhciBMO2ZvcihMIGluIG4obCkpYnJlYWs7bC5vd25GaXJzdD0iMCI9PT1MLGwuaW5saW5lQmxvY2tOZWVkc0xheW91dD0hMSxuKGZ1bmN0aW9uKCl7dmFyIGEsYixjLGU7Yz1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF0sYyYmYy5zdHlsZSYmKGI9ZC5jcmVhdGVFbGVtZW50KCJkaXYiKSxlPWQuY3JlYXRlRWxlbWVudCgiZGl2IiksZS5zdHlsZS5jc3NUZXh0PSJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweCIsYy5hcHBlbmRDaGlsZChlKS5hcHBlbmRDaGlsZChiKSwidW5kZWZpbmVkIiE9dHlwZW9mIGIuc3R5bGUuem9vbSYmKGIuc3R5bGUuY3NzVGV4dD0iZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MSIsbC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0PWE9Mz09PWIub2Zmc2V0V2lkdGgsYSYmKGMuc3R5bGUuem9vbT0xKSksYy5yZW1vdmVDaGlsZChlKSl9KSxmdW5jdGlvbigpe3ZhciBhPWQuY3JlYXRlRWxlbWVudCgiZGl2Iik7bC5kZWxldGVFeHBhbmRvPSEwO3RyeXtkZWxldGUgYS50ZXN0fWNhdGNoKGIpe2wuZGVsZXRlRXhwYW5kbz0hMX1hPW51bGx9KCk7dmFyIE09ZnVuY3Rpb24oYSl7dmFyIGI9bi5ub0RhdGFbKGEubm9kZU5hbWUrIiAiKS50b0xvd2VyQ2FzZSgpXSxjPSthLm5vZGVUeXBlfHwxO3JldHVybiAxIT09YyYmOSE9PWM/ITE6IWJ8fGIhPT0hMCYmYS5nZXRBdHRyaWJ1dGUoImNsYXNzaWQiKT09PWJ9LE49L14oPzpce1tcd1xXXSpcfXxcW1tcd1xXXSpcXSkkLyxPPS8oW0EtWl0pL2c7ZnVuY3Rpb24gUChhLGIsYyl7aWYodm9pZCAwPT09YyYmMT09PWEubm9kZVR5cGUpe3ZhciBkPSJkYXRhLSIrYi5yZXBsYWNlKE8sIi0kMSIpLnRvTG93ZXJDYXNlKCk7aWYoYz1hLmdldEF0dHJpYnV0ZShkKSwic3RyaW5nIj09dHlwZW9mIGMpe3RyeXtjPSJ0cnVlIj09PWM/ITA6ImZhbHNlIj09PWM/ITE6Im51bGwiPT09Yz9udWxsOitjKyIiPT09Yz8rYzpOLnRlc3QoYyk/bi5wYXJzZUpTT04oYyk6Y31jYXRjaChlKXt9bi5kYXRhKGEsYixjKX1lbHNlIGM9dm9pZCAwOwp9cmV0dXJuIGN9ZnVuY3Rpb24gUShhKXt2YXIgYjtmb3IoYiBpbiBhKWlmKCgiZGF0YSIhPT1ifHwhbi5pc0VtcHR5T2JqZWN0KGFbYl0pKSYmInRvSlNPTiIhPT1iKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIFIoYSxiLGQsZSl7aWYoTShhKSl7dmFyIGYsZyxoPW4uZXhwYW5kbyxpPWEubm9kZVR5cGUsaj1pP24uY2FjaGU6YSxrPWk/YVtoXTphW2hdJiZoO2lmKGsmJmpba10mJihlfHxqW2tdLmRhdGEpfHx2b2lkIDAhPT1kfHwic3RyaW5nIiE9dHlwZW9mIGIpcmV0dXJuIGt8fChrPWk/YVtoXT1jLnBvcCgpfHxuLmd1aWQrKzpoKSxqW2tdfHwoaltrXT1pP3t9Ont0b0pTT046bi5ub29wfSksIm9iamVjdCIhPXR5cGVvZiBiJiYiZnVuY3Rpb24iIT10eXBlb2YgYnx8KGU/altrXT1uLmV4dGVuZChqW2tdLGIpOmpba10uZGF0YT1uLmV4dGVuZChqW2tdLmRhdGEsYikpLGc9altrXSxlfHwoZy5kYXRhfHwoZy5kYXRhPXt9KSxnPWcuZGF0YSksdm9pZCAwIT09ZCYmKGdbbi5jYW1lbENhc2UoYildPWQpLCJzdHJpbmciPT10eXBlb2YgYj8oZj1nW2JdLG51bGw9PWYmJihmPWdbbi5jYW1lbENhc2UoYildKSk6Zj1nLGZ9fWZ1bmN0aW9uIFMoYSxiLGMpe2lmKE0oYSkpe3ZhciBkLGUsZj1hLm5vZGVUeXBlLGc9Zj9uLmNhY2hlOmEsaD1mP2Fbbi5leHBhbmRvXTpuLmV4cGFuZG87aWYoZ1toXSl7aWYoYiYmKGQ9Yz9nW2hdOmdbaF0uZGF0YSkpe24uaXNBcnJheShiKT9iPWIuY29uY2F0KG4ubWFwKGIsbi5jYW1lbENhc2UpKTpiIGluIGQ/Yj1bYl06KGI9bi5jYW1lbENhc2UoYiksYj1iIGluIGQ/W2JdOmIuc3BsaXQoIiAiKSksZT1iLmxlbmd0aDt3aGlsZShlLS0pZGVsZXRlIGRbYltlXV07aWYoYz8hUShkKTohbi5pc0VtcHR5T2JqZWN0KGQpKXJldHVybn0oY3x8KGRlbGV0ZSBnW2hdLmRhdGEsUShnW2hdKSkpJiYoZj9uLmNsZWFuRGF0YShbYV0sITApOmwuZGVsZXRlRXhwYW5kb3x8ZyE9Zy53aW5kb3c/ZGVsZXRlIGdbaF06Z1toXT12b2lkIDApfX19bi5leHRlbmQoe2NhY2hlOnt9LG5vRGF0YTp7ImFwcGxldCAiOiEwLCJlbWJlZCAiOiEwLCJvYmplY3QgIjoiY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwIn0saGFzRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gYT1hLm5vZGVUeXBlP24uY2FjaGVbYVtuLmV4cGFuZG9dXTphW24uZXhwYW5kb10sISFhJiYhUShhKX0sZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFIoYSxiLGMpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoYSxiKX0sX2RhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBSKGEsYixjLCEwKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUyhhLGIsITApfX0pLG4uZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9dGhpc1swXSxnPWYmJmYuYXR0cmlidXRlcztpZih2b2lkIDA9PT1hKXtpZih0aGlzLmxlbmd0aCYmKGU9bi5kYXRhKGYpLDE9PT1mLm5vZGVUeXBlJiYhbi5fZGF0YShmLCJwYXJzZWRBdHRycyIpKSl7Yz1nLmxlbmd0aDt3aGlsZShjLS0pZ1tjXSYmKGQ9Z1tjXS5uYW1lLDA9PT1kLmluZGV4T2YoImRhdGEtIikmJihkPW4uY2FtZWxDYXNlKGQuc2xpY2UoNSkpLFAoZixkLGVbZF0pKSk7bi5fZGF0YShmLCJwYXJzZWRBdHRycyIsITApfXJldHVybiBlfXJldHVybiJvYmplY3QiPT10eXBlb2YgYT90aGlzLmVhY2goZnVuY3Rpb24oKXtuLmRhdGEodGhpcyxhKX0pOmFyZ3VtZW50cy5sZW5ndGg+MT90aGlzLmVhY2goZnVuY3Rpb24oKXtuLmRhdGEodGhpcyxhLGIpfSk6Zj9QKGYsYSxuLmRhdGEoZixhKSk6dm9pZCAwfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtuLnJlbW92ZURhdGEodGhpcyxhKX0pfX0pLG4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGE/KGI9KGJ8fCJmeCIpKyJxdWV1ZSIsZD1uLl9kYXRhKGEsYiksYyYmKCFkfHxuLmlzQXJyYXkoYyk/ZD1uLl9kYXRhKGEsYixuLm1ha2VBcnJheShjKSk6ZC5wdXNoKGMpKSxkfHxbXSk6dm9pZCAwfSxkZXF1ZXVlOmZ1bmN0aW9uKGEsYil7Yj1ifHwiZngiO3ZhciBjPW4ucXVldWUoYSxiKSxkPWMubGVuZ3RoLGU9Yy5zaGlmdCgpLGY9bi5fcXVldWVIb29rcyhhLGIpLGc9ZnVuY3Rpb24oKXtuLmRlcXVldWUoYSxiKX07ImlucHJvZ3Jlc3MiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKCJmeCI9PT1iJiZjLnVuc2hpZnQoImlucHJvZ3Jlc3MiKSxkZWxldGUgZi5zdG9wLGUuY2FsbChhLGcsZikpLCFkJiZmJiZmLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz1iKyJxdWV1ZUhvb2tzIjtyZXR1cm4gbi5fZGF0YShhLGMpfHxuLl9kYXRhKGEsYyx7ZW1wdHk6bi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IikuYWRkKGZ1bmN0aW9uKCl7bi5fcmVtb3ZlRGF0YShhLGIrInF1ZXVlIiksbi5fcmVtb3ZlRGF0YShhLGMpfSl9KX19KSxuLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz0yO3JldHVybiJzdHJpbmciIT10eXBlb2YgYSYmKGI9YSxhPSJmeCIsYy0tKSxhcmd1bWVudHMubGVuZ3RoPGM/bi5xdWV1ZSh0aGlzWzBdLGEpOnZvaWQgMD09PWI/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1uLnF1ZXVlKHRoaXMsYSxiKTtuLl9xdWV1ZUhvb2tzKHRoaXMsYSksImZ4Ij09PWEmJiJpbnByb2dyZXNzIiE9PWNbMF0mJm4uZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24uZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8ImZ4IixbXSl9LHByb21pc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTEsZT1uLkRlZmVycmVkKCksZj10aGlzLGc9dGhpcy5sZW5ndGgsaD1mdW5jdGlvbigpey0tZHx8ZS5yZXNvbHZlV2l0aChmLFtmXSl9OyJzdHJpbmciIT10eXBlb2YgYSYmKGI9YSxhPXZvaWQgMCksYT1hfHwiZngiO3doaWxlKGctLSljPW4uX2RhdGEoZltnXSxhKyJxdWV1ZUhvb2tzIiksYyYmYy5lbXB0eSYmKGQrKyxjLmVtcHR5LmFkZChoKSk7cmV0dXJuIGgoKSxlLnByb21pc2UoYil9fSksZnVuY3Rpb24oKXt2YXIgYTtsLnNocmlua1dyYXBCbG9ja3M9ZnVuY3Rpb24oKXtpZihudWxsIT1hKXJldHVybiBhO2E9ITE7dmFyIGIsYyxlO3JldHVybiBjPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXSxjJiZjLnN0eWxlPyhiPWQuY3JlYXRlRWxlbWVudCgiZGl2IiksZT1kLmNyZWF0ZUVsZW1lbnQoImRpdiIpLGUuc3R5bGUuY3NzVGV4dD0icG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHgiLGMuYXBwZW5kQ2hpbGQoZSkuYXBwZW5kQ2hpbGQoYiksInVuZGVmaW5lZCIhPXR5cGVvZiBiLnN0eWxlLnpvb20mJihiLnN0eWxlLmNzc1RleHQ9Ii13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MXB4O3dpZHRoOjFweDt6b29tOjEiLGIuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KCJkaXYiKSkuc3R5bGUud2lkdGg9IjVweCIsYT0zIT09Yi5vZmZzZXRXaWR0aCksYy5yZW1vdmVDaGlsZChlKSxhKTp2b2lkIDB9fSgpO3ZhciBUPS9bKy1dPyg/OlxkKlwufClcZCsoPzpbZUVdWystXT9cZCt8KS8uc291cmNlLFU9bmV3IFJlZ0V4cCgiXig/OihbKy1dKT18KSgiK1QrIikoW2EteiVdKikkIiwiaSIpLFY9WyJUb3AiLCJSaWdodCIsIkJvdHRvbSIsIkxlZnQiXSxXPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9Ynx8YSwibm9uZSI9PT1uLmNzcyhhLCJkaXNwbGF5Iil8fCFuLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKX07ZnVuY3Rpb24gWChhLGIsYyxkKXt2YXIgZSxmPTEsZz0yMCxoPWQ/ZnVuY3Rpb24oKXtyZXR1cm4gZC5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4gbi5jc3MoYSxiLCIiKX0saT1oKCksaj1jJiZjWzNdfHwobi5jc3NOdW1iZXJbYl0/IiI6InB4Iiksaz0obi5jc3NOdW1iZXJbYl18fCJweCIhPT1qJiYraSkmJlUuZXhlYyhuLmNzcyhhLGIpKTtpZihrJiZrWzNdIT09ail7aj1qfHxrWzNdLGM9Y3x8W10saz0raXx8MTtkbyBmPWZ8fCIuNSIsay89ZixuLnN0eWxlKGEsYixrK2opO3doaWxlKGYhPT0oZj1oKCkvaSkmJjEhPT1mJiYtLWcpfXJldHVybiBjJiYoaz0ra3x8K2l8fDAsZT1jWzFdP2srKGNbMV0rMSkqY1syXTorY1syXSxkJiYoZC51bml0PWosZC5zdGFydD1rLGQuZW5kPWUpKSxlfXZhciBZPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoIm9iamVjdCI9PT1uLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYylZKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLG4uaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChuKGEpLGMpfSkpLGIpKWZvcig7aT5oO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9LFo9L14oPzpjaGVja2JveHxyYWRpbykkL2ksJD0vPChbXHc6LV0rKS8sXz0vXiR8XC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksYWE9L15ccysvLGJhPSJhYmJyfGFydGljbGV8YXNpZGV8YXVkaW98YmRpfGNhbnZhc3xkYXRhfGRhdGFsaXN0fGRldGFpbHN8ZGlhbG9nfGZpZ2NhcHRpb258ZmlndXJlfGZvb3RlcnxoZWFkZXJ8aGdyb3VwfG1haW58bWFya3xtZXRlcnxuYXZ8b3V0cHV0fHBpY3R1cmV8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRlbXBsYXRlfHRpbWV8dmlkZW8iO2Z1bmN0aW9uIGNhKGEpe3ZhciBiPWJhLnNwbGl0KCJ8IiksYz1hLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihjLmNyZWF0ZUVsZW1lbnQpd2hpbGUoYi5sZW5ndGgpYy5jcmVhdGVFbGVtZW50KGIucG9wKCkpO3JldHVybiBjfSFmdW5jdGlvbigpe3ZhciBhPWQuY3JlYXRlRWxlbWVudCgiZGl2IiksYj1kLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxjPWQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTthLmlubmVySFRNTD0iICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+IixsLmxlYWRpbmdXaGl0ZXNwYWNlPTM9PT1hLmZpcnN0Q2hpbGQubm9kZVR5cGUsbC50Ym9keT0hYS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGJvZHkiKS5sZW5ndGgsbC5odG1sU2VyaWFsaXplPSEhYS5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGluayIpLmxlbmd0aCxsLmh0bWw1Q2xvbmU9Ijw6bmF2PjwvOm5hdj4iIT09ZC5jcmVhdGVFbGVtZW50KCJuYXYiKS5jbG9uZU5vZGUoITApLm91dGVySFRNTCxjLnR5cGU9ImNoZWNrYm94IixjLmNoZWNrZWQ9ITAsYi5hcHBlbmRDaGlsZChjKSxsLmFwcGVuZENoZWNrZWQ9Yy5jaGVja2VkLGEuaW5uZXJIVE1MPSI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+IixsLm5vQ2xvbmVDaGVja2VkPSEhYS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWUsYi5hcHBlbmRDaGlsZChhKSxjPWQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSxjLnNldEF0dHJpYnV0ZSgidHlwZSIsInJhZGlvIiksYy5zZXRBdHRyaWJ1dGUoImNoZWNrZWQiLCJjaGVja2VkIiksYy5zZXRBdHRyaWJ1dGUoIm5hbWUiLCJ0IiksYS5hcHBlbmRDaGlsZChjKSxsLmNoZWNrQ2xvbmU9YS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsbC5ub0Nsb25lRXZlbnQ9ISFhLmFkZEV2ZW50TGlzdGVuZXIsYVtuLmV4cGFuZG9dPTEsbC5hdHRyaWJ1dGVzPSFhLmdldEF0dHJpYnV0ZShuLmV4cGFuZG8pfSgpO3ZhciBkYT17b3B0aW9uOlsxLCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+IiwiPC9zZWxlY3Q+Il0sbGVnZW5kOlsxLCI8ZmllbGRzZXQ+IiwiPC9maWVsZHNldD4iXSxhcmVhOlsxLCI8bWFwPiIsIjwvbWFwPiJdLHBhcmFtOlsxLCI8b2JqZWN0PiIsIjwvb2JqZWN0PiJdLHRoZWFkOlsxLCI8dGFibGU+IiwiPC90YWJsZT4iXSx0cjpbMiwiPHRhYmxlPjx0Ym9keT4iLCI8L3Rib2R5PjwvdGFibGU+Il0sY29sOlsyLCI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPiIsIjwvY29sZ3JvdXA+PC90YWJsZT4iXSx0ZDpbMywiPHRhYmxlPjx0Ym9keT48dHI+IiwiPC90cj48L3Rib2R5PjwvdGFibGU+Il0sX2RlZmF1bHQ6bC5odG1sU2VyaWFsaXplP1swLCIiLCIiXTpbMSwiWDxkaXY+IiwiPC9kaXY+Il19O2RhLm9wdGdyb3VwPWRhLm9wdGlvbixkYS50Ym9keT1kYS50Zm9vdD1kYS5jb2xncm91cD1kYS5jYXB0aW9uPWRhLnRoZWFkLGRhLnRoPWRhLnRkO2Z1bmN0aW9uIGVhKGEsYil7dmFyIGMsZCxlPTAsZj0idW5kZWZpbmVkIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWU/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHwiKiIpOiJ1bmRlZmluZWQiIT10eXBlb2YgYS5xdWVyeVNlbGVjdG9yQWxsP2EucXVlcnlTZWxlY3RvckFsbChifHwiKiIpOnZvaWQgMDtpZighZilmb3IoZj1bXSxjPWEuY2hpbGROb2Rlc3x8YTtudWxsIT0oZD1jW2VdKTtlKyspIWJ8fG4ubm9kZU5hbWUoZCxiKT9mLnB1c2goZCk6bi5tZXJnZShmLGVhKGQsYikpO3JldHVybiB2b2lkIDA9PT1ifHxiJiZuLm5vZGVOYW1lKGEsYik/bi5tZXJnZShbYV0sZik6Zn1mdW5jdGlvbiBmYShhLGIpe2Zvcih2YXIgYyxkPTA7bnVsbCE9KGM9YVtkXSk7ZCsrKW4uX2RhdGEoYywiZ2xvYmFsRXZhbCIsIWJ8fG4uX2RhdGEoYltkXSwiZ2xvYmFsRXZhbCIpKX12YXIgZ2E9Lzx8JiM/XHcrOy8saGE9Lzx0Ym9keS9pO2Z1bmN0aW9uIGlhKGEpe1oudGVzdChhLnR5cGUpJiYoYS5kZWZhdWx0Q2hlY2tlZD1hLmNoZWNrZWQpfWZ1bmN0aW9uIGphKGEsYixjLGQsZSl7Zm9yKHZhciBmLGcsaCxpLGosayxtLG89YS5sZW5ndGgscD1jYShiKSxxPVtdLHI9MDtvPnI7cisrKWlmKGc9YVtyXSxnfHwwPT09ZylpZigib2JqZWN0Ij09PW4udHlwZShnKSluLm1lcmdlKHEsZy5ub2RlVHlwZT9bZ106Zyk7ZWxzZSBpZihnYS50ZXN0KGcpKXtpPWl8fHAuYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KCJkaXYiKSksaj0oJC5leGVjKGcpfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpLG09ZGFbal18fGRhLl9kZWZhdWx0LGkuaW5uZXJIVE1MPW1bMV0rbi5odG1sUHJlZmlsdGVyKGcpK21bMl0sZj1tWzBdO3doaWxlKGYtLSlpPWkubGFzdENoaWxkO2lmKCFsLmxlYWRpbmdXaGl0ZXNwYWNlJiZhYS50ZXN0KGcpJiZxLnB1c2goYi5jcmVhdGVUZXh0Tm9kZShhYS5leGVjKGcpWzBdKSksIWwudGJvZHkpe2c9InRhYmxlIiE9PWp8fGhhLnRlc3QoZyk/Ijx0YWJsZT4iIT09bVsxXXx8aGEudGVzdChnKT8wOmk6aS5maXJzdENoaWxkLGY9ZyYmZy5jaGlsZE5vZGVzLmxlbmd0aDt3aGlsZShmLS0pbi5ub2RlTmFtZShrPWcuY2hpbGROb2Rlc1tmXSwidGJvZHkiKSYmIWsuY2hpbGROb2Rlcy5sZW5ndGgmJmcucmVtb3ZlQ2hpbGQoayl9bi5tZXJnZShxLGkuY2hpbGROb2RlcyksaS50ZXh0Q29udGVudD0iIjt3aGlsZShpLmZpcnN0Q2hpbGQpaS5yZW1vdmVDaGlsZChpLmZpcnN0Q2hpbGQpO2k9cC5sYXN0Q2hpbGR9ZWxzZSBxLnB1c2goYi5jcmVhdGVUZXh0Tm9kZShnKSk7aSYmcC5yZW1vdmVDaGlsZChpKSxsLmFwcGVuZENoZWNrZWR8fG4uZ3JlcChlYShxLCJpbnB1dCIpLGlhKSxyPTA7d2hpbGUoZz1xW3IrK10paWYoZCYmbi5pbkFycmF5KGcsZCk+LTEpZSYmZS5wdXNoKGcpO2Vsc2UgaWYoaD1uLmNvbnRhaW5zKGcub3duZXJEb2N1bWVudCxnKSxpPWVhKHAuYXBwZW5kQ2hpbGQoZyksInNjcmlwdCIpLGgmJmZhKGkpLGMpe2Y9MDt3aGlsZShnPWlbZisrXSlfLnRlc3QoZy50eXBlfHwiIikmJmMucHVzaChnKX1yZXR1cm4gaT1udWxsLHB9IWZ1bmN0aW9uKCl7dmFyIGIsYyxlPWQuY3JlYXRlRWxlbWVudCgiZGl2Iik7Zm9yKGIgaW57c3VibWl0OiEwLGNoYW5nZTohMCxmb2N1c2luOiEwfSljPSJvbiIrYiwobFtiXT1jIGluIGEpfHwoZS5zZXRBdHRyaWJ1dGUoYywidCIpLGxbYl09ZS5hdHRyaWJ1dGVzW2NdLmV4cGFuZG89PT0hMSk7ZT1udWxsfSgpO3ZhciBrYT0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2ksbGE9L15rZXkvLG1hPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxuYT0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sb2E9L14oW14uXSopKD86XC4oLispfCkvO2Z1bmN0aW9uIHBhKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWEoKXtyZXR1cm4hMX1mdW5jdGlvbiByYSgpe3RyeXtyZXR1cm4gZC5hY3RpdmVFbGVtZW50fWNhdGNoKGEpe319ZnVuY3Rpb24gc2EoYSxiLGMsZCxlLGYpe3ZhciBnLGg7aWYoIm9iamVjdCI9PXR5cGVvZiBiKXsic3RyaW5nIiE9dHlwZW9mIGMmJihkPWR8fGMsYz12b2lkIDApO2ZvcihoIGluIGIpc2EoYSxoLGMsZCxiW2hdLGYpO3JldHVybiBhfWlmKG51bGw9PWQmJm51bGw9PWU/KGU9YyxkPWM9dm9pZCAwKTpudWxsPT1lJiYoInN0cmluZyI9PXR5cGVvZiBjPyhlPWQsZD12b2lkIDApOihlPWQsZD1jLGM9dm9pZCAwKSksZT09PSExKWU9cWE7ZWxzZSBpZighZSlyZXR1cm4gYTtyZXR1cm4gMT09PWYmJihnPWUsZT1mdW5jdGlvbihhKXtyZXR1cm4gbigpLm9mZihhKSxnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5ndWlkPWcuZ3VpZHx8KGcuZ3VpZD1uLmd1aWQrKykpLGEuZWFjaChmdW5jdGlvbigpe24uZXZlbnQuYWRkKHRoaXMsYixlLGQsYyl9KX1uLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxvLHAscSxyPW4uX2RhdGEoYSk7aWYocil7Yy5oYW5kbGVyJiYoaT1jLGM9aS5oYW5kbGVyLGU9aS5zZWxlY3RvciksYy5ndWlkfHwoYy5ndWlkPW4uZ3VpZCsrKSwoZz1yLmV2ZW50cyl8fChnPXIuZXZlbnRzPXt9KSwoaz1yLmhhbmRsZSl8fChrPXIuaGFuZGxlPWZ1bmN0aW9uKGEpe3JldHVybiJ1bmRlZmluZWQiPT10eXBlb2Ygbnx8YSYmbi5ldmVudC50cmlnZ2VyZWQ9PT1hLnR5cGU/dm9pZCAwOm4uZXZlbnQuZGlzcGF0Y2guYXBwbHkoay5lbGVtLGFyZ3VtZW50cyl9LGsuZWxlbT1hKSxiPShifHwiIikubWF0Y2goRyl8fFsiIl0saD1iLmxlbmd0aDt3aGlsZShoLS0pZj1vYS5leGVjKGJbaF0pfHxbXSxvPXE9ZlsxXSxwPShmWzJdfHwiIikuc3BsaXQoIi4iKS5zb3J0KCksbyYmKGo9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShlP2ouZGVsZWdhdGVUeXBlOmouYmluZFR5cGUpfHxvLGo9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxsPW4uZXh0ZW5kKHt0eXBlOm8sb3JpZ1R5cGU6cSxkYXRhOmQsaGFuZGxlcjpjLGd1aWQ6Yy5ndWlkLHNlbGVjdG9yOmUsbmVlZHNDb250ZXh0OmUmJm4uZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChlKSxuYW1lc3BhY2U6cC5qb2luKCIuIil9LGkpLChtPWdbb10pfHwobT1nW29dPVtdLG0uZGVsZWdhdGVDb3VudD0wLGouc2V0dXAmJmouc2V0dXAuY2FsbChhLGQscCxrKSE9PSExfHwoYS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihvLGssITEpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoIm9uIitvLGspKSksai5hZGQmJihqLmFkZC5jYWxsKGEsbCksbC5oYW5kbGVyLmd1aWR8fChsLmhhbmRsZXIuZ3VpZD1jLmd1aWQpKSxlP20uc3BsaWNlKG0uZGVsZWdhdGVDb3VudCsrLDAsbCk6bS5wdXNoKGwpLG4uZXZlbnQuZ2xvYmFsW29dPSEwKTthPW51bGx9fSxyZW1vdmU6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG8scCxxLHI9bi5oYXNEYXRhKGEpJiZuLl9kYXRhKGEpO2lmKHImJihrPXIuZXZlbnRzKSl7Yj0oYnx8IiIpLm1hdGNoKEcpfHxbIiJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9b2EuZXhlYyhiW2pdKXx8W10sbz1xPWhbMV0scD0oaFsyXXx8IiIpLnNwbGl0KCIuIikuc29ydCgpLG8pe2w9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxvLG09a1tvXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKCIoXnxcXC4pIitwLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpLGk9Zj1tLmxlbmd0aDt3aGlsZShmLS0pZz1tW2ZdLCFlJiZxIT09Zy5vcmlnVHlwZXx8YyYmYy5ndWlkIT09Zy5ndWlkfHxoJiYhaC50ZXN0KGcubmFtZXNwYWNlKXx8ZCYmZCE9PWcuc2VsZWN0b3ImJigiKioiIT09ZHx8IWcuc2VsZWN0b3IpfHwobS5zcGxpY2UoZiwxKSxnLnNlbGVjdG9yJiZtLmRlbGVnYXRlQ291bnQtLSxsLnJlbW92ZSYmbC5yZW1vdmUuY2FsbChhLGcpKTtpJiYhbS5sZW5ndGgmJihsLnRlYXJkb3duJiZsLnRlYXJkb3duLmNhbGwoYSxwLHIuaGFuZGxlKSE9PSExfHxuLnJlbW92ZUV2ZW50KGEsbyxyLmhhbmRsZSksZGVsZXRlIGtbb10pfWVsc2UgZm9yKG8gaW4gayluLmV2ZW50LnJlbW92ZShhLG8rYltqXSxjLGQsITApO24uaXNFbXB0eU9iamVjdChrKSYmKGRlbGV0ZSByLmhhbmRsZSxuLl9yZW1vdmVEYXRhKGEsImV2ZW50cyIpKX19LHRyaWdnZXI6ZnVuY3Rpb24oYixjLGUsZil7dmFyIGcsaCxpLGosbCxtLG8scD1bZXx8ZF0scT1rLmNhbGwoYiwidHlwZSIpP2IudHlwZTpiLHI9ay5jYWxsKGIsIm5hbWVzcGFjZSIpP2IubmFtZXNwYWNlLnNwbGl0KCIuIik6W107aWYoaT1tPWU9ZXx8ZCwzIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJiFuYS50ZXN0KHErbi5ldmVudC50cmlnZ2VyZWQpJiYocS5pbmRleE9mKCIuIik+LTEmJihyPXEuc3BsaXQoIi4iKSxxPXIuc2hpZnQoKSxyLnNvcnQoKSksaD1xLmluZGV4T2YoIjoiKTwwJiYib24iK3EsYj1iW24uZXhwYW5kb10/YjpuZXcgbi5FdmVudChxLCJvYmplY3QiPT10eXBlb2YgYiYmYiksYi5pc1RyaWdnZXI9Zj8yOjMsYi5uYW1lc3BhY2U9ci5qb2luKCIuIiksYi5ybmFtZXNwYWNlPWIubmFtZXNwYWNlP25ldyBSZWdFeHAoIihefFxcLikiK3Iuam9pbigiXFwuKD86LipcXC58KSIpKyIoXFwufCQpIik6bnVsbCxiLnJlc3VsdD12b2lkIDAsYi50YXJnZXR8fChiLnRhcmdldD1lKSxjPW51bGw9PWM/W2JdOm4ubWFrZUFycmF5KGMsW2JdKSxsPW4uZXZlbnQuc3BlY2lhbFtxXXx8e30sZnx8IWwudHJpZ2dlcnx8bC50cmlnZ2VyLmFwcGx5KGUsYykhPT0hMSkpe2lmKCFmJiYhbC5ub0J1YmJsZSYmIW4uaXNXaW5kb3coZSkpe2ZvcihqPWwuZGVsZWdhdGVUeXBlfHxxLG5hLnRlc3QoaitxKXx8KGk9aS5wYXJlbnROb2RlKTtpO2k9aS5wYXJlbnROb2RlKXAucHVzaChpKSxtPWk7bT09PShlLm93bmVyRG9jdW1lbnR8fGQpJiZwLnB1c2gobS5kZWZhdWx0Vmlld3x8bS5wYXJlbnRXaW5kb3d8fGEpfW89MDt3aGlsZSgoaT1wW28rK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1vPjE/ajpsLmJpbmRUeXBlfHxxLGc9KG4uX2RhdGEoaSwiZXZlbnRzIil8fHt9KVtiLnR5cGVdJiZuLl9kYXRhKGksImhhbmRsZSIpLGcmJmcuYXBwbHkoaSxjKSxnPWgmJmlbaF0sZyYmZy5hcHBseSYmTShpKSYmKGIucmVzdWx0PWcuYXBwbHkoaSxjKSxiLnJlc3VsdD09PSExJiZiLnByZXZlbnREZWZhdWx0KCkpO2lmKGIudHlwZT1xLCFmJiYhYi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmKCFsLl9kZWZhdWx0fHxsLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksYyk9PT0hMSkmJk0oZSkmJmgmJmVbcV0mJiFuLmlzV2luZG93KGUpKXttPWVbaF0sbSYmKGVbaF09bnVsbCksbi5ldmVudC50cmlnZ2VyZWQ9cTt0cnl7ZVtxXSgpfWNhdGNoKHMpe31uLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsbSYmKGVbaF09bSl9cmV0dXJuIGIucmVzdWx0fX0sZGlzcGF0Y2g6ZnVuY3Rpb24oYSl7YT1uLmV2ZW50LmZpeChhKTt2YXIgYixjLGQsZixnLGg9W10saT1lLmNhbGwoYXJndW1lbnRzKSxqPShuLl9kYXRhKHRoaXMsImV2ZW50cyIpfHx7fSlbYS50eXBlXXx8W10saz1uLmV2ZW50LnNwZWNpYWxbYS50eXBlXXx8e307aWYoaVswXT1hLGEuZGVsZWdhdGVUYXJnZXQ9dGhpcywhay5wcmVEaXNwYXRjaHx8ay5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsYSkhPT0hMSl7aD1uLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxhLGopLGI9MDt3aGlsZSgoZj1oW2IrK10pJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXthLmN1cnJlbnRUYXJnZXQ9Zi5lbGVtLGM9MDt3aGlsZSgoZz1mLmhhbmRsZXJzW2MrK10pJiYhYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKWEucm5hbWVzcGFjZSYmIWEucm5hbWVzcGFjZS50ZXN0KGcubmFtZXNwYWNlKXx8KGEuaGFuZGxlT2JqPWcsYS5kYXRhPWcuZGF0YSxkPSgobi5ldmVudC5zcGVjaWFsW2cub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxnLmhhbmRsZXIpLmFwcGx5KGYuZWxlbSxpKSx2b2lkIDAhPT1kJiYoYS5yZXN1bHQ9ZCk9PT0hMSYmKGEucHJldmVudERlZmF1bHQoKSxhLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGsucG9zdERpc3BhdGNoJiZrLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsYSksYS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGc9W10saD1iLmRlbGVnYXRlQ291bnQsaT1hLnRhcmdldDtpZihoJiZpLm5vZGVUeXBlJiYoImNsaWNrIiE9PWEudHlwZXx8aXNOYU4oYS5idXR0b24pfHxhLmJ1dHRvbjwxKSlmb3IoO2khPXRoaXM7aT1pLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWkubm9kZVR5cGUmJihpLmRpc2FibGVkIT09ITB8fCJjbGljayIhPT1hLnR5cGUpKXtmb3IoZD1bXSxjPTA7aD5jO2MrKylmPWJbY10sZT1mLnNlbGVjdG9yKyIgIix2b2lkIDA9PT1kW2VdJiYoZFtlXT1mLm5lZWRzQ29udGV4dD9uKGUsdGhpcykuaW5kZXgoaSk+LTE6bi5maW5kKGUsdGhpcyxudWxsLFtpXSkubGVuZ3RoKSxkW2VdJiZkLnB1c2goZik7ZC5sZW5ndGgmJmcucHVzaCh7ZWxlbTppLGhhbmRsZXJzOmR9KX1yZXR1cm4gaDxiLmxlbmd0aCYmZy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6Yi5zbGljZShoKX0pLGd9LGZpeDpmdW5jdGlvbihhKXtpZihhW24uZXhwYW5kb10pcmV0dXJuIGE7dmFyIGIsYyxlLGY9YS50eXBlLGc9YSxoPXRoaXMuZml4SG9va3NbZl07aHx8KHRoaXMuZml4SG9va3NbZl09aD1tYS50ZXN0KGYpP3RoaXMubW91c2VIb29rczpsYS50ZXN0KGYpP3RoaXMua2V5SG9va3M6e30pLGU9aC5wcm9wcz90aGlzLnByb3BzLmNvbmNhdChoLnByb3BzKTp0aGlzLnByb3BzLGE9bmV3IG4uRXZlbnQoZyksYj1lLmxlbmd0aDt3aGlsZShiLS0pYz1lW2JdLGFbY109Z1tjXTtyZXR1cm4gYS50YXJnZXR8fChhLnRhcmdldD1nLnNyY0VsZW1lbnR8fGQpLDM9PT1hLnRhcmdldC5ub2RlVHlwZSYmKGEudGFyZ2V0PWEudGFyZ2V0LnBhcmVudE5vZGUpLGEubWV0YUtleT0hIWEubWV0YUtleSxoLmZpbHRlcj9oLmZpbHRlcihhLGcpOmF9LHByb3BzOiJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoIi5zcGxpdCgiICIpLGZpeEhvb2tzOnt9LGtleUhvb2tzOntwcm9wczoiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZSIuc3BsaXQoIiAiKSxmaWx0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbnVsbD09YS53aGljaCYmKGEud2hpY2g9bnVsbCE9Yi5jaGFyQ29kZT9iLmNoYXJDb2RlOmIua2V5Q29kZSksYX19LG1vdXNlSG9va3M6e3Byb3BzOiJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgZnJvbUVsZW1lbnQgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnQiLnNwbGl0KCIgIiksZmlsdGVyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmLGc9Yi5idXR0b24saD1iLmZyb21FbGVtZW50O3JldHVybiBudWxsPT1hLnBhZ2VYJiZudWxsIT1iLmNsaWVudFgmJihlPWEudGFyZ2V0Lm93bmVyRG9jdW1lbnR8fGQsZj1lLmRvY3VtZW50RWxlbWVudCxjPWUuYm9keSxhLnBhZ2VYPWIuY2xpZW50WCsoZiYmZi5zY3JvbGxMZWZ0fHxjJiZjLnNjcm9sbExlZnR8fDApLShmJiZmLmNsaWVudExlZnR8fGMmJmMuY2xpZW50TGVmdHx8MCksYS5wYWdlWT1iLmNsaWVudFkrKGYmJmYuc2Nyb2xsVG9wfHxjJiZjLnNjcm9sbFRvcHx8MCktKGYmJmYuY2xpZW50VG9wfHxjJiZjLmNsaWVudFRvcHx8MCkpLCFhLnJlbGF0ZWRUYXJnZXQmJmgmJihhLnJlbGF0ZWRUYXJnZXQ9aD09PWEudGFyZ2V0P2IudG9FbGVtZW50OmgpLGEud2hpY2h8fHZvaWQgMD09PWd8fChhLndoaWNoPTEmZz8xOjImZz8zOjQmZz8yOjApLGF9fSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09cmEoKSYmdGhpcy5mb2N1cyl0cnl7cmV0dXJuIHRoaXMuZm9jdXMoKSwhMX1jYXRjaChhKXt9fSxkZWxlZ2F0ZVR5cGU6ImZvY3VzaW4ifSxibHVyOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM9PT1yYSgpJiZ0aGlzLmJsdXI/KHRoaXMuYmx1cigpLCExKTp2b2lkIDB9LGRlbGVnYXRlVHlwZToiZm9jdXNvdXQifSxjbGljazp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiBuLm5vZGVOYW1lKHRoaXMsImlucHV0IikmJiJjaGVja2JveCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2s/KHRoaXMuY2xpY2soKSwhMSk6dm9pZCAwfSxfZGVmYXVsdDpmdW5jdGlvbihhKXtyZXR1cm4gbi5ub2RlTmFtZShhLnRhcmdldCwiYSIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dm9pZCAwIT09YS5yZXN1bHQmJmEub3JpZ2luYWxFdmVudCYmKGEub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1hLnJlc3VsdCl9fX0sc2ltdWxhdGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW4uZXh0ZW5kKG5ldyBuLkV2ZW50LGMse3R5cGU6YSxpc1NpbXVsYXRlZDohMH0pO24uZXZlbnQudHJpZ2dlcihkLG51bGwsYiksZC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmYy5wcmV2ZW50RGVmYXVsdCgpfX0sbi5yZW1vdmVFdmVudD1kLnJlbW92ZUV2ZW50TGlzdGVuZXI/ZnVuY3Rpb24oYSxiLGMpe2EucmVtb3ZlRXZlbnRMaXN0ZW5lciYmYS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYyl9OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD0ib24iK2I7YS5kZXRhY2hFdmVudCYmKCJ1bmRlZmluZWQiPT10eXBlb2YgYVtkXSYmKGFbZF09bnVsbCksYS5kZXRhY2hFdmVudChkLGMpKX0sbi5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2Ygbi5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/cGE6cWEpOnRoaXMudHlwZT1hLGImJm4uZXh0ZW5kKHRoaXMsYiksdGhpcy50aW1lU3RhbXA9YSYmYS50aW1lU3RhbXB8fG4ubm93KCksdm9pZCh0aGlzW24uZXhwYW5kb109ITApKTpuZXcgbi5FdmVudChhLGIpfSxuLkV2ZW50LnByb3RvdHlwZT17Y29uc3RydWN0b3I6bi5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6cWEsaXNQcm9wYWdhdGlvblN0b3BwZWQ6cWEsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6cWEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGEsYSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOmEucmV0dXJuVmFsdWU9ITEpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wYSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmKGEuc3RvcFByb3BhZ2F0aW9uJiZhLnN0b3BQcm9wYWdhdGlvbigpLGEuY2FuY2VsQnViYmxlPSEwKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9cGEsYSYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24mJmEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LG4uZWFjaCh7bW91c2VlbnRlcjoibW91c2VvdmVyIixtb3VzZWxlYXZlOiJtb3VzZW91dCIscG9pbnRlcmVudGVyOiJwb2ludGVyb3ZlciIscG9pbnRlcmxlYXZlOiJwb2ludGVyb3V0In0sZnVuY3Rpb24oYSxiKXtuLmV2ZW50LnNwZWNpYWxbYV09e2RlbGVnYXRlVHlwZTpiLGJpbmRUeXBlOmIsaGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBjLGQ9dGhpcyxlPWEucmVsYXRlZFRhcmdldCxmPWEuaGFuZGxlT2JqO3JldHVybiBlJiYoZT09PWR8fG4uY29udGFpbnMoZCxlKSl8fChhLnR5cGU9Zi5vcmlnVHlwZSxjPWYuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksYS50eXBlPWIpLGN9fX0pLGwuc3VibWl0fHwobi5ldmVudC5zcGVjaWFsLnN1Ym1pdD17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gbi5ub2RlTmFtZSh0aGlzLCJmb3JtIik/ITE6dm9pZCBuLmV2ZW50LmFkZCh0aGlzLCJjbGljay5fc3VibWl0IGtleXByZXNzLl9zdWJtaXQiLGZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0LGM9bi5ub2RlTmFtZShiLCJpbnB1dCIpfHxuLm5vZGVOYW1lKGIsImJ1dHRvbiIpP24ucHJvcChiLCJmb3JtIik6dm9pZCAwO2MmJiFuLl9kYXRhKGMsInN1Ym1pdCIpJiYobi5ldmVudC5hZGQoYywic3VibWl0Ll9zdWJtaXQiLGZ1bmN0aW9uKGEpe2EuX3N1Ym1pdEJ1YmJsZT0hMH0pLG4uX2RhdGEoYywic3VibWl0IiwhMCkpfSl9LHBvc3REaXNwYXRjaDpmdW5jdGlvbihhKXthLl9zdWJtaXRCdWJibGUmJihkZWxldGUgYS5fc3VibWl0QnViYmxlLHRoaXMucGFyZW50Tm9kZSYmIWEuaXNUcmlnZ2VyJiZuLmV2ZW50LnNpbXVsYXRlKCJzdWJtaXQiLHRoaXMucGFyZW50Tm9kZSxhKSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIG4ubm9kZU5hbWUodGhpcywiZm9ybSIpPyExOnZvaWQgbi5ldmVudC5yZW1vdmUodGhpcywiLl9zdWJtaXQiKX19KSxsLmNoYW5nZXx8KG4uZXZlbnQuc3BlY2lhbC5jaGFuZ2U9e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIGthLnRlc3QodGhpcy5ub2RlTmFtZSk/KCJjaGVja2JveCIhPT10aGlzLnR5cGUmJiJyYWRpbyIhPT10aGlzLnR5cGV8fChuLmV2ZW50LmFkZCh0aGlzLCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlIixmdW5jdGlvbihhKXsiY2hlY2tlZCI9PT1hLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lJiYodGhpcy5fanVzdENoYW5nZWQ9ITApfSksbi5ldmVudC5hZGQodGhpcywiY2xpY2suX2NoYW5nZSIsZnVuY3Rpb24oYSl7dGhpcy5fanVzdENoYW5nZWQmJiFhLmlzVHJpZ2dlciYmKHRoaXMuX2p1c3RDaGFuZ2VkPSExKSxuLmV2ZW50LnNpbXVsYXRlKCJjaGFuZ2UiLHRoaXMsYSl9KSksITEpOnZvaWQgbi5ldmVudC5hZGQodGhpcywiYmVmb3JlYWN0aXZhdGUuX2NoYW5nZSIsZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQ7a2EudGVzdChiLm5vZGVOYW1lKSYmIW4uX2RhdGEoYiwiY2hhbmdlIikmJihuLmV2ZW50LmFkZChiLCJjaGFuZ2UuX2NoYW5nZSIsZnVuY3Rpb24oYSl7IXRoaXMucGFyZW50Tm9kZXx8YS5pc1NpbXVsYXRlZHx8YS5pc1RyaWdnZXJ8fG4uZXZlbnQuc2ltdWxhdGUoImNoYW5nZSIsdGhpcy5wYXJlbnROb2RlLGEpfSksbi5fZGF0YShiLCJjaGFuZ2UiLCEwKSl9KX0saGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0O3JldHVybiB0aGlzIT09Ynx8YS5pc1NpbXVsYXRlZHx8YS5pc1RyaWdnZXJ8fCJyYWRpbyIhPT1iLnR5cGUmJiJjaGVja2JveCIhPT1iLnR5cGU/YS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dm9pZCAwfSx0ZWFyZG93bjpmdW5jdGlvbigpe3JldHVybiBuLmV2ZW50LnJlbW92ZSh0aGlzLCIuX2NoYW5nZSIpLCFrYS50ZXN0KHRoaXMubm9kZU5hbWUpfX0pLGwuZm9jdXNpbnx8bi5lYWNoKHtmb2N1czoiZm9jdXNpbiIsYmx1cjoiZm9jdXNvdXQifSxmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe24uZXZlbnQuc2ltdWxhdGUoYixhLnRhcmdldCxuLmV2ZW50LmZpeChhKSl9O24uZXZlbnQuc3BlY2lhbFtiXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1uLl9kYXRhKGQsYik7ZXx8ZC5hZGRFdmVudExpc3RlbmVyKGEsYywhMCksbi5fZGF0YShkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPW4uX2RhdGEoZCxiKS0xO2U/bi5fZGF0YShkLGIsZSk6KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMsITApLG4uX3JlbW92ZURhdGEoZCxiKSl9fX0pLG4uZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gc2EodGhpcyxhLGIsYyxkKX0sb25lOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBzYSh0aGlzLGEsYixjLGQsMSl9LG9mZjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZTtpZihhJiZhLnByZXZlbnREZWZhdWx0JiZhLmhhbmRsZU9iailyZXR1cm4gZD1hLmhhbmRsZU9iaixuKGEuZGVsZWdhdGVUYXJnZXQpLm9mZihkLm5hbWVzcGFjZT9kLm9yaWdUeXBlKyIuIitkLm5hbWVzcGFjZTpkLm9yaWdUeXBlLGQuc2VsZWN0b3IsZC5oYW5kbGVyKSx0aGlzO2lmKCJvYmplY3QiPT10eXBlb2YgYSl7Zm9yKGUgaW4gYSl0aGlzLm9mZihlLGIsYVtlXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGIhPT0hMSYmImZ1bmN0aW9uIiE9dHlwZW9mIGJ8fChjPWIsYj12b2lkIDApLGM9PT0hMSYmKGM9cWEpLHRoaXMuZWFjaChmdW5jdGlvbigpe24uZXZlbnQucmVtb3ZlKHRoaXMsYSxjLGIpfSl9LHRyaWdnZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bi5ldmVudC50cmlnZ2VyKGEsYix0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXNbMF07cmV0dXJuIGM/bi5ldmVudC50cmlnZ2VyKGEsYixjLCEwKTp2b2lkIDB9fSk7dmFyIHRhPS8galF1ZXJ5XGQrPSIoPzpudWxsfFxkKykiL2csdWE9bmV3IFJlZ0V4cCgiPCg/OiIrYmErIilbXFxzLz5dIiwiaSIpLHZhPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzotXSspW14+XSopXC8+L2dpLHdhPS88c2NyaXB0fDxzdHlsZXw8bGluay9pLHhhPS9jaGVja2VkXHMqKD86W149XXw9XHMqLmNoZWNrZWQuKS9pLHlhPS9edHJ1ZVwvKC4qKS8semE9L15ccyo8ISg/OlxbQ0RBVEFcW3wtLSl8KD86XF1cXXwtLSk+XHMqJC9nLEFhPWNhKGQpLEJhPUFhLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudCgiZGl2IikpO2Z1bmN0aW9uIENhKGEsYil7cmV0dXJuIG4ubm9kZU5hbWUoYSwidGFibGUiKSYmbi5ub2RlTmFtZSgxMSE9PWIubm9kZVR5cGU/YjpiLmZpcnN0Q2hpbGQsInRyIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGJvZHkiKVswXXx8YS5hcHBlbmRDaGlsZChhLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGJvZHkiKSk6YX1mdW5jdGlvbiBEYShhKXtyZXR1cm4gYS50eXBlPShudWxsIT09bi5maW5kLmF0dHIoYSwidHlwZSIpKSsiLyIrYS50eXBlLGF9ZnVuY3Rpb24gRWEoYSl7dmFyIGI9eWEuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKCJ0eXBlIiksYX1mdW5jdGlvbiBGYShhLGIpe2lmKDE9PT1iLm5vZGVUeXBlJiZuLmhhc0RhdGEoYSkpe3ZhciBjLGQsZSxmPW4uX2RhdGEoYSksZz1uLl9kYXRhKGIsZiksaD1mLmV2ZW50cztpZihoKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGMgaW4gaClmb3IoZD0wLGU9aFtjXS5sZW5ndGg7ZT5kO2QrKyluLmV2ZW50LmFkZChiLGMsaFtjXVtkXSl9Zy5kYXRhJiYoZy5kYXRhPW4uZXh0ZW5kKHt9LGcuZGF0YSkpfX1mdW5jdGlvbiBHYShhLGIpe3ZhciBjLGQsZTtpZigxPT09Yi5ub2RlVHlwZSl7aWYoYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIWwubm9DbG9uZUV2ZW50JiZiW24uZXhwYW5kb10pe2U9bi5fZGF0YShiKTtmb3IoZCBpbiBlLmV2ZW50cyluLnJlbW92ZUV2ZW50KGIsZCxlLmhhbmRsZSk7Yi5yZW1vdmVBdHRyaWJ1dGUobi5leHBhbmRvKX0ic2NyaXB0Ij09PWMmJmIudGV4dCE9PWEudGV4dD8oRGEoYikudGV4dD1hLnRleHQsRWEoYikpOiJvYmplY3QiPT09Yz8oYi5wYXJlbnROb2RlJiYoYi5vdXRlckhUTUw9YS5vdXRlckhUTUwpLGwuaHRtbDVDbG9uZSYmYS5pbm5lckhUTUwmJiFuLnRyaW0oYi5pbm5lckhUTUwpJiYoYi5pbm5lckhUTUw9YS5pbm5lckhUTUwpKToiaW5wdXQiPT09YyYmWi50ZXN0KGEudHlwZSk/KGIuZGVmYXVsdENoZWNrZWQ9Yi5jaGVja2VkPWEuY2hlY2tlZCxiLnZhbHVlIT09YS52YWx1ZSYmKGIudmFsdWU9YS52YWx1ZSkpOiJvcHRpb24iPT09Yz9iLmRlZmF1bHRTZWxlY3RlZD1iLnNlbGVjdGVkPWEuZGVmYXVsdFNlbGVjdGVkOiJpbnB1dCIhPT1jJiYidGV4dGFyZWEiIT09Y3x8KGIuZGVmYXVsdFZhbHVlPWEuZGVmYXVsdFZhbHVlKX19ZnVuY3Rpb24gSGEoYSxiLGMsZCl7Yj1mLmFwcGx5KFtdLGIpO3ZhciBlLGcsaCxpLGosayxtPTAsbz1hLmxlbmd0aCxwPW8tMSxxPWJbMF0scj1uLmlzRnVuY3Rpb24ocSk7aWYocnx8bz4xJiYic3RyaW5nIj09dHlwZW9mIHEmJiFsLmNoZWNrQ2xvbmUmJnhhLnRlc3QocSkpcmV0dXJuIGEuZWFjaChmdW5jdGlvbihlKXt2YXIgZj1hLmVxKGUpO3ImJihiWzBdPXEuY2FsbCh0aGlzLGUsZi5odG1sKCkpKSxIYShmLGIsYyxkKX0pO2lmKG8mJihrPWphKGIsYVswXS5vd25lckRvY3VtZW50LCExLGEsZCksZT1rLmZpcnN0Q2hpbGQsMT09PWsuY2hpbGROb2Rlcy5sZW5ndGgmJihrPWUpLGV8fGQpKXtmb3IoaT1uLm1hcChlYShrLCJzY3JpcHQiKSxEYSksaD1pLmxlbmd0aDtvPm07bSsrKWc9ayxtIT09cCYmKGc9bi5jbG9uZShnLCEwLCEwKSxoJiZuLm1lcmdlKGksZWEoZywic2NyaXB0IikpKSxjLmNhbGwoYVttXSxnLG0pO2lmKGgpZm9yKGo9aVtpLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LG4ubWFwKGksRWEpLG09MDtoPm07bSsrKWc9aVttXSxfLnRlc3QoZy50eXBlfHwiIikmJiFuLl9kYXRhKGcsImdsb2JhbEV2YWwiKSYmbi5jb250YWlucyhqLGcpJiYoZy5zcmM/bi5fZXZhbFVybCYmbi5fZXZhbFVybChnLnNyYyk6bi5nbG9iYWxFdmFsKChnLnRleHR8fGcudGV4dENvbnRlbnR8fGcuaW5uZXJIVE1MfHwiIikucmVwbGFjZSh6YSwiIikpKTtrPWU9bnVsbH1yZXR1cm4gYX1mdW5jdGlvbiBJYShhLGIsYyl7Zm9yKHZhciBkLGU9Yj9uLmZpbHRlcihiLGEpOmEsZj0wO251bGwhPShkPWVbZl0pO2YrKyljfHwxIT09ZC5ub2RlVHlwZXx8bi5jbGVhbkRhdGEoZWEoZCkpLGQucGFyZW50Tm9kZSYmKGMmJm4uY29udGFpbnMoZC5vd25lckRvY3VtZW50LGQpJiZmYShlYShkLCJzY3JpcHQiKSksZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGQpKTtyZXR1cm4gYX1uLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHZhLCI8JDE+PC8kMj4iKX0sY2xvbmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaT1uLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZihsLmh0bWw1Q2xvbmV8fG4uaXNYTUxEb2MoYSl8fCF1YS50ZXN0KCI8IithLm5vZGVOYW1lKyI+Iik/Zj1hLmNsb25lTm9kZSghMCk6KEJhLmlubmVySFRNTD1hLm91dGVySFRNTCxCYS5yZW1vdmVDaGlsZChmPUJhLmZpcnN0Q2hpbGQpKSwhKGwubm9DbG9uZUV2ZW50JiZsLm5vQ2xvbmVDaGVja2VkfHwxIT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlfHxuLmlzWE1MRG9jKGEpKSlmb3IoZD1lYShmKSxoPWVhKGEpLGc9MDtudWxsIT0oZT1oW2ddKTsrK2cpZFtnXSYmR2EoZSxkW2ddKTtpZihiKWlmKGMpZm9yKGg9aHx8ZWEoYSksZD1kfHxlYShmKSxnPTA7bnVsbCE9KGU9aFtnXSk7ZysrKUZhKGUsZFtnXSk7ZWxzZSBGYShhLGYpO3JldHVybiBkPWVhKGYsInNjcmlwdCIpLGQubGVuZ3RoPjAmJmZhKGQsIWkmJmVhKGEsInNjcmlwdCIpKSxkPWg9ZT1udWxsLGZ9LGNsZWFuRGF0YTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZCxlLGYsZyxoPTAsaT1uLmV4cGFuZG8saj1uLmNhY2hlLGs9bC5hdHRyaWJ1dGVzLG09bi5ldmVudC5zcGVjaWFsO251bGwhPShkPWFbaF0pO2grKylpZigoYnx8TShkKSkmJihmPWRbaV0sZz1mJiZqW2ZdKSl7aWYoZy5ldmVudHMpZm9yKGUgaW4gZy5ldmVudHMpbVtlXT9uLmV2ZW50LnJlbW92ZShkLGUpOm4ucmVtb3ZlRXZlbnQoZCxlLGcuaGFuZGxlKTtqW2ZdJiYoZGVsZXRlIGpbZl0sa3x8InVuZGVmaW5lZCI9PXR5cGVvZiBkLnJlbW92ZUF0dHJpYnV0ZT9kW2ldPXZvaWQgMDpkLnJlbW92ZUF0dHJpYnV0ZShpKSxjLnB1c2goZikpfX19KSxuLmZuLmV4dGVuZCh7ZG9tTWFuaXA6SGEsZGV0YWNoOmZ1bmN0aW9uKGEpe3JldHVybiBJYSh0aGlzLGEsITApfSxyZW1vdmU6ZnVuY3Rpb24oYSl7cmV0dXJuIElhKHRoaXMsYSl9LHRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFkodGhpcyxmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YT9uLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmFwcGVuZCgodGhpc1swXSYmdGhpc1swXS5vd25lckRvY3VtZW50fHxkKS5jcmVhdGVUZXh0Tm9kZShhKSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEhhKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj1DYSh0aGlzLGEpO2IuYXBwZW5kQ2hpbGQoYSl9fSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSGEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPUNhKHRoaXMsYSk7Yi5pbnNlcnRCZWZvcmUoYSxiLmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gSGEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcyl9KX0sYWZ0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gSGEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcy5uZXh0U2libGluZyl9KX0sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wO251bGwhPShhPXRoaXNbYl0pO2IrKyl7MT09PWEubm9kZVR5cGUmJm4uY2xlYW5EYXRhKGVhKGEsITEpKTt3aGlsZShhLmZpcnN0Q2hpbGQpYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Eub3B0aW9ucyYmbi5ub2RlTmFtZShhLCJzZWxlY3QiKSYmKGEub3B0aW9ucy5sZW5ndGg9MCl9cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bnVsbD09YT8hMTphLGI9bnVsbD09Yj9hOmIsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gbi5jbG9uZSh0aGlzLGEsYil9KX0saHRtbDpmdW5jdGlvbihhKXtyZXR1cm4gWSh0aGlzLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXNbMF18fHt9LGM9MCxkPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWEpcmV0dXJuIDE9PT1iLm5vZGVUeXBlP2IuaW5uZXJIVE1MLnJlcGxhY2UodGEsIiIpOnZvaWQgMDtpZigic3RyaW5nIj09dHlwZW9mIGEmJiF3YS50ZXN0KGEpJiYobC5odG1sU2VyaWFsaXplfHwhdWEudGVzdChhKSkmJihsLmxlYWRpbmdXaGl0ZXNwYWNlfHwhYWEudGVzdChhKSkmJiFkYVsoJC5leGVjKGEpfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7YT1uLmh0bWxQcmVmaWx0ZXIoYSk7dHJ5e2Zvcig7ZD5jO2MrKyliPXRoaXNbY118fHt9LDE9PT1iLm5vZGVUeXBlJiYobi5jbGVhbkRhdGEoZWEoYiwhMSkpLGIuaW5uZXJIVE1MPWEpO2I9MH1jYXRjaChlKXt9fWImJnRoaXMuZW1wdHkoKS5hcHBlbmQoYSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgYT1bXTtyZXR1cm4gSGEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5wYXJlbnROb2RlO24uaW5BcnJheSh0aGlzLGEpPDAmJihuLmNsZWFuRGF0YShlYSh0aGlzKSksYyYmYy5yZXBsYWNlQ2hpbGQoYix0aGlzKSl9LGEpfX0pLG4uZWFjaCh7YXBwZW5kVG86ImFwcGVuZCIscHJlcGVuZFRvOiJwcmVwZW5kIixpbnNlcnRCZWZvcmU6ImJlZm9yZSIsaW5zZXJ0QWZ0ZXI6ImFmdGVyIixyZXBsYWNlQWxsOiJyZXBsYWNlV2l0aCJ9LGZ1bmN0aW9uKGEsYil7bi5mblthXT1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD0wLGU9W10sZj1uKGEpLGg9Zi5sZW5ndGgtMTtoPj1kO2QrKyljPWQ9PT1oP3RoaXM6dGhpcy5jbG9uZSghMCksbihmW2RdKVtiXShjKSxnLmFwcGx5KGUsYy5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBKYSxLYT17SFRNTDoiYmxvY2siLEJPRFk6ImJsb2NrIn07ZnVuY3Rpb24gTGEoYSxiKXt2YXIgYz1uKGIuY3JlYXRlRWxlbWVudChhKSkuYXBwZW5kVG8oYi5ib2R5KSxkPW4uY3NzKGNbMF0sImRpc3BsYXkiKTtyZXR1cm4gYy5kZXRhY2goKSxkfWZ1bmN0aW9uIE1hKGEpe3ZhciBiPWQsYz1LYVthXTtyZXR1cm4gY3x8KGM9TGEoYSxiKSwibm9uZSIhPT1jJiZjfHwoSmE9KEphfHxuKCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+IikpLmFwcGVuZFRvKGIuZG9jdW1lbnRFbGVtZW50KSxiPShKYVswXS5jb250ZW50V2luZG93fHxKYVswXS5jb250ZW50RG9jdW1lbnQpLmRvY3VtZW50LGIud3JpdGUoKSxiLmNsb3NlKCksYz1MYShhLGIpLEphLmRldGFjaCgpKSxLYVthXT1jKSxjfXZhciBOYT0vXm1hcmdpbi8sT2E9bmV3IFJlZ0V4cCgiXigiK1QrIikoPyFweClbYS16JV0rJCIsImkiKSxQYT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGc9e307Zm9yKGYgaW4gYilnW2ZdPWEuc3R5bGVbZl0sYS5zdHlsZVtmXT1iW2ZdO2U9Yy5hcHBseShhLGR8fFtdKTtmb3IoZiBpbiBiKWEuc3R5bGVbZl09Z1tmXTtyZXR1cm4gZX0sUWE9ZC5kb2N1bWVudEVsZW1lbnQ7IWZ1bmN0aW9uKCl7dmFyIGIsYyxlLGYsZyxoLGk9ZC5jcmVhdGVFbGVtZW50KCJkaXYiKSxqPWQuY3JlYXRlRWxlbWVudCgiZGl2Iik7aWYoai5zdHlsZSl7ai5zdHlsZS5jc3NUZXh0PSJmbG9hdDpsZWZ0O29wYWNpdHk6LjUiLGwub3BhY2l0eT0iMC41Ij09PWouc3R5bGUub3BhY2l0eSxsLmNzc0Zsb2F0PSEhai5zdHlsZS5jc3NGbG9hdCxqLnN0eWxlLmJhY2tncm91bmRDbGlwPSJjb250ZW50LWJveCIsai5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPSIiLGwuY2xlYXJDbG9uZVN0eWxlPSJjb250ZW50LWJveCI9PT1qLnN0eWxlLmJhY2tncm91bmRDbGlwLGk9ZC5jcmVhdGVFbGVtZW50KCJkaXYiKSxpLnN0eWxlLmNzc1RleHQ9ImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7cGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlIixqLmlubmVySFRNTD0iIixpLmFwcGVuZENoaWxkKGopLGwuYm94U2l6aW5nPSIiPT09ai5zdHlsZS5ib3hTaXppbmd8fCIiPT09ai5zdHlsZS5Nb3pCb3hTaXppbmd8fCIiPT09ai5zdHlsZS5XZWJraXRCb3hTaXppbmcsbi5leHRlbmQobCx7cmVsaWFibGVIaWRkZW5PZmZzZXRzOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PWImJmsoKSxmfSxib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT1iJiZrKCksZX0scGl4ZWxNYXJnaW5SaWdodDpmdW5jdGlvbigpe3JldHVybiBudWxsPT1iJiZrKCksY30scGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBudWxsPT1iJiZrKCksYn0scmVsaWFibGVNYXJnaW5SaWdodDpmdW5jdGlvbigpe3JldHVybiBudWxsPT1iJiZrKCksZ30scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PWImJmsoKSxofX0pO2Z1bmN0aW9uIGsoKXt2YXIgayxsLG09ZC5kb2N1bWVudEVsZW1lbnQ7bS5hcHBlbmRDaGlsZChpKSxqLnN0eWxlLmNzc1RleHQ9Ii13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7dG9wOjElO3dpZHRoOjUwJSIsYj1lPWg9ITEsYz1nPSEwLGEuZ2V0Q29tcHV0ZWRTdHlsZSYmKGw9YS5nZXRDb21wdXRlZFN0eWxlKGopLGI9IjElIiE9PShsfHx7fSkudG9wLGg9IjJweCI9PT0obHx8e30pLm1hcmdpbkxlZnQsZT0iNHB4Ij09PShsfHx7d2lkdGg6IjRweCJ9KS53aWR0aCxqLnN0eWxlLm1hcmdpblJpZ2h0PSI1MCUiLGM9IjRweCI9PT0obHx8e21hcmdpblJpZ2h0OiI0cHgifSkubWFyZ2luUmlnaHQsaz1qLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudCgiZGl2IikpLGsuc3R5bGUuY3NzVGV4dD1qLnN0eWxlLmNzc1RleHQ9Ii13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MCIsay5zdHlsZS5tYXJnaW5SaWdodD1rLnN0eWxlLndpZHRoPSIwIixqLnN0eWxlLndpZHRoPSIxcHgiLGc9IXBhcnNlRmxvYXQoKGEuZ2V0Q29tcHV0ZWRTdHlsZShrKXx8e30pLm1hcmdpblJpZ2h0KSxqLnJlbW92ZUNoaWxkKGspKSxqLnN0eWxlLmRpc3BsYXk9Im5vbmUiLGY9MD09PWouZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgsZiYmKGouc3R5bGUuZGlzcGxheT0iIixqLmlubmVySFRNTD0iPHRhYmxlPjx0cj48dGQ+PC90ZD48dGQ+dDwvdGQ+PC90cj48L3RhYmxlPiIsai5jaGlsZE5vZGVzWzBdLnN0eWxlLmJvcmRlckNvbGxhcHNlPSJzZXBhcmF0ZSIsaz1qLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0ZCIpLGtbMF0uc3R5bGUuY3NzVGV4dD0ibWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowO2Rpc3BsYXk6bm9uZSIsZj0wPT09a1swXS5vZmZzZXRIZWlnaHQsZiYmKGtbMF0uc3R5bGUuZGlzcGxheT0iIixrWzFdLnN0eWxlLmRpc3BsYXk9Im5vbmUiLGY9MD09PWtbMF0ub2Zmc2V0SGVpZ2h0KSksbS5yZW1vdmVDaGlsZChpKX19fSgpO3ZhciBSYSxTYSxUYT0vXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87YS5nZXRDb21wdXRlZFN0eWxlPyhSYT1mdW5jdGlvbihiKXt2YXIgYz1iLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIGMmJmMub3BlbmVyfHwoYz1hKSxjLmdldENvbXB1dGVkU3R5bGUoYil9LFNhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuc3R5bGU7cmV0dXJuIGM9Y3x8UmEoYSksZz1jP2MuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXTp2b2lkIDAsIiIhPT1nJiZ2b2lkIDAhPT1nfHxuLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKXx8KGc9bi5zdHlsZShhLGIpKSxjJiYhbC5waXhlbE1hcmdpblJpZ2h0KCkmJk9hLnRlc3QoZykmJk5hLnRlc3QoYikmJihkPWgud2lkdGgsZT1oLm1pbldpZHRoLGY9aC5tYXhXaWR0aCxoLm1pbldpZHRoPWgubWF4V2lkdGg9aC53aWR0aD1nLGc9Yy53aWR0aCxoLndpZHRoPWQsaC5taW5XaWR0aD1lLGgubWF4V2lkdGg9Ziksdm9pZCAwPT09Zz9nOmcrIiJ9KTpRYS5jdXJyZW50U3R5bGUmJihSYT1mdW5jdGlvbihhKXtyZXR1cm4gYS5jdXJyZW50U3R5bGV9LFNhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuc3R5bGU7cmV0dXJuIGM9Y3x8UmEoYSksZz1jP2NbYl06dm9pZCAwLG51bGw9PWcmJmgmJmhbYl0mJihnPWhbYl0pLE9hLnRlc3QoZykmJiFUYS50ZXN0KGIpJiYoZD1oLmxlZnQsZT1hLnJ1bnRpbWVTdHlsZSxmPWUmJmUubGVmdCxmJiYoZS5sZWZ0PWEuY3VycmVudFN0eWxlLmxlZnQpLGgubGVmdD0iZm9udFNpemUiPT09Yj8iMWVtIjpnLGc9aC5waXhlbExlZnQrInB4IixoLmxlZnQ9ZCxmJiYoZS5sZWZ0PWYpKSx2b2lkIDA9PT1nP2c6ZysiInx8ImF1dG8ifSk7ZnVuY3Rpb24gVWEoYSxiKXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEoKT92b2lkIGRlbGV0ZSB0aGlzLmdldDoodGhpcy5nZXQ9YikuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19dmFyIFZhPS9hbHBoYVwoW14pXSpcKS9pLFdhPS9vcGFjaXR5XHMqPVxzKihbXildKikvaSxYYT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sWWE9bmV3IFJlZ0V4cCgiXigiK1QrIikoLiopJCIsImkiKSxaYT17cG9zaXRpb246ImFic29sdXRlIix2aXNpYmlsaXR5OiJoaWRkZW4iLGRpc3BsYXk6ImJsb2NrIn0sJGE9e2xldHRlclNwYWNpbmc6IjAiLGZvbnRXZWlnaHQ6IjQwMCJ9LF9hPVsiV2Via2l0IiwiTyIsIk1veiIsIm1zIl0sYWI9ZC5jcmVhdGVFbGVtZW50KCJkaXYiKS5zdHlsZTtmdW5jdGlvbiBiYihhKXtpZihhIGluIGFiKXJldHVybiBhO3ZhciBiPWEuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxjPV9hLmxlbmd0aDt3aGlsZShjLS0paWYoYT1fYVtjXStiLGEgaW4gYWIpcmV0dXJuIGF9ZnVuY3Rpb24gY2IoYSxiKXtmb3IodmFyIGMsZCxlLGY9W10sZz0wLGg9YS5sZW5ndGg7aD5nO2crKylkPWFbZ10sZC5zdHlsZSYmKGZbZ109bi5fZGF0YShkLCJvbGRkaXNwbGF5IiksYz1kLnN0eWxlLmRpc3BsYXksYj8oZltnXXx8Im5vbmUiIT09Y3x8KGQuc3R5bGUuZGlzcGxheT0iIiksIiI9PT1kLnN0eWxlLmRpc3BsYXkmJlcoZCkmJihmW2ddPW4uX2RhdGEoZCwib2xkZGlzcGxheSIsTWEoZC5ub2RlTmFtZSkpKSk6KGU9VyhkKSwoYyYmIm5vbmUiIT09Y3x8IWUpJiZuLl9kYXRhKGQsIm9sZGRpc3BsYXkiLGU/YzpuLmNzcyhkLCJkaXNwbGF5IikpKSk7Zm9yKGc9MDtoPmc7ZysrKWQ9YVtnXSxkLnN0eWxlJiYoYiYmIm5vbmUiIT09ZC5zdHlsZS5kaXNwbGF5JiYiIiE9PWQuc3R5bGUuZGlzcGxheXx8KGQuc3R5bGUuZGlzcGxheT1iP2ZbZ118fCIiOiJub25lIikpO3JldHVybiBhfWZ1bmN0aW9uIGRiKGEsYixjKXt2YXIgZD1ZYS5leGVjKGIpO3JldHVybiBkP01hdGgubWF4KDAsZFsxXS0oY3x8MCkpKyhkWzJdfHwicHgiKTpifWZ1bmN0aW9uIGViKGEsYixjLGQsZSl7Zm9yKHZhciBmPWM9PT0oZD8iYm9yZGVyIjoiY29udGVudCIpPzQ6IndpZHRoIj09PWI/MTowLGc9MDs0PmY7Zis9MikibWFyZ2luIj09PWMmJihnKz1uLmNzcyhhLGMrVltmXSwhMCxlKSksZD8oImNvbnRlbnQiPT09YyYmKGctPW4uY3NzKGEsInBhZGRpbmciK1ZbZl0sITAsZSkpLCJtYXJnaW4iIT09YyYmKGctPW4uY3NzKGEsImJvcmRlciIrVltmXSsiV2lkdGgiLCEwLGUpKSk6KGcrPW4uY3NzKGEsInBhZGRpbmciK1ZbZl0sITAsZSksInBhZGRpbmciIT09YyYmKGcrPW4uY3NzKGEsImJvcmRlciIrVltmXSsiV2lkdGgiLCEwLGUpKSk7cmV0dXJuIGd9ZnVuY3Rpb24gZmIoYSxiLGMpe3ZhciBkPSEwLGU9IndpZHRoIj09PWI/YS5vZmZzZXRXaWR0aDphLm9mZnNldEhlaWdodCxmPVJhKGEpLGc9bC5ib3hTaXppbmcmJiJib3JkZXItYm94Ij09PW4uY3NzKGEsImJveFNpemluZyIsITEsZik7aWYoMD49ZXx8bnVsbD09ZSl7aWYoZT1TYShhLGIsZiksKDA+ZXx8bnVsbD09ZSkmJihlPWEuc3R5bGVbYl0pLE9hLnRlc3QoZSkpcmV0dXJuIGU7ZD1nJiYobC5ib3hTaXppbmdSZWxpYWJsZSgpfHxlPT09YS5zdHlsZVtiXSksZT1wYXJzZUZsb2F0KGUpfHwwfXJldHVybiBlK2ViKGEsYixjfHwoZz8iYm9yZGVyIjoiY29udGVudCIpLGQsZikrInB4In1uLmV4dGVuZCh7Y3NzSG9va3M6e29wYWNpdHk6e2dldDpmdW5jdGlvbihhLGIpe2lmKGIpe3ZhciBjPVNhKGEsIm9wYWNpdHkiKTtyZXR1cm4iIj09PWM/IjEiOmN9fX19LGNzc051bWJlcjp7YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsY29sdW1uQ291bnQ6ITAsZmlsbE9wYWNpdHk6ITAsZmxleEdyb3c6ITAsZmxleFNocmluazohMCxmb250V2VpZ2h0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6eyJmbG9hdCI6bC5jc3NGbG9hdD8iY3NzRmxvYXQiOiJzdHlsZUZsb2F0In0sc3R5bGU6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoYSYmMyE9PWEubm9kZVR5cGUmJjghPT1hLm5vZGVUeXBlJiZhLnN0eWxlKXt2YXIgZSxmLGcsaD1uLmNhbWVsQ2FzZShiKSxpPWEuc3R5bGU7aWYoYj1uLmNzc1Byb3BzW2hdfHwobi5jc3NQcm9wc1toXT1iYihoKXx8aCksZz1uLmNzc0hvb2tzW2JdfHxuLmNzc0hvb2tzW2hdLHZvaWQgMD09PWMpcmV0dXJuIGcmJiJnZXQiaW4gZyYmdm9pZCAwIT09KGU9Zy5nZXQoYSwhMSxkKSk/ZTppW2JdO2lmKGY9dHlwZW9mIGMsInN0cmluZyI9PT1mJiYoZT1VLmV4ZWMoYykpJiZlWzFdJiYoYz1YKGEsYixlKSxmPSJudW1iZXIiKSxudWxsIT1jJiZjPT09YyYmKCJudW1iZXIiPT09ZiYmKGMrPWUmJmVbM118fChuLmNzc051bWJlcltoXT8iIjoicHgiKSksbC5jbGVhckNsb25lU3R5bGV8fCIiIT09Y3x8MCE9PWIuaW5kZXhPZigiYmFja2dyb3VuZCIpfHwoaVtiXT0iaW5oZXJpdCIpLCEoZyYmInNldCJpbiBnJiZ2b2lkIDA9PT0oYz1nLnNldChhLGMsZCkpKSkpdHJ5e2lbYl09Y31jYXRjaChqKXt9fX0sY3NzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZyxoPW4uY2FtZWxDYXNlKGIpO3JldHVybiBiPW4uY3NzUHJvcHNbaF18fChuLmNzc1Byb3BzW2hdPWJiKGgpfHxoKSxnPW4uY3NzSG9va3NbYl18fG4uY3NzSG9va3NbaF0sZyYmImdldCJpbiBnJiYoZj1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1mJiYoZj1TYShhLGIsZCkpLCJub3JtYWwiPT09ZiYmYiBpbiAkYSYmKGY9JGFbYl0pLCIiPT09Y3x8Yz8oZT1wYXJzZUZsb2F0KGYpLGM9PT0hMHx8aXNGaW5pdGUoZSk/ZXx8MDpmKTpmfX0pLG4uZWFjaChbImhlaWdodCIsIndpZHRoIl0sZnVuY3Rpb24oYSxiKXtuLmNzc0hvb2tzW2JdPXtnZXQ6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBjP1hhLnRlc3Qobi5jc3MoYSwiZGlzcGxheSIpKSYmMD09PWEub2Zmc2V0V2lkdGg/UGEoYSxaYSxmdW5jdGlvbigpe3JldHVybiBmYihhLGIsZCl9KTpmYihhLGIsZCk6dm9pZCAwfSxzZXQ6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPWQmJlJhKGEpO3JldHVybiBkYihhLGMsZD9lYihhLGIsZCxsLmJveFNpemluZyYmImJvcmRlci1ib3giPT09bi5jc3MoYSwiYm94U2l6aW5nIiwhMSxlKSxlKTowKX19fSksbC5vcGFjaXR5fHwobi5jc3NIb29rcy5vcGFjaXR5PXtnZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gV2EudGVzdCgoYiYmYS5jdXJyZW50U3R5bGU/YS5jdXJyZW50U3R5bGUuZmlsdGVyOmEuc3R5bGUuZmlsdGVyKXx8IiIpPy4wMSpwYXJzZUZsb2F0KFJlZ0V4cC4kMSkrIiI6Yj8iMSI6IiJ9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3R5bGUsZD1hLmN1cnJlbnRTdHlsZSxlPW4uaXNOdW1lcmljKGIpPyJhbHBoYShvcGFjaXR5PSIrMTAwKmIrIikiOiIiLGY9ZCYmZC5maWx0ZXJ8fGMuZmlsdGVyfHwiIjtjLnpvb209MSwoYj49MXx8IiI9PT1iKSYmIiI9PT1uLnRyaW0oZi5yZXBsYWNlKFZhLCIiKSkmJmMucmVtb3ZlQXR0cmlidXRlJiYoYy5yZW1vdmVBdHRyaWJ1dGUoImZpbHRlciIpLCIiPT09Ynx8ZCYmIWQuZmlsdGVyKXx8KGMuZmlsdGVyPVZhLnRlc3QoZik/Zi5yZXBsYWNlKFZhLGUpOmYrIiAiK2UpfX0pLG4uY3NzSG9va3MubWFyZ2luUmlnaHQ9VWEobC5yZWxpYWJsZU1hcmdpblJpZ2h0LGZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/UGEoYSx7ZGlzcGxheToiaW5saW5lLWJsb2NrIn0sU2EsW2EsIm1hcmdpblJpZ2h0Il0pOnZvaWQgMH0pLG4uY3NzSG9va3MubWFyZ2luTGVmdD1VYShsLnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihhLGIpe3JldHVybiBiPyhwYXJzZUZsb2F0KFNhKGEsIm1hcmdpbkxlZnQiKSl8fChuLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKT9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtUGEoYSx7Cm1hcmdpbkxlZnQ6MH0sZnVuY3Rpb24oKXtyZXR1cm4gYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0fSk6MCkpKyJweCI6dm9pZCAwfSksbi5lYWNoKHttYXJnaW46IiIscGFkZGluZzoiIixib3JkZXI6IldpZHRoIn0sZnVuY3Rpb24oYSxiKXtuLmNzc0hvb2tzW2ErYl09e2V4cGFuZDpmdW5jdGlvbihjKXtmb3IodmFyIGQ9MCxlPXt9LGY9InN0cmluZyI9PXR5cGVvZiBjP2Muc3BsaXQoIiAiKTpbY107ND5kO2QrKyllW2ErVltkXStiXT1mW2RdfHxmW2QtMl18fGZbMF07cmV0dXJuIGV9fSxOYS50ZXN0KGEpfHwobi5jc3NIb29rc1thK2JdLnNldD1kYil9KSxuLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFkodGhpcyxmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPXt9LGc9MDtpZihuLmlzQXJyYXkoYikpe2ZvcihkPVJhKGEpLGU9Yi5sZW5ndGg7ZT5nO2crKylmW2JbZ11dPW4uY3NzKGEsYltnXSwhMSxkKTtyZXR1cm4gZn1yZXR1cm4gdm9pZCAwIT09Yz9uLnN0eWxlKGEsYixjKTpuLmNzcyhhLGIpfSxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0sc2hvdzpmdW5jdGlvbigpe3JldHVybiBjYih0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBjYih0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3JldHVybiJib29sZWFuIj09dHlwZW9mIGE/YT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtXKHRoaXMpP24odGhpcykuc2hvdygpOm4odGhpcykuaGlkZSgpfSl9fSk7ZnVuY3Rpb24gZ2IoYSxiLGMsZCxlKXtyZXR1cm4gbmV3IGdiLnByb3RvdHlwZS5pbml0KGEsYixjLGQsZSl9bi5Ud2Vlbj1nYixnYi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmdiLGluaXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuZWxlbT1hLHRoaXMucHJvcD1jLHRoaXMuZWFzaW5nPWV8fG4uZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz1iLHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1kLHRoaXMudW5pdD1mfHwobi5jc3NOdW1iZXJbY10/IiI6InB4Iil9LGN1cjpmdW5jdGlvbigpe3ZhciBhPWdiLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBhJiZhLmdldD9hLmdldCh0aGlzKTpnYi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oYSl7dmFyIGIsYz1nYi5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uP3RoaXMucG9zPWI9bi5lYXNpbmdbdGhpcy5lYXNpbmddKGEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmEsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6dGhpcy5wb3M9Yj1hLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSpiK3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLGMmJmMuc2V0P2Muc2V0KHRoaXMpOmdiLnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319LGdiLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZT1nYi5wcm90b3R5cGUsZ2IucHJvcEhvb2tzPXtfZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiAxIT09YS5lbGVtLm5vZGVUeXBlfHxudWxsIT1hLmVsZW1bYS5wcm9wXSYmbnVsbD09YS5lbGVtLnN0eWxlW2EucHJvcF0/YS5lbGVtW2EucHJvcF06KGI9bi5jc3MoYS5lbGVtLGEucHJvcCwiIiksYiYmImF1dG8iIT09Yj9iOjApfSxzZXQ6ZnVuY3Rpb24oYSl7bi5meC5zdGVwW2EucHJvcF0/bi5meC5zdGVwW2EucHJvcF0oYSk6MSE9PWEuZWxlbS5ub2RlVHlwZXx8bnVsbD09YS5lbGVtLnN0eWxlW24uY3NzUHJvcHNbYS5wcm9wXV0mJiFuLmNzc0hvb2tzW2EucHJvcF0/YS5lbGVtW2EucHJvcF09YS5ub3c6bi5zdHlsZShhLmVsZW0sYS5wcm9wLGEubm93K2EudW5pdCl9fX0sZ2IucHJvcEhvb2tzLnNjcm9sbFRvcD1nYi5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGEpe2EuZWxlbS5ub2RlVHlwZSYmYS5lbGVtLnBhcmVudE5vZGUmJihhLmVsZW1bYS5wcm9wXT1hLm5vdyl9fSxuLmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxzd2luZzpmdW5jdGlvbihhKXtyZXR1cm4uNS1NYXRoLmNvcyhhKk1hdGguUEkpLzJ9LF9kZWZhdWx0OiJzd2luZyJ9LG4uZng9Z2IucHJvdG90eXBlLmluaXQsbi5meC5zdGVwPXt9O3ZhciBoYixpYixqYj0vXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sa2I9L3F1ZXVlSG9va3MkLztmdW5jdGlvbiBsYigpe3JldHVybiBhLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtoYj12b2lkIDB9KSxoYj1uLm5vdygpfWZ1bmN0aW9uIG1iKGEsYil7dmFyIGMsZD17aGVpZ2h0OmF9LGU9MDtmb3IoYj1iPzE6MDs0PmU7ZSs9Mi1iKWM9VltlXSxkWyJtYXJnaW4iK2NdPWRbInBhZGRpbmciK2NdPWE7cmV0dXJuIGImJihkLm9wYWNpdHk9ZC53aWR0aD1hKSxkfWZ1bmN0aW9uIG5iKGEsYixjKXtmb3IodmFyIGQsZT0ocWIudHdlZW5lcnNbYl18fFtdKS5jb25jYXQocWIudHdlZW5lcnNbIioiXSksZj0wLGc9ZS5sZW5ndGg7Zz5mO2YrKylpZihkPWVbZl0uY2FsbChjLGIsYSkpcmV0dXJuIGR9ZnVuY3Rpb24gb2IoYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGssbT10aGlzLG89e30scD1hLnN0eWxlLHE9YS5ub2RlVHlwZSYmVyhhKSxyPW4uX2RhdGEoYSwiZnhzaG93Iik7Yy5xdWV1ZXx8KGg9bi5fcXVldWVIb29rcyhhLCJmeCIpLG51bGw9PWgudW5xdWV1ZWQmJihoLnVucXVldWVkPTAsaT1oLmVtcHR5LmZpcmUsaC5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7aC51bnF1ZXVlZHx8aSgpfSksaC51bnF1ZXVlZCsrLG0uYWx3YXlzKGZ1bmN0aW9uKCl7bS5hbHdheXMoZnVuY3Rpb24oKXtoLnVucXVldWVkLS0sbi5xdWV1ZShhLCJmeCIpLmxlbmd0aHx8aC5lbXB0eS5maXJlKCl9KX0pKSwxPT09YS5ub2RlVHlwZSYmKCJoZWlnaHQiaW4gYnx8IndpZHRoImluIGIpJiYoYy5vdmVyZmxvdz1bcC5vdmVyZmxvdyxwLm92ZXJmbG93WCxwLm92ZXJmbG93WV0saj1uLmNzcyhhLCJkaXNwbGF5Iiksaz0ibm9uZSI9PT1qP24uX2RhdGEoYSwib2xkZGlzcGxheSIpfHxNYShhLm5vZGVOYW1lKTpqLCJpbmxpbmUiPT09ayYmIm5vbmUiPT09bi5jc3MoYSwiZmxvYXQiKSYmKGwuaW5saW5lQmxvY2tOZWVkc0xheW91dCYmImlubGluZSIhPT1NYShhLm5vZGVOYW1lKT9wLnpvb209MTpwLmRpc3BsYXk9ImlubGluZS1ibG9jayIpKSxjLm92ZXJmbG93JiYocC5vdmVyZmxvdz0iaGlkZGVuIixsLnNocmlua1dyYXBCbG9ja3MoKXx8bS5hbHdheXMoZnVuY3Rpb24oKXtwLm92ZXJmbG93PWMub3ZlcmZsb3dbMF0scC5vdmVyZmxvd1g9Yy5vdmVyZmxvd1sxXSxwLm92ZXJmbG93WT1jLm92ZXJmbG93WzJdfSkpO2ZvcihkIGluIGIpaWYoZT1iW2RdLGpiLmV4ZWMoZSkpe2lmKGRlbGV0ZSBiW2RdLGY9Znx8InRvZ2dsZSI9PT1lLGU9PT0ocT8iaGlkZSI6InNob3ciKSl7aWYoInNob3ciIT09ZXx8IXJ8fHZvaWQgMD09PXJbZF0pY29udGludWU7cT0hMH1vW2RdPXImJnJbZF18fG4uc3R5bGUoYSxkKX1lbHNlIGo9dm9pZCAwO2lmKG4uaXNFbXB0eU9iamVjdChvKSkiaW5saW5lIj09PSgibm9uZSI9PT1qP01hKGEubm9kZU5hbWUpOmopJiYocC5kaXNwbGF5PWopO2Vsc2V7cj8iaGlkZGVuImluIHImJihxPXIuaGlkZGVuKTpyPW4uX2RhdGEoYSwiZnhzaG93Iix7fSksZiYmKHIuaGlkZGVuPSFxKSxxP24oYSkuc2hvdygpOm0uZG9uZShmdW5jdGlvbigpe24oYSkuaGlkZSgpfSksbS5kb25lKGZ1bmN0aW9uKCl7dmFyIGI7bi5fcmVtb3ZlRGF0YShhLCJmeHNob3ciKTtmb3IoYiBpbiBvKW4uc3R5bGUoYSxiLG9bYl0pfSk7Zm9yKGQgaW4gbylnPW5iKHE/cltkXTowLGQsbSksZCBpbiByfHwocltkXT1nLnN0YXJ0LHEmJihnLmVuZD1nLnN0YXJ0LGcuc3RhcnQ9IndpZHRoIj09PWR8fCJoZWlnaHQiPT09ZD8xOjApKX19ZnVuY3Rpb24gcGIoYSxiKXt2YXIgYyxkLGUsZixnO2ZvcihjIGluIGEpaWYoZD1uLmNhbWVsQ2FzZShjKSxlPWJbZF0sZj1hW2NdLG4uaXNBcnJheShmKSYmKGU9ZlsxXSxmPWFbY109ZlswXSksYyE9PWQmJihhW2RdPWYsZGVsZXRlIGFbY10pLGc9bi5jc3NIb29rc1tkXSxnJiYiZXhwYW5kImluIGcpe2Y9Zy5leHBhbmQoZiksZGVsZXRlIGFbZF07Zm9yKGMgaW4gZiljIGluIGF8fChhW2NdPWZbY10sYltjXT1lKX1lbHNlIGJbZF09ZX1mdW5jdGlvbiBxYihhLGIsYyl7dmFyIGQsZSxmPTAsZz1xYi5wcmVmaWx0ZXJzLmxlbmd0aCxoPW4uRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgaS5lbGVtfSksaT1mdW5jdGlvbigpe2lmKGUpcmV0dXJuITE7Zm9yKHZhciBiPWhifHxsYigpLGM9TWF0aC5tYXgoMCxqLnN0YXJ0VGltZStqLmR1cmF0aW9uLWIpLGQ9Yy9qLmR1cmF0aW9ufHwwLGY9MS1kLGc9MCxpPWoudHdlZW5zLmxlbmd0aDtpPmc7ZysrKWoudHdlZW5zW2ddLnJ1bihmKTtyZXR1cm4gaC5ub3RpZnlXaXRoKGEsW2osZixjXSksMT5mJiZpP2M6KGgucmVzb2x2ZVdpdGgoYSxbal0pLCExKX0saj1oLnByb21pc2Uoe2VsZW06YSxwcm9wczpuLmV4dGVuZCh7fSxiKSxvcHRzOm4uZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9LGVhc2luZzpuLmVhc2luZy5fZGVmYXVsdH0sYyksb3JpZ2luYWxQcm9wZXJ0aWVzOmIsb3JpZ2luYWxPcHRpb25zOmMsc3RhcnRUaW1lOmhifHxsYigpLGR1cmF0aW9uOmMuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9bi5Ud2VlbihhLGoub3B0cyxiLGMsai5vcHRzLnNwZWNpYWxFYXNpbmdbYl18fGoub3B0cy5lYXNpbmcpO3JldHVybiBqLnR3ZWVucy5wdXNoKGQpLGR9LHN0b3A6ZnVuY3Rpb24oYil7dmFyIGM9MCxkPWI/ai50d2VlbnMubGVuZ3RoOjA7aWYoZSlyZXR1cm4gdGhpcztmb3IoZT0hMDtkPmM7YysrKWoudHdlZW5zW2NdLnJ1bigxKTtyZXR1cm4gYj8oaC5ub3RpZnlXaXRoKGEsW2osMSwwXSksaC5yZXNvbHZlV2l0aChhLFtqLGJdKSk6aC5yZWplY3RXaXRoKGEsW2osYl0pLHRoaXN9fSksaz1qLnByb3BzO2ZvcihwYihrLGoub3B0cy5zcGVjaWFsRWFzaW5nKTtnPmY7ZisrKWlmKGQ9cWIucHJlZmlsdGVyc1tmXS5jYWxsKGosYSxrLGoub3B0cykpcmV0dXJuIG4uaXNGdW5jdGlvbihkLnN0b3ApJiYobi5fcXVldWVIb29rcyhqLmVsZW0sai5vcHRzLnF1ZXVlKS5zdG9wPW4ucHJveHkoZC5zdG9wLGQpKSxkO3JldHVybiBuLm1hcChrLG5iLGopLG4uaXNGdW5jdGlvbihqLm9wdHMuc3RhcnQpJiZqLm9wdHMuc3RhcnQuY2FsbChhLGopLG4uZngudGltZXIobi5leHRlbmQoaSx7ZWxlbTphLGFuaW06aixxdWV1ZTpqLm9wdHMucXVldWV9KSksai5wcm9ncmVzcyhqLm9wdHMucHJvZ3Jlc3MpLmRvbmUoai5vcHRzLmRvbmUsai5vcHRzLmNvbXBsZXRlKS5mYWlsKGoub3B0cy5mYWlsKS5hbHdheXMoai5vcHRzLmFsd2F5cyl9bi5BbmltYXRpb249bi5leHRlbmQocWIse3R3ZWVuZXJzOnsiKiI6W2Z1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jcmVhdGVUd2VlbihhLGIpO3JldHVybiBYKGMuZWxlbSxhLFUuZXhlYyhiKSxjKSxjfV19LHR3ZWVuZXI6ZnVuY3Rpb24oYSxiKXtuLmlzRnVuY3Rpb24oYSk/KGI9YSxhPVsiKiJdKTphPWEubWF0Y2goRyk7Zm9yKHZhciBjLGQ9MCxlPWEubGVuZ3RoO2U+ZDtkKyspYz1hW2RdLHFiLnR3ZWVuZXJzW2NdPXFiLnR3ZWVuZXJzW2NdfHxbXSxxYi50d2VlbmVyc1tjXS51bnNoaWZ0KGIpfSxwcmVmaWx0ZXJzOltvYl0scHJlZmlsdGVyOmZ1bmN0aW9uKGEsYil7Yj9xYi5wcmVmaWx0ZXJzLnVuc2hpZnQoYSk6cWIucHJlZmlsdGVycy5wdXNoKGEpfX0pLG4uc3BlZWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEmJiJvYmplY3QiPT10eXBlb2YgYT9uLmV4dGVuZCh7fSxhKTp7Y29tcGxldGU6Y3x8IWMmJmJ8fG4uaXNGdW5jdGlvbihhKSYmYSxkdXJhdGlvbjphLGVhc2luZzpjJiZifHxiJiYhbi5pc0Z1bmN0aW9uKGIpJiZifTtyZXR1cm4gZC5kdXJhdGlvbj1uLmZ4Lm9mZj8wOiJudW1iZXIiPT10eXBlb2YgZC5kdXJhdGlvbj9kLmR1cmF0aW9uOmQuZHVyYXRpb24gaW4gbi5meC5zcGVlZHM/bi5meC5zcGVlZHNbZC5kdXJhdGlvbl06bi5meC5zcGVlZHMuX2RlZmF1bHQsbnVsbCE9ZC5xdWV1ZSYmZC5xdWV1ZSE9PSEwfHwoZC5xdWV1ZT0iZngiKSxkLm9sZD1kLmNvbXBsZXRlLGQuY29tcGxldGU9ZnVuY3Rpb24oKXtuLmlzRnVuY3Rpb24oZC5vbGQpJiZkLm9sZC5jYWxsKHRoaXMpLGQucXVldWUmJm4uZGVxdWV1ZSh0aGlzLGQucXVldWUpfSxkfSxuLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmZpbHRlcihXKS5jc3MoIm9wYWNpdHkiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OmJ9LGEsYyxkKX0sYW5pbWF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uLmlzRW1wdHlPYmplY3QoYSksZj1uLnNwZWVkKGIsYyxkKSxnPWZ1bmN0aW9uKCl7dmFyIGI9cWIodGhpcyxuLmV4dGVuZCh7fSxhKSxmKTsoZXx8bi5fZGF0YSh0aGlzLCJmaW5pc2giKSkmJmIuc3RvcCghMCl9O3JldHVybiBnLmZpbmlzaD1nLGV8fGYucXVldWU9PT0hMT90aGlzLmVhY2goZyk6dGhpcy5xdWV1ZShmLnF1ZXVlLGcpfSxzdG9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhKXt2YXIgYj1hLnN0b3A7ZGVsZXRlIGEuc3RvcCxiKGMpfTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGEmJihjPWIsYj1hLGE9dm9pZCAwKSxiJiZhIT09ITEmJnRoaXMucXVldWUoYXx8ImZ4IixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9ITAsZT1udWxsIT1hJiZhKyJxdWV1ZUhvb2tzIixmPW4udGltZXJzLGc9bi5fZGF0YSh0aGlzKTtpZihlKWdbZV0mJmdbZV0uc3RvcCYmZChnW2VdKTtlbHNlIGZvcihlIGluIGcpZ1tlXSYmZ1tlXS5zdG9wJiZrYi50ZXN0KGUpJiZkKGdbZV0pO2ZvcihlPWYubGVuZ3RoO2UtLTspZltlXS5lbGVtIT09dGhpc3x8bnVsbCE9YSYmZltlXS5xdWV1ZSE9PWF8fChmW2VdLmFuaW0uc3RvcChjKSxiPSExLGYuc3BsaWNlKGUsMSkpOyFiJiZjfHxuLmRlcXVldWUodGhpcyxhKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT0hMSYmKGE9YXx8ImZ4IiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGIsYz1uLl9kYXRhKHRoaXMpLGQ9Y1thKyJxdWV1ZSJdLGU9Y1thKyJxdWV1ZUhvb2tzIl0sZj1uLnRpbWVycyxnPWQ/ZC5sZW5ndGg6MDtmb3IoYy5maW5pc2g9ITAsbi5xdWV1ZSh0aGlzLGEsW10pLGUmJmUuc3RvcCYmZS5zdG9wLmNhbGwodGhpcywhMCksYj1mLmxlbmd0aDtiLS07KWZbYl0uZWxlbT09PXRoaXMmJmZbYl0ucXVldWU9PT1hJiYoZltiXS5hbmltLnN0b3AoITApLGYuc3BsaWNlKGIsMSkpO2ZvcihiPTA7Zz5iO2IrKylkW2JdJiZkW2JdLmZpbmlzaCYmZFtiXS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgYy5maW5pc2h9KX19KSxuLmVhY2goWyJ0b2dnbGUiLCJzaG93IiwiaGlkZSJdLGZ1bmN0aW9uKGEsYil7dmFyIGM9bi5mbltiXTtuLmZuW2JdPWZ1bmN0aW9uKGEsZCxlKXtyZXR1cm4gbnVsbD09YXx8ImJvb2xlYW4iPT10eXBlb2YgYT9jLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp0aGlzLmFuaW1hdGUobWIoYiwhMCksYSxkLGUpfX0pLG4uZWFjaCh7c2xpZGVEb3duOm1iKCJzaG93Iiksc2xpZGVVcDptYigiaGlkZSIpLHNsaWRlVG9nZ2xlOm1iKCJ0b2dnbGUiKSxmYWRlSW46e29wYWNpdHk6InNob3cifSxmYWRlT3V0OntvcGFjaXR5OiJoaWRlIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eToidG9nZ2xlIn19LGZ1bmN0aW9uKGEsYil7bi5mblthXT1mdW5jdGlvbihhLGMsZCl7cmV0dXJuIHRoaXMuYW5pbWF0ZShiLGEsYyxkKX19KSxuLnRpbWVycz1bXSxuLmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgYSxiPW4udGltZXJzLGM9MDtmb3IoaGI9bi5ub3coKTtjPGIubGVuZ3RoO2MrKylhPWJbY10sYSgpfHxiW2NdIT09YXx8Yi5zcGxpY2UoYy0tLDEpO2IubGVuZ3RofHxuLmZ4LnN0b3AoKSxoYj12b2lkIDB9LG4uZngudGltZXI9ZnVuY3Rpb24oYSl7bi50aW1lcnMucHVzaChhKSxhKCk/bi5meC5zdGFydCgpOm4udGltZXJzLnBvcCgpfSxuLmZ4LmludGVydmFsPTEzLG4uZnguc3RhcnQ9ZnVuY3Rpb24oKXtpYnx8KGliPWEuc2V0SW50ZXJ2YWwobi5meC50aWNrLG4uZnguaW50ZXJ2YWwpKX0sbi5meC5zdG9wPWZ1bmN0aW9uKCl7YS5jbGVhckludGVydmFsKGliKSxpYj1udWxsfSxuLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxuLmZuLmRlbGF5PWZ1bmN0aW9uKGIsYyl7cmV0dXJuIGI9bi5meD9uLmZ4LnNwZWVkc1tiXXx8YjpiLGM9Y3x8ImZ4Iix0aGlzLnF1ZXVlKGMsZnVuY3Rpb24oYyxkKXt2YXIgZT1hLnNldFRpbWVvdXQoYyxiKTtkLnN0b3A9ZnVuY3Rpb24oKXthLmNsZWFyVGltZW91dChlKX19KX0sZnVuY3Rpb24oKXt2YXIgYSxiPWQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSxjPWQuY3JlYXRlRWxlbWVudCgiZGl2IiksZT1kLmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpLGY9ZS5hcHBlbmRDaGlsZChkLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKTtjPWQuY3JlYXRlRWxlbWVudCgiZGl2IiksYy5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsInQiKSxjLmlubmVySFRNTD0iICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+IixhPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImEiKVswXSxiLnNldEF0dHJpYnV0ZSgidHlwZSIsImNoZWNrYm94IiksYy5hcHBlbmRDaGlsZChiKSxhPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImEiKVswXSxhLnN0eWxlLmNzc1RleHQ9InRvcDoxcHgiLGwuZ2V0U2V0QXR0cmlidXRlPSJ0IiE9PWMuY2xhc3NOYW1lLGwuc3R5bGU9L3RvcC8udGVzdChhLmdldEF0dHJpYnV0ZSgic3R5bGUiKSksbC5ocmVmTm9ybWFsaXplZD0iL2EiPT09YS5nZXRBdHRyaWJ1dGUoImhyZWYiKSxsLmNoZWNrT249ISFiLnZhbHVlLGwub3B0U2VsZWN0ZWQ9Zi5zZWxlY3RlZCxsLmVuY3R5cGU9ISFkLmNyZWF0ZUVsZW1lbnQoImZvcm0iKS5lbmN0eXBlLGUuZGlzYWJsZWQ9ITAsbC5vcHREaXNhYmxlZD0hZi5kaXNhYmxlZCxiPWQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSxiLnNldEF0dHJpYnV0ZSgidmFsdWUiLCIiKSxsLmlucHV0PSIiPT09Yi5nZXRBdHRyaWJ1dGUoInZhbHVlIiksYi52YWx1ZT0idCIsYi5zZXRBdHRyaWJ1dGUoInR5cGUiLCJyYWRpbyIpLGwucmFkaW9WYWx1ZT0idCI9PT1iLnZhbHVlfSgpO3ZhciByYj0vXHIvZyxzYj0vW1x4MjBcdFxyXG5cZl0rL2c7bi5mbi5leHRlbmQoe3ZhbDpmdW5jdGlvbihhKXt2YXIgYixjLGQsZT10aGlzWzBdO3tpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBkPW4uaXNGdW5jdGlvbihhKSx0aGlzLmVhY2goZnVuY3Rpb24oYyl7dmFyIGU7MT09PXRoaXMubm9kZVR5cGUmJihlPWQ/YS5jYWxsKHRoaXMsYyxuKHRoaXMpLnZhbCgpKTphLG51bGw9PWU/ZT0iIjoibnVtYmVyIj09dHlwZW9mIGU/ZSs9IiI6bi5pc0FycmF5KGUpJiYoZT1uLm1hcChlLGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPyIiOmErIiJ9KSksYj1uLnZhbEhvb2tzW3RoaXMudHlwZV18fG4udmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiYic2V0ImluIGImJnZvaWQgMCE9PWIuc2V0KHRoaXMsZSwidmFsdWUiKXx8KHRoaXMudmFsdWU9ZSkpfSk7aWYoZSlyZXR1cm4gYj1uLnZhbEhvb2tzW2UudHlwZV18fG4udmFsSG9va3NbZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiYiZ2V0ImluIGImJnZvaWQgMCE9PShjPWIuZ2V0KGUsInZhbHVlIikpP2M6KGM9ZS52YWx1ZSwic3RyaW5nIj09dHlwZW9mIGM/Yy5yZXBsYWNlKHJiLCIiKTpudWxsPT1jPyIiOmMpfX19KSxuLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPW4uZmluZC5hdHRyKGEsInZhbHVlIik7cmV0dXJuIG51bGwhPWI/YjpuLnRyaW0obi50ZXh0KGEpKS5yZXBsYWNlKHNiLCIgIil9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkPWEub3B0aW9ucyxlPWEuc2VsZWN0ZWRJbmRleCxmPSJzZWxlY3Qtb25lIj09PWEudHlwZXx8MD5lLGc9Zj9udWxsOltdLGg9Zj9lKzE6ZC5sZW5ndGgsaT0wPmU/aDpmP2U6MDtoPmk7aSsrKWlmKGM9ZFtpXSwoYy5zZWxlY3RlZHx8aT09PWUpJiYobC5vcHREaXNhYmxlZD8hYy5kaXNhYmxlZDpudWxsPT09Yy5nZXRBdHRyaWJ1dGUoImRpc2FibGVkIikpJiYoIWMucGFyZW50Tm9kZS5kaXNhYmxlZHx8IW4ubm9kZU5hbWUoYy5wYXJlbnROb2RlLCJvcHRncm91cCIpKSl7aWYoYj1uKGMpLnZhbCgpLGYpcmV0dXJuIGI7Zy5wdXNoKGIpfXJldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9YS5vcHRpb25zLGY9bi5tYWtlQXJyYXkoYiksZz1lLmxlbmd0aDt3aGlsZShnLS0paWYoZD1lW2ddLG4uaW5BcnJheShuLnZhbEhvb2tzLm9wdGlvbi5nZXQoZCksZik+LTEpdHJ5e2Quc2VsZWN0ZWQ9Yz0hMH1jYXRjaChoKXtkLnNjcm9sbEhlaWdodH1lbHNlIGQuc2VsZWN0ZWQ9ITE7cmV0dXJuIGN8fChhLnNlbGVjdGVkSW5kZXg9LTEpLGV9fX19KSxuLmVhY2goWyJyYWRpbyIsImNoZWNrYm94Il0sZnVuY3Rpb24oKXtuLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbi5pc0FycmF5KGIpP2EuY2hlY2tlZD1uLmluQXJyYXkobihhKS52YWwoKSxiKT4tMTp2b2lkIDB9fSxsLmNoZWNrT258fChuLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09PWEuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpPyJvbiI6YS52YWx1ZX0pfSk7dmFyIHRiLHViLHZiPW4uZXhwci5hdHRySGFuZGxlLHdiPS9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2kseGI9bC5nZXRTZXRBdHRyaWJ1dGUseWI9bC5pbnB1dDtuLmZuLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihhLGIpe3JldHVybiBZKHRoaXMsbi5hdHRyLGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtuLnJlbW92ZUF0dHIodGhpcyxhKX0pfX0pLG4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9YS5ub2RlVHlwZTtpZigzIT09ZiYmOCE9PWYmJjIhPT1mKXJldHVybiJ1bmRlZmluZWQiPT10eXBlb2YgYS5nZXRBdHRyaWJ1dGU/bi5wcm9wKGEsYixjKTooMT09PWYmJm4uaXNYTUxEb2MoYSl8fChiPWIudG9Mb3dlckNhc2UoKSxlPW4uYXR0ckhvb2tzW2JdfHwobi5leHByLm1hdGNoLmJvb2wudGVzdChiKT91Yjp0YikpLHZvaWQgMCE9PWM/bnVsbD09PWM/dm9pZCBuLnJlbW92ZUF0dHIoYSxiKTplJiYic2V0ImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDooYS5zZXRBdHRyaWJ1dGUoYixjKyIiKSxjKTplJiYiZ2V0ImluIGUmJm51bGwhPT0oZD1lLmdldChhLGIpKT9kOihkPW4uZmluZC5hdHRyKGEsYiksbnVsbD09ZD92b2lkIDA6ZCkpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihhLGIpe2lmKCFsLnJhZGlvVmFsdWUmJiJyYWRpbyI9PT1iJiZuLm5vZGVOYW1lKGEsImlucHV0Iikpe3ZhciBjPWEudmFsdWU7cmV0dXJuIGEuc2V0QXR0cmlidXRlKCJ0eXBlIixiKSxjJiYoYS52YWx1ZT1jKSxifX19fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlPTAsZj1iJiZiLm1hdGNoKEcpO2lmKGYmJjE9PT1hLm5vZGVUeXBlKXdoaWxlKGM9ZltlKytdKWQ9bi5wcm9wRml4W2NdfHxjLG4uZXhwci5tYXRjaC5ib29sLnRlc3QoYyk/eWImJnhifHwhd2IudGVzdChjKT9hW2RdPSExOmFbbi5jYW1lbENhc2UoImRlZmF1bHQtIitjKV09YVtkXT0hMTpuLmF0dHIoYSxjLCIiKSxhLnJlbW92ZUF0dHJpYnV0ZSh4Yj9jOmQpfX0pLHViPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiPT09ITE/bi5yZW1vdmVBdHRyKGEsYyk6eWImJnhifHwhd2IudGVzdChjKT9hLnNldEF0dHJpYnV0ZSgheGImJm4ucHJvcEZpeFtjXXx8YyxjKTphW24uY2FtZWxDYXNlKCJkZWZhdWx0LSIrYyldPWFbY109ITAsY319LG4uZWFjaChuLmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1x3Ky9nKSxmdW5jdGlvbihhLGIpe3ZhciBjPXZiW2JdfHxuLmZpbmQuYXR0cjt5YiYmeGJ8fCF3Yi50ZXN0KGIpP3ZiW2JdPWZ1bmN0aW9uKGEsYixkKXt2YXIgZSxmO3JldHVybiBkfHwoZj12YltiXSx2YltiXT1lLGU9bnVsbCE9YyhhLGIsZCk/Yi50b0xvd2VyQ2FzZSgpOm51bGwsdmJbYl09ZiksZX06dmJbYl09ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjP3ZvaWQgMDphW24uY2FtZWxDYXNlKCJkZWZhdWx0LSIrYildP2IudG9Mb3dlckNhc2UoKTpudWxsfX0pLHliJiZ4Ynx8KG4uYXR0ckhvb2tzLnZhbHVlPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuLm5vZGVOYW1lKGEsImlucHV0Iik/dm9pZChhLmRlZmF1bHRWYWx1ZT1iKTp0YiYmdGIuc2V0KGEsYixjKX19KSx4Ynx8KHRiPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEuZ2V0QXR0cmlidXRlTm9kZShjKTtyZXR1cm4gZHx8YS5zZXRBdHRyaWJ1dGVOb2RlKGQ9YS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZShjKSksZC52YWx1ZT1iKz0iIiwidmFsdWUiPT09Y3x8Yj09PWEuZ2V0QXR0cmlidXRlKGMpP2I6dm9pZCAwfX0sdmIuaWQ9dmIubmFtZT12Yi5jb29yZHM9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBjP3ZvaWQgMDooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiYiIiE9PWQudmFsdWU/ZC52YWx1ZTpudWxsfSxuLnZhbEhvb2tzLmJ1dHRvbj17Z2V0OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpO3JldHVybiBjJiZjLnNwZWNpZmllZD9jLnZhbHVlOnZvaWQgMH0sc2V0OnRiLnNldH0sbi5hdHRySG9va3MuY29udGVudGVkaXRhYmxlPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RiLnNldChhLCIiPT09Yj8hMTpiLGMpfX0sbi5lYWNoKFsid2lkdGgiLCJoZWlnaHQiXSxmdW5jdGlvbihhLGIpe24uYXR0ckhvb2tzW2JdPXtzZXQ6ZnVuY3Rpb24oYSxjKXtyZXR1cm4iIj09PWM/KGEuc2V0QXR0cmlidXRlKGIsImF1dG8iKSxjKTp2b2lkIDB9fX0pKSxsLnN0eWxlfHwobi5hdHRySG9va3Muc3R5bGU9e2dldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHlsZS5jc3NUZXh0fHx2b2lkIDB9LHNldDpmdW5jdGlvbihhLGIpe3JldHVybiBhLnN0eWxlLmNzc1RleHQ9YisiIn19KTt2YXIgemI9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkL2ksQWI9L14oPzphfGFyZWEpJC9pO24uZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFkodGhpcyxuLnByb3AsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9bi5wcm9wRml4W2FdfHxhLHRoaXMuZWFjaChmdW5jdGlvbigpe3RyeXt0aGlzW2FdPXZvaWQgMCxkZWxldGUgdGhpc1thXX1jYXRjaChiKXt9fSl9fSksbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKDMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIDE9PT1mJiZuLmlzWE1MRG9jKGEpfHwoYj1uLnByb3BGaXhbYl18fGIsZT1uLnByb3BIb29rc1tiXSksdm9pZCAwIT09Yz9lJiYic2V0ImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDphW2JdPWM6ZSYmImdldCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDphW2JdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9bi5maW5kLmF0dHIoYSwidGFiaW5kZXgiKTtyZXR1cm4gYj9wYXJzZUludChiLDEwKTp6Yi50ZXN0KGEubm9kZU5hbWUpfHxBYi50ZXN0KGEubm9kZU5hbWUpJiZhLmhyZWY/MDotMX19fSxwcm9wRml4OnsiZm9yIjoiaHRtbEZvciIsImNsYXNzIjoiY2xhc3NOYW1lIn19KSxsLmhyZWZOb3JtYWxpemVkfHxuLmVhY2goWyJocmVmIiwic3JjIl0sZnVuY3Rpb24oYSxiKXtuLnByb3BIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShiLDQpfX19KSxsLm9wdFNlbGVjdGVkfHwobi5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJihiLnNlbGVjdGVkSW5kZXgsYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCksbnVsbH0sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtiJiYoYi5zZWxlY3RlZEluZGV4LGIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgpfX0pLG4uZWFjaChbInRhYkluZGV4IiwicmVhZE9ubHkiLCJtYXhMZW5ndGgiLCJjZWxsU3BhY2luZyIsImNlbGxQYWRkaW5nIiwicm93U3BhbiIsImNvbFNwYW4iLCJ1c2VNYXAiLCJmcmFtZUJvcmRlciIsImNvbnRlbnRFZGl0YWJsZSJdLGZ1bmN0aW9uKCl7bi5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pLGwuZW5jdHlwZXx8KG4ucHJvcEZpeC5lbmN0eXBlPSJlbmNvZGluZyIpO3ZhciBCYj0vW1x0XHJcblxmXS9nO2Z1bmN0aW9uIENiKGEpe3JldHVybiBuLmF0dHIoYSwiY2xhc3MiKXx8IiJ9bi5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGk9MDtpZihuLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtuKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLGIsQ2IodGhpcykpKX0pO2lmKCJzdHJpbmciPT10eXBlb2YgYSYmYSl7Yj1hLm1hdGNoKEcpfHxbXTt3aGlsZShjPXRoaXNbaSsrXSlpZihlPUNiKGMpLGQ9MT09PWMubm9kZVR5cGUmJigiICIrZSsiICIpLnJlcGxhY2UoQmIsIiAiKSl7Zz0wO3doaWxlKGY9YltnKytdKWQuaW5kZXhPZigiICIrZisiICIpPDAmJihkKz1mKyIgIik7aD1uLnRyaW0oZCksZSE9PWgmJm4uYXR0cihjLCJjbGFzcyIsaCl9fXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpPTA7aWYobi5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bih0aGlzKS5yZW1vdmVDbGFzcyhhLmNhbGwodGhpcyxiLENiKHRoaXMpKSl9KTtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5hdHRyKCJjbGFzcyIsIiIpO2lmKCJzdHJpbmciPT10eXBlb2YgYSYmYSl7Yj1hLm1hdGNoKEcpfHxbXTt3aGlsZShjPXRoaXNbaSsrXSlpZihlPUNiKGMpLGQ9MT09PWMubm9kZVR5cGUmJigiICIrZSsiICIpLnJlcGxhY2UoQmIsIiAiKSl7Zz0wO3doaWxlKGY9YltnKytdKXdoaWxlKGQuaW5kZXhPZigiICIrZisiICIpPi0xKWQ9ZC5yZXBsYWNlKCIgIitmKyIgIiwiICIpO2g9bi50cmltKGQpLGUhPT1oJiZuLmF0dHIoYywiY2xhc3MiLGgpfX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz10eXBlb2YgYTtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBiJiYic3RyaW5nIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6bi5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihjKXtuKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMsQ2IodGhpcyksYiksYil9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixkLGUsZjtpZigic3RyaW5nIj09PWMpe2Q9MCxlPW4odGhpcyksZj1hLm1hdGNoKEcpfHxbXTt3aGlsZShiPWZbZCsrXSllLmhhc0NsYXNzKGIpP2UucmVtb3ZlQ2xhc3MoYik6ZS5hZGRDbGFzcyhiKX1lbHNlIHZvaWQgMCE9PWEmJiJib29sZWFuIiE9PWN8fChiPUNiKHRoaXMpLGImJm4uX2RhdGEodGhpcywiX19jbGFzc05hbWVfXyIsYiksbi5hdHRyKHRoaXMsImNsYXNzIixifHxhPT09ITE/IiI6bi5fZGF0YSh0aGlzLCJfX2NsYXNzTmFtZV9fIil8fCIiKSl9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkPTA7Yj0iICIrYSsiICI7d2hpbGUoYz10aGlzW2QrK10paWYoMT09PWMubm9kZVR5cGUmJigiICIrQ2IoYykrIiAiKS5yZXBsYWNlKEJiLCIgIikuaW5kZXhPZihiKT4tMSlyZXR1cm4hMDtyZXR1cm4hMX19KSxuLmVhY2goImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUiLnNwbGl0KCIgIiksZnVuY3Rpb24oYSxiKXtuLmZuW2JdPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKGIsbnVsbCxhLGMpOnRoaXMudHJpZ2dlcihiKX19KSxuLmZuLmV4dGVuZCh7aG92ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGEpLm1vdXNlbGVhdmUoYnx8YSl9fSk7dmFyIERiPWEubG9jYXRpb24sRWI9bi5ub3coKSxGYj0vXD8vLEdiPS8oLCl8KFxbfHspfCh9fF0pfCIoPzpbXiJcXFxyXG5dfFxcWyJcXFwvYmZucnRdfFxcdVtcZGEtZkEtRl17NH0pKiJccyo6P3x0cnVlfGZhbHNlfG51bGx8LT8oPyEwXGQpXGQrKD86XC5cZCt8KSg/OltlRV1bKy1dP1xkK3wpL2c7bi5wYXJzZUpTT049ZnVuY3Rpb24oYil7aWYoYS5KU09OJiZhLkpTT04ucGFyc2UpcmV0dXJuIGEuSlNPTi5wYXJzZShiKyIiKTt2YXIgYyxkPW51bGwsZT1uLnRyaW0oYisiIik7cmV0dXJuIGUmJiFuLnRyaW0oZS5yZXBsYWNlKEdiLGZ1bmN0aW9uKGEsYixlLGYpe3JldHVybiBjJiZiJiYoZD0wKSwwPT09ZD9hOihjPWV8fGIsZCs9IWYtIWUsIiIpfSkpP0Z1bmN0aW9uKCJyZXR1cm4gIitlKSgpOm4uZXJyb3IoIkludmFsaWQgSlNPTjogIitiKX0sbi5wYXJzZVhNTD1mdW5jdGlvbihiKXt2YXIgYyxkO2lmKCFifHwic3RyaW5nIiE9dHlwZW9mIGIpcmV0dXJuIG51bGw7dHJ5e2EuRE9NUGFyc2VyPyhkPW5ldyBhLkRPTVBhcnNlcixjPWQucGFyc2VGcm9tU3RyaW5nKGIsInRleHQveG1sIikpOihjPW5ldyBhLkFjdGl2ZVhPYmplY3QoIk1pY3Jvc29mdC5YTUxET00iKSxjLmFzeW5jPSJmYWxzZSIsYy5sb2FkWE1MKGIpKX1jYXRjaChlKXtjPXZvaWQgMH1yZXR1cm4gYyYmYy5kb2N1bWVudEVsZW1lbnQmJiFjLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aHx8bi5lcnJvcigiSW52YWxpZCBYTUw6ICIrYiksY307dmFyIEhiPS8jLiokLyxJYj0vKFs/Jl0pXz1bXiZdKi8sSmI9L14oLio/KTpbIFx0XSooW15cclxuXSopXHI/JC9nbSxLYj0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxMYj0vXig/OkdFVHxIRUFEKSQvLE1iPS9eXC9cLy8sTmI9L14oW1x3ListXSs6KSg/OlwvXC8oPzpbXlwvPyNdKkB8KShbXlwvPyM6XSopKD86OihcZCspfCl8KS8sT2I9e30sUGI9e30sUWI9IiovIi5jb25jYXQoIioiKSxSYj1EYi5ocmVmLFNiPU5iLmV4ZWMoUmIudG9Mb3dlckNhc2UoKSl8fFtdO2Z1bmN0aW9uIFRiKGEpe3JldHVybiBmdW5jdGlvbihiLGMpeyJzdHJpbmciIT10eXBlb2YgYiYmKGM9YixiPSIqIik7dmFyIGQsZT0wLGY9Yi50b0xvd2VyQ2FzZSgpLm1hdGNoKEcpfHxbXTtpZihuLmlzRnVuY3Rpb24oYykpd2hpbGUoZD1mW2UrK10pIisiPT09ZC5jaGFyQXQoMCk/KGQ9ZC5zbGljZSgxKXx8IioiLChhW2RdPWFbZF18fFtdKS51bnNoaWZ0KGMpKTooYVtkXT1hW2RdfHxbXSkucHVzaChjKX19ZnVuY3Rpb24gVWIoYSxiLGMsZCl7dmFyIGU9e30sZj1hPT09UGI7ZnVuY3Rpb24gZyhoKXt2YXIgaTtyZXR1cm4gZVtoXT0hMCxuLmVhY2goYVtoXXx8W10sZnVuY3Rpb24oYSxoKXt2YXIgaj1oKGIsYyxkKTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGp8fGZ8fGVbal0/Zj8hKGk9aik6dm9pZCAwOihiLmRhdGFUeXBlcy51bnNoaWZ0KGopLGcoaiksITEpfSksaX1yZXR1cm4gZyhiLmRhdGFUeXBlc1swXSl8fCFlWyIqIl0mJmcoIioiKX1mdW5jdGlvbiBWYihhLGIpe3ZhciBjLGQsZT1uLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKGQgaW4gYil2b2lkIDAhPT1iW2RdJiYoKGVbZF0/YTpjfHwoYz17fSkpW2RdPWJbZF0pO3JldHVybiBjJiZuLmV4dGVuZCghMCxhLGMpLGF9ZnVuY3Rpb24gV2IoYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5jb250ZW50cyxpPWEuZGF0YVR5cGVzO3doaWxlKCIqIj09PWlbMF0paS5zaGlmdCgpLHZvaWQgMD09PWUmJihlPWEubWltZVR5cGV8fGIuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtVHlwZSIpKTtpZihlKWZvcihnIGluIGgpaWYoaFtnXSYmaFtnXS50ZXN0KGUpKXtpLnVuc2hpZnQoZyk7YnJlYWt9aWYoaVswXWluIGMpZj1pWzBdO2Vsc2V7Zm9yKGcgaW4gYyl7aWYoIWlbMF18fGEuY29udmVydGVyc1tnKyIgIitpWzBdXSl7Zj1nO2JyZWFrfWR8fChkPWcpfWY9Znx8ZH1yZXR1cm4gZj8oZiE9PWlbMF0mJmkudW5zaGlmdChmKSxjW2ZdKTp2b2lkIDB9ZnVuY3Rpb24gWGIoYSxiLGMsZCl7dmFyIGUsZixnLGgsaSxqPXt9LGs9YS5kYXRhVHlwZXMuc2xpY2UoKTtpZihrWzFdKWZvcihnIGluIGEuY29udmVydGVycylqW2cudG9Mb3dlckNhc2UoKV09YS5jb252ZXJ0ZXJzW2ddO2Y9ay5zaGlmdCgpO3doaWxlKGYpaWYoYS5yZXNwb25zZUZpZWxkc1tmXSYmKGNbYS5yZXNwb25zZUZpZWxkc1tmXV09YiksIWkmJmQmJmEuZGF0YUZpbHRlciYmKGI9YS5kYXRhRmlsdGVyKGIsYS5kYXRhVHlwZSkpLGk9ZixmPWsuc2hpZnQoKSlpZigiKiI9PT1mKWY9aTtlbHNlIGlmKCIqIiE9PWkmJmkhPT1mKXtpZihnPWpbaSsiICIrZl18fGpbIiogIitmXSwhZylmb3IoZSBpbiBqKWlmKGg9ZS5zcGxpdCgiICIpLGhbMV09PT1mJiYoZz1qW2krIiAiK2hbMF1dfHxqWyIqICIraFswXV0pKXtnPT09ITA/Zz1qW2VdOmpbZV0hPT0hMCYmKGY9aFswXSxrLnVuc2hpZnQoaFsxXSkpO2JyZWFrfWlmKGchPT0hMClpZihnJiZhWyJ0aHJvd3MiXSliPWcoYik7ZWxzZSB0cnl7Yj1nKGIpfWNhdGNoKGwpe3JldHVybntzdGF0ZToicGFyc2VyZXJyb3IiLGVycm9yOmc/bDoiTm8gY29udmVyc2lvbiBmcm9tICIraSsiIHRvICIrZn19fXJldHVybntzdGF0ZToic3VjY2VzcyIsZGF0YTpifX1uLmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6UmIsdHlwZToiR0VUIixpc0xvY2FsOktiLnRlc3QoU2JbMV0pLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZToiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IixhY2NlcHRzOnsiKiI6UWIsdGV4dDoidGV4dC9wbGFpbiIsaHRtbDoidGV4dC9odG1sIix4bWw6ImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLGpzb246ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCJ9LGNvbnRlbnRzOnt4bWw6L1xieG1sXGIvLGh0bWw6L1xiaHRtbC8sanNvbjovXGJqc29uXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOiJyZXNwb25zZVhNTCIsdGV4dDoicmVzcG9uc2VUZXh0Iixqc29uOiJyZXNwb25zZUpTT04ifSxjb252ZXJ0ZXJzOnsiKiB0ZXh0IjpTdHJpbmcsInRleHQgaHRtbCI6ITAsInRleHQganNvbiI6bi5wYXJzZUpTT04sInRleHQgeG1sIjpuLnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj9WYihWYihhLG4uYWpheFNldHRpbmdzKSxiKTpWYihuLmFqYXhTZXR0aW5ncyxhKX0sYWpheFByZWZpbHRlcjpUYihPYiksYWpheFRyYW5zcG9ydDpUYihQYiksYWpheDpmdW5jdGlvbihiLGMpeyJvYmplY3QiPT10eXBlb2YgYiYmKGM9YixiPXZvaWQgMCksYz1jfHx7fTt2YXIgZCxlLGYsZyxoLGksaixrLGw9bi5hamF4U2V0dXAoe30sYyksbT1sLmNvbnRleHR8fGwsbz1sLmNvbnRleHQmJihtLm5vZGVUeXBlfHxtLmpxdWVyeSk/bihtKTpuLmV2ZW50LHA9bi5EZWZlcnJlZCgpLHE9bi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5Iikscj1sLnN0YXR1c0NvZGV8fHt9LHM9e30sdD17fSx1PTAsdj0iY2FuY2VsZWQiLHc9e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihhKXt2YXIgYjtpZigyPT09dSl7aWYoIWspe2s9e307d2hpbGUoYj1KYi5leGVjKGcpKWtbYlsxXS50b0xvd2VyQ2FzZSgpXT1iWzJdfWI9a1thLnRvTG93ZXJDYXNlKCldfXJldHVybiBudWxsPT1iP251bGw6Yn0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIDI9PT11P2c6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEudG9Mb3dlckNhc2UoKTtyZXR1cm4gdXx8KGE9dFtjXT10W2NdfHxhLHNbYV09YiksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gdXx8KGwubWltZVR5cGU9YSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihhKXt2YXIgYjtpZihhKWlmKDI+dSlmb3IoYiBpbiBhKXJbYl09W3JbYl0sYVtiXV07ZWxzZSB3LmFsd2F5cyhhW3cuc3RhdHVzXSk7cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGEpe3ZhciBiPWF8fHY7cmV0dXJuIGomJmouYWJvcnQoYikseSgwLGIpLHRoaXN9fTtpZihwLnByb21pc2UodykuY29tcGxldGU9cS5hZGQsdy5zdWNjZXNzPXcuZG9uZSx3LmVycm9yPXcuZmFpbCxsLnVybD0oKGJ8fGwudXJsfHxSYikrIiIpLnJlcGxhY2UoSGIsIiIpLnJlcGxhY2UoTWIsU2JbMV0rIi8vIiksbC50eXBlPWMubWV0aG9kfHxjLnR5cGV8fGwubWV0aG9kfHxsLnR5cGUsbC5kYXRhVHlwZXM9bi50cmltKGwuZGF0YVR5cGV8fCIqIikudG9Mb3dlckNhc2UoKS5tYXRjaChHKXx8WyIiXSxudWxsPT1sLmNyb3NzRG9tYWluJiYoZD1OYi5leGVjKGwudXJsLnRvTG93ZXJDYXNlKCkpLGwuY3Jvc3NEb21haW49ISghZHx8ZFsxXT09PVNiWzFdJiZkWzJdPT09U2JbMl0mJihkWzNdfHwoImh0dHA6Ij09PWRbMV0/IjgwIjoiNDQzIikpPT09KFNiWzNdfHwoImh0dHA6Ij09PVNiWzFdPyI4MCI6IjQ0MyIpKSkpLGwuZGF0YSYmbC5wcm9jZXNzRGF0YSYmInN0cmluZyIhPXR5cGVvZiBsLmRhdGEmJihsLmRhdGE9bi5wYXJhbShsLmRhdGEsbC50cmFkaXRpb25hbCkpLFViKE9iLGwsYyx3KSwyPT09dSlyZXR1cm4gdztpPW4uZXZlbnQmJmwuZ2xvYmFsLGkmJjA9PT1uLmFjdGl2ZSsrJiZuLmV2ZW50LnRyaWdnZXIoImFqYXhTdGFydCIpLGwudHlwZT1sLnR5cGUudG9VcHBlckNhc2UoKSxsLmhhc0NvbnRlbnQ9IUxiLnRlc3QobC50eXBlKSxmPWwudXJsLGwuaGFzQ29udGVudHx8KGwuZGF0YSYmKGY9bC51cmwrPShGYi50ZXN0KGYpPyImIjoiPyIpK2wuZGF0YSxkZWxldGUgbC5kYXRhKSxsLmNhY2hlPT09ITEmJihsLnVybD1JYi50ZXN0KGYpP2YucmVwbGFjZShJYiwiJDFfPSIrRWIrKyk6ZisoRmIudGVzdChmKT8iJiI6Ij8iKSsiXz0iK0ViKyspKSxsLmlmTW9kaWZpZWQmJihuLmxhc3RNb2RpZmllZFtmXSYmdy5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Nb2RpZmllZC1TaW5jZSIsbi5sYXN0TW9kaWZpZWRbZl0pLG4uZXRhZ1tmXSYmdy5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Ob25lLU1hdGNoIixuLmV0YWdbZl0pKSwobC5kYXRhJiZsLmhhc0NvbnRlbnQmJmwuY29udGVudFR5cGUhPT0hMXx8Yy5jb250ZW50VHlwZSkmJncuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIixsLmNvbnRlbnRUeXBlKSx3LnNldFJlcXVlc3RIZWFkZXIoIkFjY2VwdCIsbC5kYXRhVHlwZXNbMF0mJmwuYWNjZXB0c1tsLmRhdGFUeXBlc1swXV0/bC5hY2NlcHRzW2wuZGF0YVR5cGVzWzBdXSsoIioiIT09bC5kYXRhVHlwZXNbMF0/IiwgIitRYisiOyBxPTAuMDEiOiIiKTpsLmFjY2VwdHNbIioiXSk7Zm9yKGUgaW4gbC5oZWFkZXJzKXcuc2V0UmVxdWVzdEhlYWRlcihlLGwuaGVhZGVyc1tlXSk7aWYobC5iZWZvcmVTZW5kJiYobC5iZWZvcmVTZW5kLmNhbGwobSx3LGwpPT09ITF8fDI9PT11KSlyZXR1cm4gdy5hYm9ydCgpO3Y9ImFib3J0Ijtmb3IoZSBpbntzdWNjZXNzOjEsZXJyb3I6MSxjb21wbGV0ZToxfSl3W2VdKGxbZV0pO2lmKGo9VWIoUGIsbCxjLHcpKXtpZih3LnJlYWR5U3RhdGU9MSxpJiZvLnRyaWdnZXIoImFqYXhTZW5kIixbdyxsXSksMj09PXUpcmV0dXJuIHc7bC5hc3luYyYmbC50aW1lb3V0PjAmJihoPWEuc2V0VGltZW91dChmdW5jdGlvbigpe3cuYWJvcnQoInRpbWVvdXQiKX0sbC50aW1lb3V0KSk7dHJ5e3U9MSxqLnNlbmQocyx5KX1jYXRjaCh4KXtpZighKDI+dSkpdGhyb3cgeDt5KC0xLHgpfX1lbHNlIHkoLTEsIk5vIFRyYW5zcG9ydCIpO2Z1bmN0aW9uIHkoYixjLGQsZSl7dmFyIGsscyx0LHYseCx5PWM7MiE9PXUmJih1PTIsaCYmYS5jbGVhclRpbWVvdXQoaCksaj12b2lkIDAsZz1lfHwiIix3LnJlYWR5U3RhdGU9Yj4wPzQ6MCxrPWI+PTIwMCYmMzAwPmJ8fDMwND09PWIsZCYmKHY9V2IobCx3LGQpKSx2PVhiKGwsdix3LGspLGs/KGwuaWZNb2RpZmllZCYmKHg9dy5nZXRSZXNwb25zZUhlYWRlcigiTGFzdC1Nb2RpZmllZCIpLHgmJihuLmxhc3RNb2RpZmllZFtmXT14KSx4PXcuZ2V0UmVzcG9uc2VIZWFkZXIoImV0YWciKSx4JiYobi5ldGFnW2ZdPXgpKSwyMDQ9PT1ifHwiSEVBRCI9PT1sLnR5cGU/eT0ibm9jb250ZW50IjozMDQ9PT1iP3k9Im5vdG1vZGlmaWVkIjooeT12LnN0YXRlLHM9di5kYXRhLHQ9di5lcnJvcixrPSF0KSk6KHQ9eSwhYiYmeXx8KHk9ImVycm9yIiwwPmImJihiPTApKSksdy5zdGF0dXM9Yix3LnN0YXR1c1RleHQ9KGN8fHkpKyIiLGs/cC5yZXNvbHZlV2l0aChtLFtzLHksd10pOnAucmVqZWN0V2l0aChtLFt3LHksdF0pLHcuc3RhdHVzQ29kZShyKSxyPXZvaWQgMCxpJiZvLnRyaWdnZXIoaz8iYWpheFN1Y2Nlc3MiOiJhamF4RXJyb3IiLFt3LGwsaz9zOnRdKSxxLmZpcmVXaXRoKG0sW3cseV0pLGkmJihvLnRyaWdnZXIoImFqYXhDb21wbGV0ZSIsW3csbF0pLC0tbi5hY3RpdmV8fG4uZXZlbnQudHJpZ2dlcigiYWpheFN0b3AiKSkpfXJldHVybiB3fSxnZXRKU09OOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbi5nZXQoYSxiLGMsImpzb24iKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uZ2V0KGEsdm9pZCAwLGIsInNjcmlwdCIpfX0pLG4uZWFjaChbImdldCIsInBvc3QiXSxmdW5jdGlvbihhLGIpe25bYl09ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIG4uaXNGdW5jdGlvbihjKSYmKGU9ZXx8ZCxkPWMsYz12b2lkIDApLG4uYWpheChuLmV4dGVuZCh7dXJsOmEsdHlwZTpiLGRhdGFUeXBlOmUsZGF0YTpjLHN1Y2Nlc3M6ZH0sbi5pc1BsYWluT2JqZWN0KGEpJiZhKSl9fSksbi5fZXZhbFVybD1mdW5jdGlvbihhKXtyZXR1cm4gbi5hamF4KHt1cmw6YSx0eXBlOiJHRVQiLGRhdGFUeXBlOiJzY3JpcHQiLGNhY2hlOiEwLGFzeW5jOiExLGdsb2JhbDohMSwidGhyb3dzIjohMH0pfSxuLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihhKXtpZihuLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtuKHRoaXMpLndyYXBBbGwoYS5jYWxsKHRoaXMsYikpfSk7aWYodGhpc1swXSl7dmFyIGI9bihhLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApO3RoaXNbMF0ucGFyZW50Tm9kZSYmYi5pbnNlcnRCZWZvcmUodGhpc1swXSksYi5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzO3doaWxlKGEuZmlyc3RDaGlsZCYmMT09PWEuZmlyc3RDaGlsZC5ub2RlVHlwZSlhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX0pLmFwcGVuZCh0aGlzKX1yZXR1cm4gdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKGEpe3JldHVybiBuLmlzRnVuY3Rpb24oYSk/dGhpcy5lYWNoKGZ1bmN0aW9uKGIpe24odGhpcykud3JhcElubmVyKGEuY2FsbCh0aGlzLGIpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPW4odGhpcyksYz1iLmNvbnRlbnRzKCk7Yy5sZW5ndGg/Yy53cmFwQWxsKGEpOmIuYXBwZW5kKGEpfSl9LHdyYXA6ZnVuY3Rpb24oYSl7dmFyIGI9bi5pc0Z1bmN0aW9uKGEpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYyl7bih0aGlzKS53cmFwQWxsKGI/YS5jYWxsKHRoaXMsYyk6YSl9KX0sdW53cmFwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe24ubm9kZU5hbWUodGhpcywiYm9keSIpfHxuKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KS5lbmQoKX19KTtmdW5jdGlvbiBZYihhKXtyZXR1cm4gYS5zdHlsZSYmYS5zdHlsZS5kaXNwbGF5fHxuLmNzcyhhLCJkaXNwbGF5Iil9ZnVuY3Rpb24gWmIoYSl7aWYoIW4uY29udGFpbnMoYS5vd25lckRvY3VtZW50fHxkLGEpKXJldHVybiEwO3doaWxlKGEmJjE9PT1hLm5vZGVUeXBlKXtpZigibm9uZSI9PT1ZYihhKXx8ImhpZGRlbiI9PT1hLnR5cGUpcmV0dXJuITA7YT1hLnBhcmVudE5vZGV9cmV0dXJuITF9bi5leHByLmZpbHRlcnMuaGlkZGVuPWZ1bmN0aW9uKGEpe3JldHVybiBsLnJlbGlhYmxlSGlkZGVuT2Zmc2V0cygpP2Eub2Zmc2V0V2lkdGg8PTAmJmEub2Zmc2V0SGVpZ2h0PD0wJiYhYS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aDpaYihhKX0sbi5leHByLmZpbHRlcnMudmlzaWJsZT1mdW5jdGlvbihhKXtyZXR1cm4hbi5leHByLmZpbHRlcnMuaGlkZGVuKGEpfTt2YXIgJGI9LyUyMC9nLF9iPS9cW1xdJC8sYWM9L1xyP1xuL2csYmM9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGNjPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBkYyhhLGIsYyxkKXt2YXIgZTtpZihuLmlzQXJyYXkoYikpbi5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHxfYi50ZXN0KGEpP2QoYSxlKTpkYyhhKyJbIisoIm9iamVjdCI9PXR5cGVvZiBlJiZudWxsIT1lP2I6IiIpKyJdIixlLGMsZCl9KTtlbHNlIGlmKGN8fCJvYmplY3QiIT09bi50eXBlKGIpKWQoYSxiKTtlbHNlIGZvcihlIGluIGIpZGMoYSsiWyIrZSsiXSIsYltlXSxjLGQpfW4ucGFyYW09ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9ZnVuY3Rpb24oYSxiKXtiPW4uaXNGdW5jdGlvbihiKT9iKCk6bnVsbD09Yj8iIjpiLGRbZC5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChhKSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGIpfTtpZih2b2lkIDA9PT1iJiYoYj1uLmFqYXhTZXR0aW5ncyYmbi5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWwpLG4uaXNBcnJheShhKXx8YS5qcXVlcnkmJiFuLmlzUGxhaW5PYmplY3QoYSkpbi5lYWNoKGEsZnVuY3Rpb24oKXtlKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKGMgaW4gYSlkYyhjLGFbY10sYixlKTtyZXR1cm4gZC5qb2luKCImIikucmVwbGFjZSgkYiwiKyIpfSxuLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIG4ucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT1uLnByb3AodGhpcywiZWxlbWVudHMiKTtyZXR1cm4gYT9uLm1ha2VBcnJheShhKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFuKHRoaXMpLmlzKCI6ZGlzYWJsZWQiKSYmY2MudGVzdCh0aGlzLm5vZGVOYW1lKSYmIWJjLnRlc3QoYSkmJih0aGlzLmNoZWNrZWR8fCFaLnRlc3QoYSkpfSkubWFwKGZ1bmN0aW9uKGEsYil7dmFyIGM9bih0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09Yz9udWxsOm4uaXNBcnJheShjKT9uLm1hcChjLGZ1bmN0aW9uKGEpe3JldHVybntuYW1lOmIubmFtZSx2YWx1ZTphLnJlcGxhY2UoYWMsIlxyXG4iKX19KTp7bmFtZTpiLm5hbWUsdmFsdWU6Yy5yZXBsYWNlKGFjLCJcclxuIil9fSkuZ2V0KCl9fSksbi5hamF4U2V0dGluZ3MueGhyPXZvaWQgMCE9PWEuQWN0aXZlWE9iamVjdD9mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzTG9jYWw/aWMoKTpkLmRvY3VtZW50TW9kZT44P2hjKCk6L14oZ2V0fHBvc3R8aGVhZHxwdXR8ZGVsZXRlfG9wdGlvbnMpJC9pLnRlc3QodGhpcy50eXBlKSYmaGMoKXx8aWMoKX06aGM7dmFyIGVjPTAsZmM9e30sZ2M9bi5hamF4U2V0dGluZ3MueGhyKCk7YS5hdHRhY2hFdmVudCYmYS5hdHRhY2hFdmVudCgib251bmxvYWQiLGZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIGZjKWZjW2FdKHZvaWQgMCwhMCl9KSxsLmNvcnM9ISFnYyYmIndpdGhDcmVkZW50aWFscyJpbiBnYyxnYz1sLmFqYXg9ISFnYyxnYyYmbi5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGIpe2lmKCFiLmNyb3NzRG9tYWlufHxsLmNvcnMpe3ZhciBjO3JldHVybntzZW5kOmZ1bmN0aW9uKGQsZSl7dmFyIGYsZz1iLnhocigpLGg9KytlYztpZihnLm9wZW4oYi50eXBlLGIudXJsLGIuYXN5bmMsYi51c2VybmFtZSxiLnBhc3N3b3JkKSxiLnhockZpZWxkcylmb3IoZiBpbiBiLnhockZpZWxkcylnW2ZdPWIueGhyRmllbGRzW2ZdO2IubWltZVR5cGUmJmcub3ZlcnJpZGVNaW1lVHlwZSYmZy5vdmVycmlkZU1pbWVUeXBlKGIubWltZVR5cGUpLGIuY3Jvc3NEb21haW58fGRbIlgtUmVxdWVzdGVkLVdpdGgiXXx8KGRbIlgtUmVxdWVzdGVkLVdpdGgiXT0iWE1MSHR0cFJlcXVlc3QiKTtmb3IoZiBpbiBkKXZvaWQgMCE9PWRbZl0mJmcuc2V0UmVxdWVzdEhlYWRlcihmLGRbZl0rIiIpO2cuc2VuZChiLmhhc0NvbnRlbnQmJmIuZGF0YXx8bnVsbCksYz1mdW5jdGlvbihhLGQpe3ZhciBmLGksajtpZihjJiYoZHx8ND09PWcucmVhZHlTdGF0ZSkpaWYoZGVsZXRlIGZjW2hdLGM9dm9pZCAwLGcub25yZWFkeXN0YXRlY2hhbmdlPW4ubm9vcCxkKTQhPT1nLnJlYWR5U3RhdGUmJmcuYWJvcnQoKTtlbHNle2o9e30sZj1nLnN0YXR1cywic3RyaW5nIj09dHlwZW9mIGcucmVzcG9uc2VUZXh0JiYoai50ZXh0PWcucmVzcG9uc2VUZXh0KTt0cnl7aT1nLnN0YXR1c1RleHR9Y2F0Y2goayl7aT0iIn1mfHwhYi5pc0xvY2FsfHxiLmNyb3NzRG9tYWluPzEyMjM9PT1mJiYoZj0yMDQpOmY9ai50ZXh0PzIwMDo0MDR9aiYmZShmLGksaixnLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKX0sYi5hc3luYz80PT09Zy5yZWFkeVN0YXRlP2Euc2V0VGltZW91dChjKTpnLm9ucmVhZHlzdGF0ZWNoYW5nZT1mY1toXT1jOmMoKX0sYWJvcnQ6ZnVuY3Rpb24oKXtjJiZjKHZvaWQgMCwhMCl9fX19KTtmdW5jdGlvbiBoYygpe3RyeXtyZXR1cm4gbmV3IGEuWE1MSHR0cFJlcXVlc3R9Y2F0Y2goYil7fX1mdW5jdGlvbiBpYygpe3RyeXtyZXR1cm4gbmV3IGEuQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKX1jYXRjaChiKXt9fW4uYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6InRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0In0sY29udGVudHM6e3NjcmlwdDovXGIoPzpqYXZhfGVjbWEpc2NyaXB0XGIvfSxjb252ZXJ0ZXJzOnsidGV4dCBzY3JpcHQiOmZ1bmN0aW9uKGEpe3JldHVybiBuLmdsb2JhbEV2YWwoYSksYX19fSksbi5hamF4UHJlZmlsdGVyKCJzY3JpcHQiLGZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEuY2FjaGUmJihhLmNhY2hlPSExKSxhLmNyb3NzRG9tYWluJiYoYS50eXBlPSJHRVQiLGEuZ2xvYmFsPSExKX0pLG4uYWpheFRyYW5zcG9ydCgic2NyaXB0IixmdW5jdGlvbihhKXtpZihhLmNyb3NzRG9tYWluKXt2YXIgYixjPWQuaGVhZHx8bigiaGVhZCIpWzBdfHxkLmRvY3VtZW50RWxlbWVudDtyZXR1cm57c2VuZDpmdW5jdGlvbihlLGYpe2I9ZC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSxiLmFzeW5jPSEwLGEuc2NyaXB0Q2hhcnNldCYmKGIuY2hhcnNldD1hLnNjcmlwdENoYXJzZXQpLGIuc3JjPWEudXJsLGIub25sb2FkPWIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKGEsYyl7KGN8fCFiLnJlYWR5U3RhdGV8fC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoYi5yZWFkeVN0YXRlKSkmJihiLm9ubG9hZD1iLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLGIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLGI9bnVsbCxjfHxmKDIwMCwic3VjY2VzcyIpKX0sYy5pbnNlcnRCZWZvcmUoYixjLmZpcnN0Q2hpbGQpfSxhYm9ydDpmdW5jdGlvbigpe2ImJmIub25sb2FkKHZvaWQgMCwhMCl9fX19KTt2YXIgamM9W10sa2M9Lyg9KVw/KD89JnwkKXxcP1w/LztuLmFqYXhTZXR1cCh7anNvbnA6ImNhbGxiYWNrIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGE9amMucG9wKCl8fG4uZXhwYW5kbysiXyIrRWIrKztyZXR1cm4gdGhpc1thXT0hMCxhfX0pLG4uYWpheFByZWZpbHRlcigianNvbiBqc29ucCIsZnVuY3Rpb24oYixjLGQpe3ZhciBlLGYsZyxoPWIuanNvbnAhPT0hMSYmKGtjLnRlc3QoYi51cmwpPyJ1cmwiOiJzdHJpbmciPT10eXBlb2YgYi5kYXRhJiYwPT09KGIuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYma2MudGVzdChiLmRhdGEpJiYiZGF0YSIpO3JldHVybiBofHwianNvbnAiPT09Yi5kYXRhVHlwZXNbMF0/KGU9Yi5qc29ucENhbGxiYWNrPW4uaXNGdW5jdGlvbihiLmpzb25wQ2FsbGJhY2spP2IuanNvbnBDYWxsYmFjaygpOmIuanNvbnBDYWxsYmFjayxoP2JbaF09YltoXS5yZXBsYWNlKGtjLCIkMSIrZSk6Yi5qc29ucCE9PSExJiYoYi51cmwrPShGYi50ZXN0KGIudXJsKT8iJiI6Ij8iKStiLmpzb25wKyI9IitlKSxiLmNvbnZlcnRlcnNbInNjcmlwdCBqc29uIl09ZnVuY3Rpb24oKXtyZXR1cm4gZ3x8bi5lcnJvcihlKyIgd2FzIG5vdCBjYWxsZWQiKSxnWzBdfSxiLmRhdGFUeXBlc1swXT0ianNvbiIsZj1hW2VdLGFbZV09ZnVuY3Rpb24oKXtnPWFyZ3VtZW50c30sZC5hbHdheXMoZnVuY3Rpb24oKXt2b2lkIDA9PT1mP24oYSkucmVtb3ZlUHJvcChlKTphW2VdPWYsYltlXSYmKGIuanNvbnBDYWxsYmFjaz1jLmpzb25wQ2FsbGJhY2ssamMucHVzaChlKSksZyYmbi5pc0Z1bmN0aW9uKGYpJiZmKGdbMF0pLGc9Zj12b2lkIDB9KSwic2NyaXB0Iik6dm9pZCAwfSksbi5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKCFhfHwic3RyaW5nIiE9dHlwZW9mIGEpcmV0dXJuIG51bGw7ImJvb2xlYW4iPT10eXBlb2YgYiYmKGM9YixiPSExKSxiPWJ8fGQ7dmFyIGU9eC5leGVjKGEpLGY9IWMmJltdO3JldHVybiBlP1tiLmNyZWF0ZUVsZW1lbnQoZVsxXSldOihlPWphKFthXSxiLGYpLGYmJmYubGVuZ3RoJiZuKGYpLnJlbW92ZSgpLG4ubWVyZ2UoW10sZS5jaGlsZE5vZGVzKSl9O3ZhciBsYz1uLmZuLmxvYWQ7bi5mbi5sb2FkPWZ1bmN0aW9uKGEsYixjKXtpZigic3RyaW5nIiE9dHlwZW9mIGEmJmxjKXJldHVybiBsYy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGQsZSxmLGc9dGhpcyxoPWEuaW5kZXhPZigiICIpO3JldHVybiBoPi0xJiYoZD1uLnRyaW0oYS5zbGljZShoLGEubGVuZ3RoKSksYT1hLnNsaWNlKDAsaCkpLG4uaXNGdW5jdGlvbihiKT8oYz1iLGI9dm9pZCAwKTpiJiYib2JqZWN0Ij09dHlwZW9mIGImJihlPSJQT1NUIiksZy5sZW5ndGg+MCYmbi5hamF4KHt1cmw6YSx0eXBlOmV8fCJHRVQiLGRhdGFUeXBlOiJodG1sIixkYXRhOmJ9KS5kb25lKGZ1bmN0aW9uKGEpe2Y9YXJndW1lbnRzLGcuaHRtbChkP24oIjxkaXY+IikuYXBwZW5kKG4ucGFyc2VIVE1MKGEpKS5maW5kKGQpOmEpfSkuYWx3YXlzKGMmJmZ1bmN0aW9uKGEsYil7Zy5lYWNoKGZ1bmN0aW9uKCl7Yy5hcHBseSh0aGlzLGZ8fFthLnJlc3BvbnNlVGV4dCxiLGFdKX0pfSksdGhpc30sbi5lYWNoKFsiYWpheFN0YXJ0IiwiYWpheFN0b3AiLCJhamF4Q29tcGxldGUiLCJhamF4RXJyb3IiLCJhamF4U3VjY2VzcyIsImFqYXhTZW5kIl0sZnVuY3Rpb24oYSxiKXtuLmZuW2JdPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm9uKGIsYSl9fSksbi5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG4uZ3JlcChuLnRpbWVycyxmdW5jdGlvbihiKXtyZXR1cm4gYT09PWIuZWxlbX0pLmxlbmd0aH07ZnVuY3Rpb24gbWMoYSl7cmV0dXJuIG4uaXNXaW5kb3coYSk/YTo5PT09YS5ub2RlVHlwZT9hLmRlZmF1bHRWaWV3fHxhLnBhcmVudFdpbmRvdzohMX1uLm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixrPW4uY3NzKGEsInBvc2l0aW9uIiksbD1uKGEpLG09e307InN0YXRpYyI9PT1rJiYoYS5zdHlsZS5wb3NpdGlvbj0icmVsYXRpdmUiKSxoPWwub2Zmc2V0KCksZj1uLmNzcyhhLCJ0b3AiKSxpPW4uY3NzKGEsImxlZnQiKSxqPSgiYWJzb2x1dGUiPT09a3x8ImZpeGVkIj09PWspJiZuLmluQXJyYXkoImF1dG8iLFtmLGldKT4tMSxqPyhkPWwucG9zaXRpb24oKSxnPWQudG9wLGU9ZC5sZWZ0KTooZz1wYXJzZUZsb2F0KGYpfHwwLGU9cGFyc2VGbG9hdChpKXx8MCksbi5pc0Z1bmN0aW9uKGIpJiYoYj1iLmNhbGwoYSxjLG4uZXh0ZW5kKHt9LGgpKSksbnVsbCE9Yi50b3AmJihtLnRvcD1iLnRvcC1oLnRvcCtnKSxudWxsIT1iLmxlZnQmJihtLmxlZnQ9Yi5sZWZ0LWgubGVmdCtlKSwidXNpbmciaW4gYj9iLnVzaW5nLmNhbGwoYSxtKTpsLmNzcyhtKX19LG4uZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXtuLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkPXt0b3A6MCxsZWZ0OjB9LGU9dGhpc1swXSxmPWUmJmUub3duZXJEb2N1bWVudDtpZihmKXJldHVybiBiPWYuZG9jdW1lbnRFbGVtZW50LG4uY29udGFpbnMoYixlKT8oInVuZGVmaW5lZCIhPXR5cGVvZiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCYmKGQ9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksYz1tYyhmKSx7dG9wOmQudG9wKyhjLnBhZ2VZT2Zmc2V0fHxiLnNjcm9sbFRvcCktKGIuY2xpZW50VG9wfHwwKSxsZWZ0OmQubGVmdCsoYy5wYWdlWE9mZnNldHx8Yi5zY3JvbGxMZWZ0KS0oYi5jbGllbnRMZWZ0fHwwKX0pOmR9LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGEsYixjPXt0b3A6MCxsZWZ0OjB9LGQ9dGhpc1swXTtyZXR1cm4iZml4ZWQiPT09bi5jc3MoZCwicG9zaXRpb24iKT9iPWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KGE9dGhpcy5vZmZzZXRQYXJlbnQoKSxiPXRoaXMub2Zmc2V0KCksbi5ub2RlTmFtZShhWzBdLCJodG1sIil8fChjPWEub2Zmc2V0KCkpLGMudG9wKz1uLmNzcyhhWzBdLCJib3JkZXJUb3BXaWR0aCIsITApLGMubGVmdCs9bi5jc3MoYVswXSwiYm9yZGVyTGVmdFdpZHRoIiwhMCkpLHt0b3A6Yi50b3AtYy50b3Atbi5jc3MoZCwibWFyZ2luVG9wIiwhMCksbGVmdDpiLmxlZnQtYy5sZWZ0LW4uY3NzKGQsIm1hcmdpbkxlZnQiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudDt3aGlsZShhJiYhbi5ub2RlTmFtZShhLCJodG1sIikmJiJzdGF0aWMiPT09bi5jc3MoYSwicG9zaXRpb24iKSlhPWEub2Zmc2V0UGFyZW50O3JldHVybiBhfHxRYX0pfX0pLG4uZWFjaCh7c2Nyb2xsTGVmdDoicGFnZVhPZmZzZXQiLHNjcm9sbFRvcDoicGFnZVlPZmZzZXQifSxmdW5jdGlvbihhLGIpe3ZhciBjPS9ZLy50ZXN0KGIpO24uZm5bYV09ZnVuY3Rpb24oZCl7cmV0dXJuIFkodGhpcyxmdW5jdGlvbihhLGQsZSl7dmFyIGY9bWMoYSk7cmV0dXJuIHZvaWQgMD09PWU/Zj9iIGluIGY/ZltiXTpmLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtkXTphW2RdOnZvaWQoZj9mLnNjcm9sbFRvKGM/bihmKS5zY3JvbGxMZWZ0KCk6ZSxjP2U6bihmKS5zY3JvbGxUb3AoKSk6YVtkXT1lKX0sYSxkLGFyZ3VtZW50cy5sZW5ndGgsbnVsbCl9fSksbi5lYWNoKFsidG9wIiwibGVmdCJdLGZ1bmN0aW9uKGEsYil7bi5jc3NIb29rc1tiXT1VYShsLnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oYSxjKXtyZXR1cm4gYz8oYz1TYShhLGIpLE9hLnRlc3QoYyk/bihhKS5wb3NpdGlvbigpW2JdKyJweCI6Yyk6dm9pZCAwfSl9KSxuLmVhY2goe0hlaWdodDoiaGVpZ2h0IixXaWR0aDoid2lkdGgifSxmdW5jdGlvbihhLGIpe24uZWFjaCh7CnBhZGRpbmc6ImlubmVyIithLGNvbnRlbnQ6YiwiIjoib3V0ZXIiK2F9LGZ1bmN0aW9uKGMsZCl7bi5mbltkXT1mdW5jdGlvbihkLGUpe3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgmJihjfHwiYm9vbGVhbiIhPXR5cGVvZiBkKSxnPWN8fChkPT09ITB8fGU9PT0hMD8ibWFyZ2luIjoiYm9yZGVyIik7cmV0dXJuIFkodGhpcyxmdW5jdGlvbihiLGMsZCl7dmFyIGU7cmV0dXJuIG4uaXNXaW5kb3coYik/Yi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbImNsaWVudCIrYV06OT09PWIubm9kZVR5cGU/KGU9Yi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoYi5ib2R5WyJzY3JvbGwiK2FdLGVbInNjcm9sbCIrYV0sYi5ib2R5WyJvZmZzZXQiK2FdLGVbIm9mZnNldCIrYV0sZVsiY2xpZW50IithXSkpOnZvaWQgMD09PWQ/bi5jc3MoYixjLGcpOm4uc3R5bGUoYixjLGQsZyl9LGIsZj9kOnZvaWQgMCxmLG51bGwpfX0pfSksbi5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLm9uKGEsbnVsbCxiLGMpfSx1bmJpbmQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5vZmYoYSxudWxsLGIpfSxkZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5vbihiLGEsYyxkKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGEsIioqIik6dGhpcy5vZmYoYixhfHwiKioiLGMpfX0pLG4uZm4uc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aH0sbi5mbi5hbmRTZWxmPW4uZm4uYWRkQmFjaywiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoImpxdWVyeSIsW10sZnVuY3Rpb24oKXtyZXR1cm4gbn0pO3ZhciBuYz1hLmpRdWVyeSxvYz1hLiQ7cmV0dXJuIG4ubm9Db25mbGljdD1mdW5jdGlvbihiKXtyZXR1cm4gYS4kPT09biYmKGEuJD1vYyksYiYmYS5qUXVlcnk9PT1uJiYoYS5qUXVlcnk9bmMpLG59LGJ8fChhLmpRdWVyeT1hLiQ9biksbn0pOwo="}]}],"settings":{"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"},{"reasons":{"en":"Used for a phishing compain to compromise users of baon-nutrition.com"},"rules":["/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"],"severity":"8"}]}}